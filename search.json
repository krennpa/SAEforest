[{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://krennpa.github.io/SAEforest/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Patrick Krennmair. Author, maintainer.","code":""},{"path":"https://krennpa.github.io/SAEforest/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Krennmair P (2022). SAEforest: Mixed Effect Random Forests Small Area Estimation. https://github.com/krennpa/SAEforest, https://krennpa.github.io/SAEforest/.","code":"@Manual{,   title = {SAEforest: Mixed Effect Random Forests for Small Area Estimation},   author = {Patrick Krennmair},   year = {2022},   note = {https://github.com/krennpa/SAEforest, https://krennpa.github.io/SAEforest/}, }"},{"path":"https://krennpa.github.io/SAEforest/index.html","id":"saeforest","dir":"","previous_headings":"","what":"Mixed Effect Random Forests for Small Area Estimation","title":"Mixed Effect Random Forests for Small Area Estimation","text":"package promotes use Mixed Effects Random Forests (MERFs) applications Small Area Estimation (SAE). package effectively combines functions estimation regionally disaggregated linear nonlinear economic inequality indicators using survey sample data. Estimated models increase precision direct estimates survey data, combining unit-level aggregated population level covariate information census register data. Apart point estimates, MSE estimates requested indicators can easily obtained. package provides procedures facilitate analysis model performance MERFs visualizes predictive relations covariates variable importance. Additionally, users can summarize map indicators corresponding measures uncertainty.","code":""},{"path":"https://krennpa.github.io/SAEforest/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Mixed Effect Random Forests for Small Area Estimation","text":"can install development version SAEforest Github :","code":"# install.packages(\"devtools\") devtools::install_github(\"krennpa/SAEforest\")"},{"path":"https://krennpa.github.io/SAEforest/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Mixed Effect Random Forests for Small Area Estimation","text":"basic example demonstrates functionality package: included features inspect model graphically. instance look following output generic function plot, shows -called variable importance plot: inspect model graphically, also map indicators. Take look example Austrian pseudo-data district-level mean income produced function map_indicators: hope like presentation package. interested model-based SAE definitely also check package emdi.","code":"library(SAEforest)  data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[,-c(1,16,17,18)]  #Example 1: #Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                          smp_data = eusilcA_smp, pop_data = eusilcA_pop)  #SAEforest generics: summary(model1) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                        500 #> Number of independent variables:         14 #> Mtry:                                     3 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                     0.62976 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39193.1  39204.2 -19594.5  39189.1     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -2.9730 -0.5194 -0.0759  0.4448 11.8159  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept) 11157235 3340     #>  Residual             30335770 5508     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.2688944  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 4 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                           #>  0 -19545.67 -19573.45 -19593.59 -19594.53 #> Press [enter] to continue"},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":null,"dir":"Reference","previous_headings":"","what":"Main function for unit-level MERF — MERFranger","title":"Main function for unit-level MERF — MERFranger","text":"function enables use Mixed Effects Random Forests (MERFs) effectively combining random forest ranger model capturing random effects lme4. MERF algorithm algorithmic procedure reminiscent EM-algorithm (see Details). function base-function wrapping function (SAEforest_model directly used ordinary user. Recommended exceptions applications exceeding scope existing wrapper functions research. function MERFranger allows model complex patterns structural relations (see Examples). function returns object class MERFranger, can used produce unit-level predictions. contrast wrapping functions, function directly provide SAE estimates domain-specific indicators.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main function for unit-level MERF — MERFranger","text":"","code":"MERFranger(   Y,   X,   random,   data,   importance = \"none\",   initialRandomEffects = 0,   ErrorTolerance = 1e-04,   MaxIterations = 25,   na.rm = TRUE,   ... )"},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main function for unit-level MERF — MERFranger","text":"Y Continuous input value target variable. X Matrix predictive covariates. random Specification random effects terms following syntax lmer. Random effect terms specified vertical bars (|) separating expressions design matrices grouping factors. details see lmer example . data data.frame sample data including specified elements Y X. importance Variable importance mode processed random forest ranger. Must 'none', 'impurity', 'impurity_corrected', 'permutation'. details see ranger. initialRandomEffects Numeric value vector initial estimate random effects. Defaults 0. ErrorTolerance Numeric value monitor MERF algorithm's convergence. Defaults 1e-04. MaxIterations Numeric value specifying maximal amount iterations MERF algorithm. Defaults 25. na.rm Logical. Whether missing values removed. Defaults TRUE. ... Additional parameters directly passed random forest ranger. important parameters instance mtry (number variables possibly split node), num.trees (number trees). details possible parameters see ranger example .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main function for unit-level MERF — MERFranger","text":"object class MERFranger includes following elements: Forest random forest class ranger modelling fixed effects model. EffectModel model random effects class merMod capturing structural components MERFs modeling random components. RandomEffects List element containing values random intercepts EffectModel. RanEffSD Numeric value standard deviation random intercepts. ErrorSD Numeric value standard deviation unit-level errors. VarianceCovariance VarCorr matrix EffectModel. LogLik Vector numerical entries showing loglikelihood MERF algorithm. IterationsUsed Numeric number iterations used convergence MERF algorithm. OOBresiduals Vector OOB-residuals. Random Character specifying random intercept random effects model. ErrorTolerance Numerical value monitor MERF algorithm's convergence. initialRandomEffects Numeric value vector intial specification random effects. MaxIterations Numeric value specifying maximal amount iterations MERF algorithm.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Main function for unit-level MERF — MERFranger","text":"exists generic function predict objects obtained MERFranger. MERF algorithm iteratively optimizes two separate steps: ) random forest function, assuming random effects term correct b) estimates random effects part, assuming OOB-predictions forest correct. Overall convergence algorithm monitored log-likelihood joint model components. details see Krennmair & Schmid (2022) Hajjem et al. (2014). Note MERFranger object composition elements random forest class ranger random effects model class merMod. Thus, generic functions applicable corresponding objects. details generic functions see ranger lmer well examples .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Main function for unit-level MERF — MERFranger","text":"Hajjem, ., Bellavance, F., & Larocque, D. (2014). Mixed-Effects Random Forest Clustered Data. Journal Statistical Computation Simulation, 84 (6), 1313–1328. Krennmair, P., & Schmid, T. (2022). Flexible Domain Prediction Using Mixed Effects Random Forests. Journal Royal Statistical Society: Series C (Applied Statistics) (forthcoming).","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main function for unit-level MERF — MERFranger","text":"","code":"# Load Data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Example 1: # Calculating general model used in wrapper functions  model1 <- MERFranger(Y = income, X = X_covar, random = \"(1|district)\",                      data = eusilcA_smp, num.trees=50)  # get individual predictions:  ind_pred <- predict(model1, eusilcA_pop)"},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest.html","id":null,"dir":"Reference","previous_headings":"","what":"'SAEforest' - Estimating disaggregated indicators using Mixed Effects Random Forests — SAEforest","title":"'SAEforest' - Estimating disaggregated indicators using Mixed Effects Random Forests — SAEforest","text":"package SAEforest promotes use Mixed Effects Random Forests (MERFs) applications Small Area Estimation (SAE). package effectively combines functions estimation regionally disaggregated linear nonlinear economic inequality indicators using survey sample data. Estimated models increase precision direct estimates survey data, combining unit-level aggregated population level covariate information census register data. Apart point estimates, MSE estimates requested indicators can easily obtained. package provides procedures facilitate analysis model performance MERFs visualizes predictive relations covariates variable importance. Additionally, users can summarize map indicators corresponding measures uncertainty. Methodological details functions package found Krennmair & Schmid (2022), Krennmair et al. (2022a) Krennmair et al. (2022b).","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"'SAEforest' - Estimating disaggregated indicators using Mixed Effects Random Forests — SAEforest","text":"package includes main function MERFranger wrapped SAEforest_model improved SAE workflow. function produces object inheriting requested results regionally disaggregated point uncertainty estimates. Additionally, statistical information model fit variable importance accessible generic functions summary (summary.SAEforest) class-specific plot function (plot.SAEforest). full documentation objects class SAEforest see SAEforestObject. overview currently provided functions within package can seen help(package=\"SAEforest\").","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"'SAEforest' - Estimating disaggregated indicators using Mixed Effects Random Forests — SAEforest","text":"Krennmair, P., & Schmid, T. (2022). Flexible Domain Prediction Using Mixed Effects Random Forests. Journal Royal Statistical Society: Series C (Applied Statistics) (forthcoming). Krennmair, P., & Würz, N. & Schmid, T. (2022a). Analysing Opportunity Cost Care Work using Mixed Effects Random Forests Aggregated Census Data. Krennmair, P., & Schmid, T & Tzavidis, Nikos. (2022b). Estimation Poverty Indicators Using Mixed Effects Random Forests. Working Paper.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitted 'SAEforest' object — SAEforestObject","title":"Fitted 'SAEforest' object — SAEforestObject","text":"object class SAEforest always includes point estimates regionally disaggregated economic inequality indicators MERFmodel element including information model fit fixed effects well random effects. Optionally SAEforestObject includes corresponding MSE estimates. case mean estimates aggregated covariate information, SAEforestObject additionally includes element, capturing number variables used weighting process aggregated covariate information. object class SAEforestObject, following generic functions applicable: print, plot, summary summarize_indicators. Additionally selected generic functions lme4 (fixef, getData, ranef, residuals, sigma, VarCorr) directly applicable object class SAEforest.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitted 'SAEforest' object — SAEforestObject","text":"Four components always included SAEforest object. MSE_estimates AdjustedSD NULL except MSE results requested. element NrCovar exists SAEforest objects produced SAEforest_model option aggData = TRUE. MERFmodel included MERFmodel object comprises information model fit, details performed MERF algorithm well details variance components. See exact description components. Indicators data frame first column area-level identifier additional columns indicators interest. Note objects SAEforest_model report \"Mean\". MSE_estimates MSE results requested. data frame first column area-level identifier additional columns MSE estimates indicators interest. Note objects SAEforest_model report MSE values \"Mean\". NrCovar means aggregated covariate information estimated, .e. SAEforest_model option aggData = TRUE. list containing variable names covariates used calculation needed calibration weights point estimates. See Krennmair et al. (2022a) methodological details explanations. Details object MERFmodel: Forest random forest class ranger modelling fixed effects model. EffectModel model random effects class merMod capturing structural components MERFs modeling random components. RandomEffects List element containing values random intercepts EffectModel. RanEffSD Numeric value standard deviation random intercepts. ErrorSD Numeric value standard deviation unit-level errors. VarianceCovariance VarCorr matrix EffectModel. LogLik Vector numerical entries showing loglikelihood MERF algorithm. IterationsUsed Numeric number iteratirons used convergence MERF algorithm. OOBresiduals Vector OOB-residuals. Random Character specifying random intercept random effects model. ErrorTolerance Numerical value monitor MERF algorithm's convergence. initialRandomEffects Numeric value vector intial specification random effects. MaxIterations Numeric value specifying maximal amount iterations MERF algorithm. call summarized function call producing object. data_specs Data characteristics domain-specific sample sizes number --sample areas. data Processed survey sample data.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fitted 'SAEforest' object — SAEforestObject","text":"Note MERFmodel object composition elements random forest class ranger random effects model class merMod. Thus, generic functions applicable corresponding objects. details generic functions see ranger lmer well examples .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fitted 'SAEforest' object — SAEforestObject","text":"Krennmair, P., & Schmid, T. (2022). Flexible Domain Prediction Using Mixed Effects Random Forests. Journal Royal Statistical Society: Series C (Applied Statistics) (forthcoming). Krennmair, P., & Würz, N. & Schmid, T. (2022a). Analysing Opportunity Cost Care Work using Mixed Effects Random Forests Aggregated Census Data. Krennmair, P., & Schmid, T & Tzavidis, Nikos. (2022b). Estimation Poverty Indicators Using Mixed Effects Random Forests. Working Paper.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitted 'SAEforest' object — SAEforestObject","text":"","code":"# Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[,-c(1,16,17,18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                          smp_data = eusilcA_smp, pop_data = eusilcA_pop,                          num.trees=50, mtry = 3)  #SAEforest generics:  summary(model1) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop, num.trees = 50,  #>     mtry = 3) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                         50 #> Number of independent variables:         14 #> Mtry:                                     3 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                     0.59676 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39326.7  39337.8 -19661.3  39322.7     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -3.5992 -0.5201 -0.0795  0.4292 11.4508  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept) 12933295 3596     #>  Residual             32407461 5693     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.2852466  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 8 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                                                         #>  0 -19575.27 -19610.99 -19652.13 -19634.53 -19651.09 -19638.21 -19661.58 #>            #>  -19661.34 summarize_indicators(model1) #> Warning: For objects of class SAEforest_mean or SAEforest_meanAGG, only results for the Indicator \"Mean\" are reported #> Indicator/s: Mean #>                         district     Mean #> 1                      Amstetten 14489.02 #> 2                          Baden 22788.79 #> 3                        Bludenz 12518.83 #> 4                 Braunau am Inn 12439.91 #> 5                        Bregenz 33302.58 #> 6            Bruck an der Leitha 23622.62 #> 7             Bruck-Mürzzuschlag 23361.44 #> 8               Deutschlandsberg 20855.65 #> 9                       Dornbirn 19590.73 #> 10                      Eferding 15973.56 #> 11            Eisenstadt (Stadt) 34894.21 #> 12           Eisenstadt-Umgebung 24884.29 #> 13                     Feldkirch 15916.42 #> 14                   Feldkirchen 14273.18 #> 15                     Freistadt 16858.34 #> 16                       Gmunden 19934.30 #> 17                         Gmünd 14112.54 #> 18                  Graz (Stadt) 17814.51 #> 19                 Graz-Umgebung 34404.65 #> 20                  Grieskirchen 16944.27 #> 21                   Gänserndorf 20386.56 #> 22                       Güssing 16737.21 #> 23                       Hallein 15868.49 #> 24          Hartberg-Fürstenfeld 13500.14 #> 25                      Hermagor 13361.34 #> 26                    Hollabrunn 16489.05 #> 27                          Horn 15510.89 #> 28                          Imst 13818.95 #> 29              Innsbruck (Land) 26300.88 #> 30             Innsbruck (Stadt) 17425.37 #> 31                   Jennersdorf 13532.06 #> 32        Kirchdorf an der Krems 16537.45 #> 33                     Kitzbühel 12405.63 #> 34             Klagenfurt (Land) 22519.86 #> 35            Klagenfurt (Stadt) 33251.05 #> 36                    Korneuburg 27856.01 #> 37                  Krems (Land) 15442.25 #> 38    Krems an der Donau (Stadt) 17240.14 #> 39                      Kufstein 20451.09 #> 40                       Landeck 13380.47 #> 41                      Leibnitz 15822.21 #> 42                        Leoben 20446.44 #> 43                         Lienz 12522.79 #> 44                        Liezen 12059.66 #> 45                    Lilienfeld 15483.58 #> 46                  Linz (Stadt) 22404.50 #> 47                     Linz-Land 27437.60 #> 48                   Mattersburg 20406.94 #> 49                          Melk 12537.20 #> 50                    Mistelbach 19613.10 #> 51                         Murau 13341.97 #> 52                        Murtal 18692.57 #> 53                       Mödling 41021.02 #> 54                   Neunkirchen 16318.08 #> 55               Neusiedl am See 18499.77 #> 56                Oberpullendorf 17421.08 #> 57                      Oberwart 13544.95 #> 58                          Perg 17430.62 #> 59                        Reutte 18342.83 #> 60              Ried im Innkreis 14121.75 #> 61                      Rohrbach 15025.52 #> 62                  Rust (Stadt) 13755.51 #> 63              Salzburg (Stadt) 20305.38 #> 64             Salzburg-Umgebung 30962.68 #> 65        Sankt Johann im Pongau 14776.12 #> 66           Sankt Pölten (Land) 16794.19 #> 67          Sankt Pölten (Stadt) 16361.31 #> 68        Sankt Veit an der Glan 14895.61 #> 69                      Scheibbs 14542.62 #> 70                        Schwaz 15876.96 #> 71                     Schärding 10875.03 #> 72           Spittal an der Drau 13713.11 #> 73                 Steyr (Stadt) 18547.93 #> 74                    Steyr-Land 25818.30 #> 75              Südoststeiermark 13741.35 #> 76                       Tamsweg 16139.22 #> 77                         Tulln 20282.78 #> 78               Urfahr-Umgebung 42386.89 #> 79               Villach (Stadt) 22195.46 #> 80                  Villach Land 19545.19 #> 81                     Voitsberg 17249.69 #> 82                   Vöcklabruck 17872.22 #> 83                   Völkermarkt 15485.92 #> 84        Waidhofen an der Thaya 13285.73 #> 85 Waidhofen an der Ybbs (Stadt) 17408.61 #> 86                          Weiz 14920.10 #> 87                  Wels (Stadt) 14038.97 #> 88                     Wels-Land 20041.17 #> 89                          Wien 20062.02 #> 90        Wiener Neustadt (Land) 19505.65 #> 91       Wiener Neustadt (Stadt) 17263.42 #> 92                     Wolfsberg 17219.11 #> 93                   Zell am See 10430.54 #> 94                        Zwettl 13795.75 residuals(model1) #>           213           194           258           460           798  #>  -6249.029998   5553.648438   2294.302027   -495.790860   4716.387252  #>           447           567           704           680           277  #>   -159.395790    694.254796   1666.344181   4370.801298  -6173.159486  #>            65           507           672            41           435  #>  -6421.509447  -1244.004538   6304.410875  -3263.974212  -1158.999624  #>           532           248            75           673           401  #>   -501.530732   9607.530965  -2390.116408  -1208.961817    443.805681  #>           765           156           436            12           612  #>   7875.188415    652.036896  -4087.632661  -4584.267666  -2561.297416  #>           514           529           142           390           107  #>    768.242793  -2852.879337  -2490.642165   2188.648609  -5823.789045  #>           478          2806          2787          5385          3760  #>   1158.122198   3513.207116   1806.511652  -4862.407699   4627.309589  #>          2552          3271          6185          6320          6080  #>   9218.242731   1803.177235  -3295.668760   1404.483309  -5616.426433  #>          5667          2638          4275          6175          6112  #>   -827.988438   -596.532167   -525.407898   -736.434246   3795.198170  #>          5838          5641          3705          3660          3609  #>   6401.375695   -370.233106   1833.538149  -7936.952955   4478.300805  #>          2712          6686          5166          4054          4840  #>   1482.040965   1689.384987  -3301.229134 -10214.749946      4.786610  #>          4133          6653          6871          5143          4922  #>  -1545.714005   5009.652306   -932.531576  -2653.283121  -3324.313375  #>          5927          7005          6332          4727          5439  #>  -3967.536874   3061.011236  -1956.581671   -140.851961  -1238.297504  #>          3887          6199          6667          3704          3450  #>   4717.818575  -1845.315662   6142.810732   3041.828787   -150.180661  #>          6292          2636          5399          2838          4376  #>  11051.615219   -930.773634   5825.383243  -4643.090351   2427.943384  #>          7138          2834          3916          5585          4065  #>  -3576.114953     -6.874572    633.630063  -8310.574771   1451.914797  #>          6249          6821          6958          6029          5513  #>  -1825.515916  -6860.439426   4892.831548  -5071.821282  -1988.204649  #>          5165          3738          4548          6291          3589  #>  -2211.271213   3510.059229   9108.267861  -6154.047596  -8359.585884  #>          3262          5338          3680          3983          6991  #>  -4274.080768   1222.362528   4440.805325  -1911.124054  -1555.129247  #>          4670          4466          6163          6026          3544  #>  -1226.593791   4183.685088  -3504.416686   4076.933689    453.453900  #>          2541          5640          4858          2939          4596  #>   1480.312331  -5509.083993   2668.526623   6822.969199    -67.288016  #>          3129          2523          5060          6526          6244  #>   1200.449206   1064.767559  -3571.942772   2124.544055  -1041.346756  #>          5489          6008          6890          4207          6582  #>   3977.147278  -6417.295249  -3077.558944   3443.332728   -664.162751  #>          6993          4421          3548          7136          2817  #>  -2706.661035   -816.328886    421.966296   1687.709358   1621.860221  #>          3325          6911          3577          4635          3958  #>   1846.957176  -1202.918747   1877.190950  -3295.740837    315.932886  #>          6484          3012          4848          6601          2860  #>  -1621.996688    -32.769519  10525.253175  -3399.757722   3858.976607  #>          2556          5897          5781          3899          6099  #>     80.066180   1457.466520    384.346953   7316.737175   -667.082026  #>          5524          4317          4638          5654          5285  #>   -568.477362   -440.990969   2215.380617   3497.771468  -1005.918783  #>          4961          3657          5045          6192          5889  #>    418.818398     68.737173  -3024.655253  -3690.612675  -4288.101648  #>          4199          2883          6294          4443          3747  #>  -1573.988558  -1295.768002   3920.974744  -5959.720354   2323.771383  #>          3755          7139          3358          3394          5210  #>   -330.071577  -1782.240329    706.316110  -2553.942792   8097.030687  #>          2701          3550          5323          4470          5815  #>  -5377.211119   2741.372450   3993.367855   -980.847204   -929.935123  #>          6855          3856          4803          6646          5425  #>    680.488577  -1537.935950    782.327744  -2174.262434  -1390.445655  #>          3914          4660          4710          6461          3623  #>  -2787.227652  -1526.235134   1096.386915  -2960.571042   5141.741353  #>          2739          5650          3212          6872          6630  #>  -5537.308935   3253.468370   2294.194015   6485.133464   7441.182558  #>          5146          2917          5952          7046          3500  #>  10513.888394  -1755.106223   -590.544983  -2808.957498  -4026.129673  #>          3592          4618          3649          4653          4117  #>  -3928.526060  -1378.597577  -3416.351454   6575.390784   8938.690617  #>          6910          3695          4312          3533          4547  #>  -5099.812715    670.591849  -2603.086741   2111.098130  -3571.364908  #>          4732          2872          4291          6235          6380  #>   -633.967863  -2639.538547   4585.239201    360.942041  -3375.068397  #>          2697          4333          3813          6647          6076  #>   2647.241521   9407.831023  -4196.180787   -535.985982  -5458.084393  #>          2764          7051          4043          4846          3121  #>  -4187.258704   5118.194666   1230.683532  -2187.704223  -1114.056123  #>          6528          4380          5982          3719          5784  #>    933.295375  -3149.245502   6626.460729   1557.096099    990.811398  #>          5993          6924          4761          3656          4818  #>    476.334646    140.473458  -3370.421874  -3062.921578   4973.395816  #>          6541          2779          5230          6481          3411  #>   -167.475239  -3197.963491   2008.857433  -7545.421800    -45.081246  #>          6436          3612          4360          5892          6136  #>   3011.145172   7214.084908  -1118.311386  -1295.299301   8395.043406  #>          6451          4267          3768          5920          4374  #>   -922.962426  -1195.633076    511.446595  -7780.935200   1168.311526  #>          7018          5044          7103          3294          5777  #>   1261.802901   2620.938544    402.845146  -4036.123456  -4506.908125  #>          3909          5469          5223          6202          4095  #>   2711.340055  -3107.049474   2249.657924    570.519049  -3085.626005  #>          5089          7119          4784          3388          4002  #>   -880.411559   -172.686196   1244.966229   -476.427262   1500.725574  #>          2721          6960          4869          6338          3674  #>  -6469.300998   5145.474753   2866.748984   -376.549568  -3018.375908  #>          4326          4342          4178          6226          6238  #>   1456.550295  -2257.116106   1677.082712   6641.682626  -5057.657007  #>          4677          6264          6651          3893          6279  #>  12254.243388  -6706.934209  -4302.855284    226.775677  15355.587350  #>          5260          5945          4613          3630          5062  #>  18659.569938  18940.130276  17635.312776  10117.469089   8269.193713  #>          2750          2762          3508          3191          3072  #>  -3187.304584  16497.505680    789.654303   9845.877568   1607.660840  #>          4527          3514          7026          4507          5437  #>  -7255.077458  -8220.860928  -4598.194035  -3120.402091  14703.541708  #>          5269          7040          5753          3784          2648  #>  -8947.112773  -7704.370520  -4648.557214  -9948.181779   4690.506371  #>          4911          2771          4574          5691          6059  #>  -3269.294628 -10401.272454  -3041.117277  -8297.525030  -5900.788268  #>          4908          3019          3844          4056          2715  #>  -6185.734313  -1285.124092 -11003.198729  -3691.430608   7962.033519  #>          6913          6354          2912          2927          7083  #>    528.609915  -5207.774498   2561.947982   -152.241133  -5307.606365  #>          5418          4420          5443          6027          2664  #>  -3826.008675   3572.118076    593.162685  -2901.099025  -6088.720826  #>          5734          4997          2926          3173          2782  #>   -814.055175    697.343426  -3959.097534   1305.732595  -4049.850789  #>          4709          5441          3298          4050          4879  #>  -1126.056253   7413.685874   1259.790677  -4399.286963   7363.556414  #>          7076          4017          6742          2802          4149  #>  -3531.014060   4986.992430   6606.625837   -775.521954   3549.262381  #>          5980          6893          3217          4588          6538  #>  -2072.125138  -1147.023808  -5858.626583  -1588.835241   4490.876816  #>          5666          3310          2905          4324          3037  #>   3899.135786  -3797.224959   3903.066610  -1421.362541   4041.634904  #>          3843          3185          4666          2947          6721  #>   1745.326423   3687.730408    354.268325   1060.758990    702.697922  #>          6246          2983          4565          5422          5745  #>  -4874.373908   4881.515320  -1302.700667  -5666.380156   3572.647758  #>          6227          4347          6161          6127          3021  #>  -1080.452173    462.548138   3483.205242  -2095.509357  -4005.651738  #>          5180          5375          6650          3228          3569  #>   5088.307011    440.554115  -2706.906612   3551.092874  -5960.381600  #>          7077          4270          4822          5235          3275  #>  -4519.991908   1662.489045  -3085.026347  -2753.213449  -1254.950594  #>          4959          2627          5272          5322          4601  #>  -6244.004935   1722.809821   7707.518455   -243.811607   8535.368860  #>          5258          4069          5148          3882          3307  #>   -749.463112  -1956.812710   -460.862719   2241.609448    -93.960435  #>          5358          2681          5508          5463          6662  #>   -389.286213    105.060553   5340.331196    663.817827  -8589.319477  #>          2851          5984          6720          5983          5869  #>  -1253.785438  -1293.914139  -1586.014421   2061.528942  -1843.123209  #>          3105          5026          4814          3734          3267  #>   4002.641432  -7065.945114   1352.595644   6967.444427   7999.764366  #>          3601          5981          5577          3931          4503  #>   1311.671814  -5311.201503   5683.385439   -671.640180   3539.925103  #>          5543          3323          6205          7032          4145  #>   -377.104483   -933.153026  -3894.583447  -2487.372142   -248.094004  #>          4256          2970          4744          4740          3928  #>  -7342.143779   -898.682150   -847.985196   1446.707188   5692.748490  #>          5403          3107          3798          6965          3591  #>     75.474336  -3625.629548  -5015.180623   2987.098354  -4990.523591  #>          5332          2957          4662          4563          6442  #>   4759.335330  -3899.647618  -2611.355620   3648.447833  -2187.166979  #>          5574          6896          7133          3197          5130  #>  -2662.693825    663.915861  -3330.123055  -1815.530551   1994.878856  #>          4924          5702          6937          6399          6018  #>   6540.833653     -4.658543   6098.058622  -1753.192296  -6507.556668  #>          6520          5701          6485          4356          5084  #>   4891.681709  -1034.589830   -687.260932  -6304.425657   5375.737499  #>          4413          6881          6446         19888         19002  #>   4398.170176   -973.646697   2181.612122  28226.667745  23039.962632  #>         18315         20371         20862         21386         21124  #>   6110.219005   7686.056715   8081.792125   5821.983117   5855.609726  #>         21694         21420         22630         20981         18630  #>  10669.955164  -4998.859151    295.024397   -858.672094   2694.324199  #>         18313         18238         21052         22103         19650  #>  13551.218424   6847.913687   3649.432852   4741.821509   -422.312615  #>         20548         23178         23814         23535         23711  #>  11331.819359   8407.098271   6747.777915   9337.188275   4144.685550  #>         21778         19831         23072         20153         20500  #>   3362.204974     31.112290  13024.095117   9353.885517   2750.709007  #>         20483         23502         23268         22897         23972  #>   6694.207800   -342.862501  -5703.213606   1575.333228   7757.900080  #>         18689         22742         21776         19453         19908  #>    879.560711  -1735.870472   2681.375312   -645.087298  -2387.577922  #>         18589         23641         22342         20947         21075  #>  -3945.019572   7528.049365   -620.191322   2935.576939   1820.889386  #>         23365         21917         20956         22397         23123  #>   -816.628029   1470.578311   -316.011894   3977.466985   3705.632827  #>         20533         19614         18300         18856         21830  #>   8936.206770   3166.336201   3244.376126  -2082.909966   1929.321159  #>         19222         22581         19761         19842         23427  #>   5167.632597   1186.205741   1809.730690   2712.743086   8651.057918  #>         23480         19824         21803         19318         23274  #>  -4055.987327  -2642.652004   7613.751059    968.418815   1536.101126  #>         21617         20287         21937         22381         19784  #>  -1731.296950  -6639.232820  -6714.212319  -1558.242370   2720.383325  #>         21084         20734         18518         19329         22350  #>  -2471.376017  -1574.967188  -1498.873893   1174.022531    450.354571  #>         23104         18411         23216         19359         23117  #>   6267.056547   5731.556064  -5000.203992  16120.055007  -3407.815252  #>         19382         19665         23051         20991         21044  #>  -3392.314150    541.297450   -817.942248  -1599.098283  -8597.652178  #>         22752         18563         18772         21808         22355  #>   3654.752651   7467.480895  -1682.122152    757.138270    806.044755  #>         21231         23666         20912         18510         18671  #>  -3157.286909   -107.042120   5373.352823  -1222.984642  -1143.875207  #>         23637         19136         19765         22042         18873  #>  -1722.617055  -2261.303133  14720.918322   -336.497597   1801.168801  #>         19928         22478         23450         20441         22540  #>  -5108.134926  -1174.635484   -141.061533  -5461.662836  -1789.286815  #>         20618         19316         20353         19845         21205  #>    903.129799   -555.390564  -8882.725230  -6142.654519  -1550.527706  #>         19859         20591         22968         22184         20426  #>   3395.200782   6812.980690  -1157.993526  -2897.891799   7941.385182  #>         23654         19871         23057         20891         22932  #>   6044.557388  -4490.606783   -477.195853   -644.472932  -3962.087100  #>         20649         23328         21157         20457         19169  #>    366.952392  -1959.282089  -2508.896221  -4036.940024   -856.252645  #>         23576         21825         22360         18652         21962  #>  -3694.421870   2579.697951  -3154.231533  -1014.042905    521.323794  #>         21684         19402         20539         18653         21049  #>    638.606946  -1271.332806   4897.890601  -2559.494363  -2808.769377  #>         19105         21339         19901         23056         23545  #>   -991.950504  -1310.722510  -1676.040538    703.701918   3015.304379  #>         21304         22121         23931         19403         20857  #>    -64.676385   -611.616848  -2455.925759  -1822.576572  -7620.355628  #>         19726         20770         22683         20207         19143  #>   -847.835443   6478.730004   1805.437024  -3863.143911  -1831.740450  #>         18528         18927         21095         18296         18626  #>   2997.952039  -1647.059452   1871.850778  -3147.837432    312.164445  #>         22140         22709         22236         22470         22066  #>  -6037.087425  -6227.959596   -167.790312  -3384.942390  -4823.838120  #>         23160         19035         22812         20993         22912  #>  -3728.568025  -2038.978670 -10167.301359  -2781.421793  -1596.794972  #>         23971         22911         18201         22878         18688  #>  -2490.389111  -4017.417667    -56.796956  -4419.411436  -3335.971291  #>         21121         19706         20386         23896         18687  #>  -1518.093557  -6190.581037   2333.118229  -5360.378943  -1915.461057  #>         23761         18408         19530         19680         20678  #>  -2046.039234  -8868.290632   -821.634963 -10503.318914  -7136.253741  #>         18505         22555         23045         23454         23852  #>  -6382.206308  -5776.956965  -5964.135853   -859.608903  -2420.261623  #>         21837         20480         23448         21920         22754  #>  -7198.923487  -2050.687232  -6585.461715 -11195.978462  -5270.576493  #>         20120         22972         19722         22451         19531  #>  -3307.122800  -7748.399587  -1095.253840  -7440.158414   -760.251533  #>         23991         21023         22857         22590         22513  #>  -2057.203544  -9371.357644  -3467.027840 -10878.637156    184.092171  #>         20275         19585         21612          2127           843  #>  -2810.803035  -9427.145308  -5818.458986   -323.335203  16221.405266  #>          1710          1281          1102          1696          1200  #>  -9291.489067  -8418.932704   4124.305456  14716.891342  -2515.212131  #>          2002          1446          2137          1301          2411  #>   1023.204897  -1461.083253   6936.839943  -1981.930312  -4156.242568  #>          1104          2072          2235          2175          2510  #>  -5117.102907  -3329.584877  -5687.008300   5287.654974   2116.289224  #>          1114          1617          1430          1159          1575  #>   1419.595593  -2924.048865  65186.799666  28258.225973   3561.780506  #>          2022          1240          1768          1254          1510  #>  -3217.282770   5611.833890  -1936.606305  -2022.784755   2256.472279  #>          2246          2036          2104          1115          2321  #>    802.544446   8516.318351   1394.538799  -3655.120204    612.362324  #>          1890          2239          1728          1265          1428  #>  -4438.012505   -473.178039  -5151.701539  -4548.107386   -744.456444  #>          2161          1940          1438          2068          1330  #>   -744.836016  -9797.638368  -7974.512938  -7760.264158  -7408.400179  #>          1522          2517          2343          1271          1238  #>  -7315.967058    715.439593  -2089.350121  -5313.387184  -8326.296323  #>          1400          2232          2214          1563          1079  #>  -4446.466576  -6474.154030  -7147.473904  -2876.884928   2536.230177  #>          2327           806          1992          1553          2305  #>  -5979.078661   1212.655357  -2044.608436   3648.473731   4180.997725  #>           967          2216          1022          1971          2431  #>   3898.599385    325.314380   2741.381313   9492.801696   -830.724960  #>          1369          1307          1506          1455          1581  #>  -4887.772775  -2495.237841    941.931811  -5744.918314   -512.246729  #>          1598          1589          1270          2318          1226  #>    735.844190   7774.958017   1057.713243  -2357.302916    555.734305  #>          1972           903          2391           859          1469  #>   6249.064579  -1703.982545    388.461180  -6325.274900   3518.575809  #>          2003           824          1819          1916          1898  #>  -4012.283469   -553.339583  -1074.441090  -3623.579253   3944.277962  #>          1148          2167          1242          1206          1936  #>   -637.303483   2226.933318   1822.214489    751.985153  -3078.583102  #>          2262          1336          1162          2501          2507  #>  -2819.070030  -2163.673933  -2196.860190  -2508.160811      4.769057  #>          2434          2344          2390          1947          1709  #>   1990.966239  -6369.072503  -5102.743217   8322.500048   2059.182349  #>          1706          1143          1141          1754          1138  #>  -6998.573883    695.232026  11177.641448  -3945.494228   2604.571271  #>          1646          1843          1291          1250          2356  #>  -1138.467355   1499.490390    718.553478  -4723.014926   1817.380783  #>          2301          2460          1144          2477          1878  #>    293.439644  -3643.858625   4201.688678   2958.762771   4003.378004  #>          2043          2306          1930          2331          2264  #>  -5859.541932   2777.002381  -2145.679003  -1475.312151   4843.907377  #>          2187          1033          1567          1376          1039  #>  -1179.146147   4188.798521  -2827.802158   7720.349563   5018.620733  #>           987          1187          1834          2408          2285  #>  -1714.787421   3126.982298  -7669.392052  -2322.240393  -5276.507970  #>          2351          1317          1729           878          1657  #>   7665.459841   2065.918189  -4510.319571  -1054.754528   1968.688761  #>           939          1158          1150           812          1525  #>  -4314.821136  -4354.575691   -695.461010   5013.591026   1514.106625  #>          2174           891          2006          1103          1659  #>   3348.111729   -145.246765   1664.825188  -3248.945142  10007.764822  #>          1486          1602          1462          2265           930  #>  -5165.304447  -4438.494045  -2592.789717    977.481767   3225.090452  #>          1391          1994          2362          1557          1063  #>   2568.799552   3766.708795   7671.568672  -5868.345535  -4001.823320  #>          1632          1619          1278          1808          1726  #>   -162.048168   -661.581190  -1293.096237   -520.474207   -601.497038  #>          2150          1331          2144          1977          1080  #>     43.131096  -4422.851029  -8138.871348   5278.402120  -1062.102852  #>         10177          9814          9972          9967          8819  #>   -107.430639  -7082.366314  -7166.882652  -1526.752515  -1203.007454  #>         11461         11711          8986         11599         10250  #>   1331.968934    819.021138   7426.909835  -2271.231837   2831.950245  #>          9306         11061         11146          9265         11762  #>   5690.508773   5039.778892   1705.004869   2466.915534    307.912368  #>         10020          9362          9930         11243         12167  #>   7038.813880  -6079.255579  -2462.597113   -181.385339    693.242667  #>         10982         11544         11657          9132          9628  #>    110.602776  -7726.449902   2770.353115  -5566.023694  10855.668085  #>         11869         10387         10373          8955         10857  #>   2290.668613   1067.327951  -2664.391055   -661.531046  13765.407563  #>         11320         10178         11928          9237         10444  #>  -2202.132213 -13104.632600  -5121.267581   -490.659259   1162.586117  #>          9685         11596         10697          9809          9525  #>    605.075214   1694.047398  -1819.123191 -12569.830388   6820.143505  #>         12012         11355         10412          9701          9957  #>   8450.425443   6891.798115  -2759.315983   2202.053096    216.510180  #>          9945         10244         10891         10396         10480  #>   -385.439680  54255.493378  16419.266411  27450.780852  15110.147894  #>         10194          8839         11910          9023          9560  #>  21718.717848   1975.451618   3990.340126   2660.305851   8124.573807  #>          9385          9616         11849         11117         11523  #>    478.971308  -1284.755511   -897.361854 -16486.795553   1572.235377  #>          8821          9914         10144          9652         10714  #>  -3389.713204   1715.112857  -9318.688467  -3633.908466 -10799.777159  #>          9444         11089         10741         10034          8923  #>  -6736.380186   2033.827512   -852.512084 -10239.577212  -6977.707908  #>         10180         10656         11803          9354          9098  #>   3634.604504  -6732.654884  -2596.898755   1740.145798  -3622.752316  #>          9155         10551          9821          8933         12046  #> -16512.075273 -14039.046195  -3160.274703    648.858729  -8156.358631  #>          9179         11064          9263         10816         11854  #>   3227.441765  -9009.407317    326.662310  -3861.945959  -6289.478608  #>          9727          9742          9927         10504         12005  #>   2448.110818  -3933.780135   6331.602460    853.854905  -4644.311676  #>         11242         10826         11138         11452         10246  #>  -1382.908724   -377.019791  -4421.391511   2996.005140   4202.083031  #>          9588          8879         10100         10704         10983  #>   1284.914023  -7590.484631   -566.236307  -4212.030912   2019.256262  #>          9365         11344          9310          9710          9050  #>   -269.433464   2846.248288   1069.562580   1729.009896  -1288.898714  #>         10342          9593         10159         11693         10798  #>   2352.187404   1153.619952  10315.076111    319.543454  -1203.756167  #>          9912          9236          8999          9347         11489  #>  -6037.270412  -6767.048585   1598.692296   6513.873545  -5005.100933  #>          8939         10768         11568         11983         11141  #>  -1821.216841   4946.758857   1700.807868  -4106.424954   2043.842892  #>         10426         10574         11270          8945         11057  #>  -1629.268648    920.535681   2602.424260    -79.890244   2286.950313  #>         10460         11993          9948          8962         11241  #>  -1527.272744  -6838.911736  -5045.792786   7901.451766   3071.536957  #>         10275         10678         10613         10732          9953  #>  -3719.132977   4537.959358  -3176.901555  -2569.029194  -1914.710109  #>          9296          9129          8917         10050         11373  #>   2797.943159  -5481.920712   2628.958924   -691.454783   2401.766868  #>         10571         11601          8984          9400         11075  #>    128.933874   1245.664888   2203.455100   -721.348933   -875.293985  #>          9268         10132         10490         10895          9554  #>   -641.165784   4546.752417   -527.717495  -6905.758023    506.692988  #>         10397          9623          9718          9174          9925  #>    839.449136  -1392.231698   1751.652412    960.875959  -1309.121789  #>          9269         11187         11746          9323         10783  #>  -1286.225419  -1752.814848  -1629.035760   1001.740084   5293.328438  #>         10663          9102          9085         11404         12101  #>  -2045.344101  -7236.471069   5226.898925  -1447.305170   1852.355004  #>         10367         10575         10659          9979         10258  #>  -2956.972694   2188.265958  -4945.909889   -766.885325  -2949.511494  #>         11215         11221          9032         11960         11212  #>    116.861801   1126.474237   4071.140073   1319.906378   -973.578174  #>          9576         11499         11000         11391          9559  #>   2480.816121   -521.580274  -8158.488927  -1682.939412   2756.250829  #>          9187          9455         10938          9811         11982  #>   5013.874442   2554.118904    895.280095   2390.387990  -3880.150669  #>         11705         11235         10458         10985         11625  #>  -1309.548694   1220.312181    147.208708   6049.348317  -3161.838892  #>         11441          9071         12182          8820          9311  #>   1529.374538  -1969.167025  -4348.035633   2550.623587   2652.709503  #>         11511         11925         10949          8870          8989  #>  -3944.291801   2698.405906   2817.041764    210.394516    785.630361  #>          8907         11926         10805         11228         11552  #>    919.590459  -1124.658145   -985.519286  -2636.153668  -2639.009856  #>         11988         11924         10845         10221         10164  #>   -516.077602    521.535582   1090.375942   2623.879748  -4018.403118  #>          8990         10438         12177          8898          9956  #>  -2549.615331   2163.136829  -2651.167220   -779.757179  -4540.258948  #>         11119          9259         11385         10472         11115  #>   2821.607036   4438.220052  -3210.027090   1029.375258   2004.903516  #>          9391         10318          9806          9496          9603  #>   5976.591347  -2869.175928  -1080.487357  -2283.984593   -702.974244  #>         11976          9290         10781         11247         11660  #>   3553.672444   3991.166544  -2550.917512   5172.092327   1563.367907  #>         11686         11245         12197          9314          9822  #>  -2580.135210  -1069.931821   1265.806537    557.888142   1897.532353  #>         10818         11673         11600          9539         11312  #>   1611.136285   3145.618985  -3845.720419   2362.967215   -819.194398  #>         10152          9543          9725          9441          8997  #>  -2510.858191  -3210.055906    259.737693   -359.194704  -1306.304631  #>          9470          9599          9332         10716         12038  #>   3216.091740  -2190.736266  -3435.416079   -884.082589  -1612.272117  #>         11121         10384         11033          9653         10266  #>  -2469.948588  -2329.158205   -308.952360  -2693.756066   4246.401712  #>         12054         10173         11459         11745          9621  #>  -1177.152399   6148.929935    816.824773   3607.617867   1177.105192  #>         11400         11724         10990         11464         11533  #>  -2304.002952   6031.986393   2714.367689   5725.552417   1387.797568  #>         11184         10245          8862         10352         12055  #>  -6557.049162   4741.036723   -117.090929    768.701730   4357.968281  #>         11267          9196          9239         12052         10263  #> -20489.235080  -5887.584518   3428.999963   -899.162378   1542.691587  #>          9080         11977          9650         10875          9799  #>  -1979.392440  -3755.847360   1281.179684  -2401.118306   1032.725443  #>          9421          9230         10578          9136          9257  #>    435.086220  -1665.493722  -6353.107382   3001.332977   1671.734523  #>          9991         11820          9776          9304         11760  #>   6420.551351  -2181.730195  -1909.415080   2554.351782   -393.641272  #>         10959         11806         10035          9955         11313  #>  -6188.227490   2455.213781  -1115.584422   5063.576837  -6692.980242  #>         11343          9973         11702         10327         10635  #>  -3487.883222   5904.293622   2010.648931   3153.303636   1534.537636  #>         11832         11594         10370         10603          9475  #>  -2837.228146    283.813009  -8761.253923   -739.839004  -2060.634858  #>         10828         11011          9531         10851          9204  #>    670.595540   3451.438562  -3644.998424   3511.439139   2154.149155  #>         10225         11195         11517         11013          9022  #>  -1139.255386   3355.445183   -452.644517  -1007.482164  -3393.035673  #>          8875         11036          9712         12111         10793  #>  -2404.600559  -1288.119302   -903.081553   6322.421690   4148.915618  #>         11737          9573         10935          9639         11194  #>   -386.384160  -2831.601432    -59.006187  -2739.953277  -2084.285829  #>         10165          9031         11092          9882          9894  #>  -4071.381598   4142.886163  -1794.183533    125.064619   5066.758282  #>         11018         10282         11741         11363         11575  #>  -3557.903839   6135.409986  -4032.297585    393.481949   -979.203713  #>         10273          9772         15687         17545         14717  #>   2005.629123    967.076950  -4716.409694   1905.929312   -197.847317  #>         15060         17725         16189         15752         17687  #>   4112.737335  -3822.719970   2731.080245   2685.714609   4385.742126  #>         14326         15530         15393         16553         18141  #>  -3940.055077   3611.335884   2125.429507  -6254.039207  -6069.654669  #>         17346         16330         17591         16567         16093  #>    789.510213   1172.289520  -1569.740499  -4260.963663   -512.282461  #>         14153         14737         15396         15526         17243  #>   4091.467021   1265.804764   -276.033735   3143.856263   3218.106648  #>         15089         15551         16212         15767         16529  #>  -1359.391802 -10055.340733  -1090.385436  -2281.635560   1803.418780  #>         16406         15430         16153         14782         17551  #>   2637.123649   -210.546334   1479.900831   -293.191077   4384.761925  #>         15569         16666         14279         14838         16030  #>    -23.649594  -3365.656310   1516.688331   1854.501409   4790.576839  #>         17605         17513         16887         14126         17382  #>   -662.577804  -3637.273771  -5021.727515  -1465.649569   3288.945303  #>         15111         15021         17809         16245         16899  #>  -2675.875185  -5134.248534  -3471.344743   2021.049194   5422.274808  #>         17481         17230         15348         18084         16215  #>   1997.250952  -9795.928055   -505.294340  -2472.129704    670.316576  #>         15876         17557         15770         17985         18037  #>  -1565.964737  -1887.537790  10403.647222    924.846273  -8370.424410  #>         17894         17070         16275         17300         16101  #>   -927.052433    323.716749  -1744.838771    415.368558    689.140431  #>         16752         15801         16410         15573         16796  #>   2641.215250  -4568.915567   5353.209239  -2420.306396  -5972.037798  #>         16983         15261         17991         17603         15892  #>   2443.241758    501.297456     94.596321   3780.898439  11022.180719  #>         17778         17363         16356         17960         14550  #>    760.243740  -4150.269181   2496.235550   1814.220030  -5252.914537  #>         17458         17071         14251         14296         17433  #>  -5310.799341   6168.026731   -980.942904  -3261.252590   1327.560216  #>         14463         18023         14212         17879         15595  #>   7925.921590   2247.654048  -3679.701058   6208.500820  -6798.184079  #>         17743         16656         17207         17881         15705  #>   4720.804424  -1450.057543  -2210.308881   -837.017365  -2837.657068  #>         17826         15813         14746         14539         17386  #>   2866.291294    962.833063   3331.034002    694.131474    467.969989  #>         18117         16398         15697         16512         16094  #>  -1643.848921  -5312.164062  -4113.817557   -442.297919    387.447036  #>         16799         16766         15134         17415         14670  #>  -7977.469919   8588.762109   9907.134922   1031.005666  -2043.065295  #>         16949         17804         15367         14571         14118  #>  -4110.584282   1176.552657  -1496.070688  -8195.246151  -3623.580944  #>         17723         17857         16450         16412         16176  #>  -3215.798944  13389.760917   7273.271308  -7749.198414   4012.318465  #>         15839         16283         16542         14294         14761  #>   4158.615030   4136.397122  -1736.727070  -3864.715053   7606.589599  #>         15545         16904         16448         17111         15746  #>  -3287.378099   3858.725355  -2413.780240   3920.293248   8247.127049  #>         16896         15187         17412         17594         17038  #>   3326.255829  -3185.901732   4737.257862   -328.756614    294.733756  #>         16313         18107         15541         15211         16982  #>  -6819.157481   4886.251964  -1234.574788   -656.589940  -3601.572108  #>         16280         15167         16551         16111         17767  #>   -505.159510  -4772.571867  -2328.050171  -5005.790347   6508.558510  #>         16321         14104         14412         14527         17232  #>  -7411.867636  -3348.159492   6875.475531   3207.328818  -2495.356073  #>         16698         15643         17929         16217         15076  #>   6443.741251  -4143.094903  -2039.038598   -132.015021   1940.487465  #>         15219         17720         16106         17099         18073  #>   9709.777376   2137.829978    684.862763   5452.597437  -3975.198674  #>         16365         15164         17287         15181         15868  #>   7349.317618   3791.115888   2621.340371  -4843.247952  -3123.017763  #>         15046         16779         16797         17485         15124  #>   -629.622835   7704.242411   1937.798817   4150.957040   1963.569027  #>         14509         16657         17254         17131         15672  #>  -2489.736919   5515.557337  -1034.068023  -1292.126211  -1432.374834  #>         14894         15065         15910         16371         14702  #>   -603.335196     25.586486    698.446167   -570.460945   -126.646927  #>         15623         17352         14547         15288         18120  #>   -460.201708   2516.115142 -12477.248098   -606.396955 -11461.512273  #>         15378         17127         14768         15954         15271  #>  -6245.042500   2257.602487   3189.125679  -4508.252924  -1460.721780  #>         14866         17209         16080         17941         15395  #>   5400.452418   4910.528236   2629.847028   2286.440409   1284.472214  #>         14956         15009         17827         15809         15090  #>   5256.212599  -4080.787706  -5936.816593   -277.412998  -3194.024912  #>         15237         14295         17241         16304         16487  #>  -5405.611248  -5686.070972   3828.378888  -2375.646264  -2819.745015  #>         17837         14622         17704         17039         16205  #>  -5680.810191   2102.701000   5869.910035    181.891955   2171.521822  #>         16002         17281         17657         17156         17543  #>  -8747.582097    -88.917433  -2490.736834   6033.829345  -4123.721799  #>         17538         17672         14333         16876         17197  #>   4260.659105   1254.562895   5145.596289   3738.519497   -866.487692  #>         16329         14842         15727         16524         16635  #>  -1037.946732   -550.012187  -1441.871450  -2776.911614  -2299.568260  #>         14573         14522         15983         15515         16198  #>   -912.882585    624.915192   4831.573378  -9200.141256  -2604.445395  #>         16174         14798         14677         16823         17866  #>  -4414.687842  -1403.976260   5942.132863   2103.569404   -225.626491  #>         16034         15640         16102         17370         16183  #>   2583.064234   1364.233491  -2955.176661   4924.958343    913.460826  #>         15665         14417         16764         14767         15890  #>   -224.071983  -3707.104322    510.841455  -1961.011865   4008.874562  #>         14282         14394         17549         17921         14735  #>   1896.455747  -2936.755346   -200.750965  -3716.110765  -2831.932121  #>         17912         15554         16496         17624         16862  #>     34.845323  -3681.895380   5944.451706   2496.159611   1210.253907  #>         15282         15928         15511         14432         17527  #>  -1966.546004   2456.171309   -111.438516   2232.279136  -3738.236387  #>         17951         14559         16702         15691         14887  #>  -3527.944650   4610.844353  -4691.354695   4593.403240   -592.862037  #>         17566         17599         16746         17121         16372  #>   6245.241164   4162.475956  -1122.717057  -1000.766736  -3044.459251  #>         16105         15810         16622         15079         16977  #>  -4652.178346  -7748.878722   -508.681780  -4412.827948  -4589.584056  #>         15432         16962         16641         16375         15421  #>   1315.724151    -46.633859   3193.330802  -1277.184921  -1148.230665  #>         15100         16873         17178         17247         18041  #>  -1744.089813  -5627.767026   1975.456477   2966.255538    388.661302  #>         15581         17629         14731         17356         17546  #>  -4011.280766   7745.036057    962.990726   1638.852802  -1055.801350  #>         17421         17635         15295         15674         15109  #>   3855.588981   3792.829350  -4037.510127   3762.837208   3105.367074  #>         17764         14773         15478         14284         16314  #>  54149.246192   2745.323221   5457.143465  27455.577117   1675.770187  #>         16604         14178         16814         15807         14270  #>   1114.913954  -6279.858506  -2441.035321  -6649.016180   9991.001606  #>         15016         17216         18108         14499         14951  #>  -3297.520084   -691.566809  -4592.496194  -4352.126357  -5405.372224  #>         16889         14166         15034         14651         16582  #>   2801.773211  -1915.525142 -10317.070695  -1856.890663  -4177.915716  #>         17777         14812         14910         16022         17153  #>  -8523.146027  -7365.516667   -709.838699  -6615.268893    819.884229  #>         14633         17378         15206         17668         16173  #>   3068.662904   3351.268062   -245.514246  -2043.120772  -7967.368433  #>         15616         14513         17942         14516         17783  #>   -832.040940   3865.003216  -6273.883392   -349.476477   -205.504718  #>         15766         17656         16436         16229         16326  #>   3387.312022   1212.087260   5083.907114  -4250.681553   3800.317141  #>         17604         17418         17797         15897         16433  #>  -4458.580894     38.313881   2746.397642   1745.126305   3990.128826  #>         16562         15180         17745         15977         17148  #>  -2227.663567   -728.270750  -4872.208886    -53.370848  -3264.142218  #>         17899         15014         14836         14387         17313  #>   3135.382916  -5182.129354    305.713154   1809.853525  -6903.851574  #>         15260         14248         16339         16359         15495  #>   4722.133556   2953.133553   2775.346381     99.024707   -906.842654  #>         14156         14526         16624         15960         14456  #>   -557.271326   1786.249670   8367.213607  -1843.922008  -1771.845435  #>         15047         16112         16568         15538         15648  #>  -4120.758140   2047.447304   1095.177504  10141.586358  -5483.694135  #>         17371         17196         14930         14708         17358  #>   -150.261056   3689.458037    396.004433  -2899.830108  -3556.811777  #>         17729         17943         15592         17284         17612  #>  -3048.745303  -2150.549932   -452.232955 -11299.334049  -2676.294127  #>         15591         16926         16488         15520         15695  #>  -4735.405970  19154.569406  -2297.830194  -1021.607945   2318.082853  #>         16906         16133         16680         14854         14198  #>  -3006.745206    920.957777   2069.969753   1351.933305    721.486822  #>         14436         16050         15188         14784         17262  #>  -3977.326935  -3178.158386     -6.536755   4184.126705   3775.495696  #>         15578         17208         14233         18043          8684  #>     98.532892  -1138.237996  -5671.123482    281.445908   5051.762815  #>          8490          8215          8173          8806          8698  #>  -8278.870762   -329.680234   -709.564285  -9494.811082  -1334.031256  #>          7207          7801          7951          7369          7959  #>   3051.232145  10809.790266  -5370.181941   2775.210572   2975.391705  #>          7974          7712          8489          8470          8257  #>    680.627062    271.930612  -3881.311937   2572.791544   2173.969108  #>          8415          8185          7440          7928          8401  #>   1701.123909    749.138958  -5261.189925  59991.191201  38416.830772  #>          8793          7522          7823          7458          8792  #>  26939.507825  18595.958392   3612.296411 -14695.017442  -7390.294025  #>          8182          7506          8172          8305          8241  #>  -1669.327302   5809.435337   5038.081686  -4883.574991  -5656.369641  #>          7762          8383          7659          7860          7937  #>  -1382.584721  -9601.649557  -6088.971374    825.511746   3004.026431  #>          7400          7358          7555          8131          7723  #>  -6628.760601   8026.960913  -8547.629166  -1186.448129  -9045.088522  #>          7175          7693          8283          7282          8585  #>    976.842923   1563.361190  10295.700336  -5852.087059    901.478617  #>          7887          7368          8304          7151          8550  #>  -9003.173290   1342.979450  -3497.984713  -6314.907313  -6925.738059  #>          8743          8442          7415          8484          7608  #> -10034.871085  -4812.015665  -1178.279332  -5324.265751  -4090.589075  #>          8524          7563          8503          7541          7347  #>  -6755.942845  -5061.499160   -828.691140  -2391.773652  -5053.036211  #>          8019          8646          7310          7921          7198  #>   4192.546028   -400.385414  -3973.225932 -10401.469200   6625.820243  #>          7678          8054          7891          7201          8673  #>   7911.384644   6840.210147   4326.913820  -2886.187217  -7121.757189  #>          8030          7319          7834          8269          7656  #>  -1581.384237  -1915.789696  -3623.189369  -1051.868655   3749.883144  #>          7324          8132          8548          8149          8695  #>    265.585978   3946.976453    755.561146  -4392.766501  -5628.876653  #>          7852          7225          7241          8794          7390  #>   2261.927829  -2188.424634    834.177201   6020.353575     68.971486  #>          8779          8418          7278          7374          8116  #>  -3695.871766  -1438.648951   5337.085834   3062.713963  -1788.310897  #>          8668          7254          7618          7213          7917  #>  -1626.866863   -977.083863  15496.042075  -2963.826324  -1108.706164  #>          7750          7216          7696          8652          7565  #>  -3614.140400  -1335.580840  -1482.793771   1322.263499  -5713.827887  #>          8554          8678          7460          8200          7174  #>  -1345.640595  -1240.279627    618.860919   1118.805364  -1000.455723  #>          7370          8008          8660          8628          7579  #>   2289.279363  -1923.198943  -8375.048523   3612.173950  -1344.111839  #>          7551          7397          8535          8113          7614  #>   1892.155211  -2068.592859   -177.611829    641.527055  -2539.340279  #>          8525          8584          7539          7545          8421  #>  -4836.309862   2087.043768   9100.665952   1727.518601   2404.665130  #>          7807          7277          7236          7802          8244  #>   1400.777795   4551.612375  -2503.762487  -2856.723654   1016.783922  #>          7683          8193          8701          7583          7797  #>  -1071.799805   -400.695460  -2489.586246  -1245.169483    736.820682  #>          7217          8370          7493          7900          7716  #>  -2661.712636  -2619.556583    348.165376  -2346.802633    314.355115  #>          7269          8500          8683          7352          7455  #>  -2511.927512   1160.147566  -2634.769079   3187.815685   3299.435852  #>          8015          8349          7816          8092          7463  #>   1291.940806   -882.974837  -6133.809315    693.214349   5595.310991  #>          8192          8296          8681          7387          7655  #>  -4180.612105    815.284971  -1051.638410  -7970.128529   3844.558626  #>          7484          8483          8112          8583          7306  #>   4557.099205    524.126893  -2493.743176   2426.232845  -4540.916001  #>          8186          7361          8188          8776          8765  #>     19.202761   1278.090879   3442.137306    471.411869  -4332.453518  #>          8265          7606         12499         12519         13355  #>    686.273901  -4835.500715  -4388.615377   1282.896804  -3222.092275  #>         13460         12220         13587         12670         14011  #>  -1017.809778    512.802189   6937.817659    107.825203   2159.507909  #>         12498         13400         13730         12435         12271  #>   3343.889605   -771.277930  -2694.984521  -1474.154787    850.245086  #>         12204         13659         13451         13097         13072  #>  -1925.305657  -2129.822929  -2562.204655  15190.724005  11436.166903  #>         13364         12485         14070         12355         13525  #>   9202.135703  -1549.818048   5610.194000  -3966.998453  -4102.393641  #>         13592         12819         12929         13781         13706  #>   9191.147393   3367.551219  -4766.937648  -1028.377925  -4913.203828  #>         13073         12884         14064         13412         13229  #>   1473.474868   2610.102927   -183.571160   2278.497631  12784.257583  #>         12641         13345         12521         13971         13873  #>   4887.447690  -1315.885641   6819.575715  -2574.456272    291.978005  #>         14006         13504         13623         12280         13863  #>  -1709.239062  -2549.910626   -598.809184   -697.980028  -2907.921340  #>         13784         12847         13134         12292         13107  #>  -3937.007368  -2593.647007  -1692.548250  -2137.676312   2405.114928  #>         13663         12541         12544         13972         12323  #>  -4259.597429   -686.964384   4561.189845  -3305.454603  -2948.339632  #>         12506         13802         13657         12676         13026  #>  -1421.436117  -3674.613954   -926.832857  -6024.113880  -2849.082631  #>         12552         14025         12917         13805         12467  #>  -3150.506762  -3453.856272  -8113.041057    -91.847611  -1540.908801  #>         13727         13960         12440         12668         13669  #>    634.619688   6078.542587   2027.924979   1648.358922   -640.908355  #>         12744         13932         13304         12860         13410  #>   5997.637835  -3569.886340  -4170.319655   5259.344733   8441.705617  #>         13740         13829         12566         12226         12903  #>    263.011641  -5750.355588  -2267.539349   5157.386880  -5988.575641  #>         13415         12721         12526         12284         13593  #>   6880.709755   -859.545931  -3266.419725  -3210.058657  -6332.704830  #>         13237         13335         13930         13330         12354  #>  -2624.778674   -740.558787  -3938.003370   1588.568255   1264.663766  #>         13479         13203         13422         13480         12408  #>    275.789882   5795.642271  -2866.905382  -3083.928634   1148.229397  #>         12912         13036         13148         12951         13366  #>  -2088.192334    819.517720  -1277.165967  -3036.778898   7439.938669  #>         13205         14027         13601         12558         12948  #>  -2773.598712   4095.403590  -2414.962859   1628.342781    603.751464  #>         13315         13869         13754         14014         13676  #>   3112.697739 -13000.776891   2799.367198   1853.122916  -1632.594483  #>         13081         13114         12629         13098         13370  #>   -660.543169  -1560.589867  10291.400185   9852.699991  -5066.243799  #>         12701         13874         13913         12883         13538  #>  -4275.049043  -1800.319565  -1536.960657  -3583.791862   1105.542437  #>         12852         13372         12208         13537         13747  #>  -1583.115410   3678.930119  -1159.466541   2153.437648   4956.339810  #>         13417         13096         13895         13003         13691  #>     -4.001086  -6298.100772   3663.988174   1577.621897   3804.667945  #>         12839         13289         13683         13697         12780  #>   -398.931158   1718.400498    288.762614  -1163.673316    118.642539  #>         13405         12334         13236         12245         12438  #>  -6631.697410  -1208.170865   -584.545287  -3755.952612  -7097.380423  #>         14081         13300         13210         12719         12745  #>   7047.473627   1365.245831  -3166.649184  -1409.188062   1609.066126  #>         13214         12770         13862         12812         12663  #>   2701.563546   -626.906564  -4344.792773  -2246.113656  -2993.283729  #>         12980         12889         12484         13590         13047  #>   4936.566084   -485.239815  -2103.136369   4832.806438   1666.138359  #>         13102         12809         13216         12657         13524  #>  -1338.248664   1746.677118  11985.900363   -657.319531  -3547.393267  #>         12873         13981         12601         13542         13644  #>   5888.406857  -8583.749247    625.932097      5.172700   1283.527420  #>         13263         12611         12970         13363         13746  #>   -529.200976    -10.211497  -2365.759381  -3048.486909  -4978.233354  #>         12619         12845         12844         13273         12764  #>   1313.648293  -3732.625922    267.200868   1146.848245  -2772.913803  #>         24339         24478         24485         24843         24682  #>  -2495.655476  -4142.976688  -5738.376982   2758.164995  -3248.507844  #>         24367         24217         24078         24276         24416  #>  -2661.248335  -2122.502911   4856.581768   2648.001918  -1483.561312  #>         24628         24517         24844         24327         24981  #>  -2285.362527  -2972.575304   2589.570659    122.931065   2176.908121  #>         24631         24716         24761         24354         24240  #>   4311.437312   2337.078083   9229.540945  12007.187481  11183.604083  #>         24647         24757         24231         24899         24398  #>   8841.227249   3050.423386  10989.671694  -2702.041915  26821.135028  #>         24248         24274         24528         24812         24257  #>   -370.889817  12871.148494   8460.815420  18485.890573   2331.555063  #>         24636         24880         24114         24876         24765  #>  -3852.057184   2187.927489   -920.801380  -6282.214277  -4211.999432  #>         24611         24376         24629         24476         24709  #> -11863.440428 -12104.229468  -2557.397907    139.261567  -1701.435308  #>         24389         24973         24999         24491         24132  #>   2324.049460  -4210.265419  -6921.692769 -14029.445077 -10217.789169  #>         24686         24352         24034         24625         24130  #>  -2094.335965   -886.823704  -5076.003908  -3579.606623  -5962.506800  #>         24211         24787         24545         24410         24154  #>  -7066.535377  -3954.848477   2976.692114   3852.341648   3500.093546  #>         24298         24856         24346         24074         24355  #>  -4115.457546    561.795886   -390.239920   5158.141090   4547.023825  #>         24914         24887         24770         24309         24035  #>   3057.953475   -627.986105  -1672.938481  -4869.127419   2086.707499  #>         24305         24987         24282         24639         24449  #>   3662.647050  -3250.213454  -3009.385431  -2464.935753   1049.191010  #>         24548         24432         24041         24764         24758  #>  -1644.200620  -4347.927143   -356.851980   -122.936596   -748.119301  #>         24726         24382         24780         24379         24081  #>   1008.531791   3273.362141   7845.846987  -4476.538991   -593.801481  #>         24549         24359         24729         24604         24392  #>   7517.941833  -6624.358791   3559.426790  -3030.454546   4186.543361  #>         24453         24662         24277         24236         24455  #>    109.007740    194.769198  -1980.162316  -2034.805538   6544.884349  #>         24505         24529         24118         24017         24417  #> -10541.120539  -3123.519344    363.038092    855.867029    280.279451  #>         24730         24396         24247         24296         24384  #>   -775.408506   1133.148368  -3971.565223   -231.702796  -3370.304964  sigma(model1) #> [1] 5692.755"},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"function enables use Mixed Effects Random Forests (MERFs) applications Small Area Estimation (SAE). Unit-level survey data target auxiliary covariates required produce reliable estimates various disaggregated economic inequality indicators. Option meanOnly saves computational time users interested estimation domain-specific means using unit-level aggregated auxiliary data. Predefined indicators include mean, median, quantiles (10%, 25%, 75% 90%), head count ratio, poverty gap, Gini-coefficient quintile share ratio. MERF algorithm algorithmic procedure reminiscent EM-algorithm (see Details). Overall, function serves coherent framework estimation point estimates requested uncertainty estimates indicators. Methodological details found Krennmair & Schmid (2022) Krennmair et al. (2022b). following examples showcase potential applications.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"","code":"SAEforest_model(   Y,   X,   dName,   smp_data,   pop_data,   MSE = \"none\",   meanOnly = TRUE,   aggData = FALSE,   smearing = TRUE,   popnsize = NULL,   importance = \"impurity\",   OOsample_obs = 25,   ADDsamp_obs = 0,   w_min = 3,   B = 100,   B_adj = 100,   B_MC = 100,   threshold = NULL,   custom_indicator = NULL,   initialRandomEffects = 0,   ErrorTolerance = 1e-04,   MaxIterations = 25,   na.rm = TRUE,   ... )"},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"Y Continuous input value target variable. X Matrix data.frame predictive covariates. dName Character specifying name domain identifier, random intercepts modeled. smp_data data.frame survey sample data including specified elements Y X. pop_data data.frame unit-level population covariate data X. Please note column names predictive covariates must match column names smp_data. holds especially name domain identifier. MSE Character input specifying type uncertainty estimates. Available options : () \"none\" point estimates requested, (ii) \"nonparametric\" following MSE bootstrap procedure proposed Krennmair & Schmid (2022) Krennmair et al. (2022a) aggData = TRUE. (iii) \"wild\" nonlinear indicators proposed Krennmair et al. (2022b). Defaults \"none\". meanOnly Logical. Calculating domain-level means . Defaults TRUE. aggData Logical input indicating whether aggregated covariate information unit-level covariate information used domain-level means. Defaults FALSE, assuming unit-level covariate data. smearing Logical input indicating whether smearing based approach Monte Carlo (MC) version point estimates obtained estimate (nonlinear) indicators. MC used computational constraints prohibit smearing approach. theoretical details see Krennmair et al (2022b). Defaults TRUE. popnsize data.frame, comprising information population size domains. needed aggData = TRUE MSE requested. Please note name domain identifier must match column name smp_data. importance Variable importance mode processed random forest ranger. Must 'none', 'impurity', 'impurity_corrected' 'permutation'. concept variable importance needed production generic plots plot. estimation domain-level means aggregated covariate  data, variable importance needed rank information process finding suitable calibration weights (Krennmair et al., 2022b). information regarding measures importance see ranger. OOsample_obs Number --sample observations taken closest area potentially unsampled areas. needed aggData = TRUE defaults 25. ADDsamp_obs Number --sample observations taken closest area first iteration calculation calibration weights fails. needed aggData = TRUE defaults 0. w_min Minimal number covariates informative weights calculated. needed aggData = TRUE. Defaults 3. B Number bootstrap replications MSE estimation procedures. Defaults 100. B_adj Number bootstrap replications adjustment residual variance proposed Mendez Lohr (2001). Defaults 100. B_MC Number bootstrap populations MC version point estimates (nonlinear) indicators. Defaults 100. threshold Set custom threshold indicators, head count ratio. threshold can known numeric value function Y. threshold NULL, 60 % median Y taken threshold. Defaults NULL. custom_indicator list additional functions containing indicators calculated. functions must depend target variable Y optionally threshold. Defaults NULL. initialRandomEffects Numeric value vector initial estimates random effects. Defaults 0. ErrorTolerance Numeric value monitor MERF algorithm's convergence. Defaults 1e-04. MaxIterations Numeric value specifying maximal amount iterations MERF algorithm. Defaults 25. na.rm Logical. Whether missing values removed. Defaults TRUE. ... Additional parameters directly passed random forest ranger. important parameters instance mtry (number variables possibly split node), num.trees (number trees). details possible parameters see ranger example .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"object class SAEforest includes point estimates disaggregated indicators well information MERF-model. Optionally corresponding MSE estimates returned. Several generic functions methods returned object class SAEforest. full list explanation components possibilities objects class SAEforest, see SAEforestObject.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"MERFs combine advantages regression forests (implicit model-selection robustness properties) ability model hierarchical dependencies. MERF algorithm iteratively optimizes two separate steps: ) random forest function, assuming random effects term correct b) estimates random effects part, assuming OOB-predictions forest correct. Overall convergence algorithm monitored log-likelihood joint model components. details see Krennmair Schmid (2022). Users interested estimation domain-level means set meanOnly = TRUE. MERF requires covariate micro-data. function, however also allows use aggregated covariate information, setting aggData = TRUE. Aggregated covariate information adaptively incorporated calibration-weights based empirical likelihood estimation area-level means. See methodological details Krennmair et al. (2022a) estimation (nonlinear) poverty indicators /quantiles, need information area-specific cumulative distribution function (CDF) Y. Krennmair et al. (2022b) propose smearing approach originated Duan (1983). Alternatively, Monte-Carlo methods used simulate domain-specific CDF Y. estimation MSE, bootstrap population built based bias-corrected residual variance discussed Krennmair Schmid (2022). bootstrap bias correction follows Mendez Lohr (2011). Note MERFmodel object composition elements random forest class ranger random effects model class merMod. Thus, generic functions applicable corresponding objects. details generic functions see ranger lmer well examples .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"Duan, N. (1983). Smearing Estimate: Nonparametric Retransformation Method. Journal American Statistical Association, 78(383), 605–610. Krennmair, P., & Schmid, T. (2022). Flexible Domain Prediction Using Mixed Effects Random Forests. Journal Royal Statistical Society: Series C (Applied Statistics) (forthcoming). Krennmair, P., & Würz, N. & Schmid, T. (2022a). Analysing Opportunity Cost Care Work using Mixed Effects Random Forests Aggregated Census Data. Krennmair, P., & Schmid, T & Tzavidis, Nikos. (2022b). Estimation Poverty Indicators Using Mixed Effects Random Forests. Working Paper. Mendez, G., & Lohr, S. (2011). Estimating residual variance random forest regression. Computational Statistics & Data Analysis, 55 (11), 2937–2950.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[,-c(1, 16, 17, 18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_pop)  # SAEforest generics: summary(model1) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                        500 #> Number of independent variables:         14 #> Mtry:                                     3 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                     0.62198 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39219.6  39230.7 -19607.8  39215.6     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -3.3523 -0.5307 -0.0675  0.4344 11.8037  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept) 11791861 3434     #>  Residual             30709610 5542     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.277446  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 6 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                                            #>  0 -19541.6 -19582.5 -19591.77 -19602.2 -19606.65 -19607.79  # Example 2: # Calculating point + MSE estimates for aggregated covariate data and passing # arguments to the random forest. # Note that B is unrealistically low to improve example speed  # remove factor for gender X_covar <- X_covar[,-1] model2 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_popAgg,                           MSE = \"nonparametric\", popnsize = popNsize,B = 5, mtry = 5,                           num.trees = 100, aggData = TRUE) #> Calculation of weights failed for area: Eisenstadt (Stadt) #> Calculation of weights failed for area: Melk #> Calculation of weights failed for area: Rust (Stadt) #> Calculation of weights failed for area: Schärding #> Calculation of weights failed for area: Wels (Stadt) #> Calculation of weights failed for area: Wiener Neustadt (Land) #> Calculation of weights failed for area: Wiener Neustadt (Stadt) #> Error SD Bootstrap started: #> Bootstrap with 5 rounds started  # SAEforest generics: summary(model2) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_popAgg, MSE = \"nonparametric\",  #>     aggData = TRUE, popnsize = popNsize, B = 5, mtry = 5, num.trees = 100) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #>  #>                Min. 1st Qu. Median     Mean 3rd Qu. Max. #> Sample_domains   14      17   22.5 27.78571      29  200 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                        100 #> Number of independent variables:         13 #> Mtry:                                     5 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                     0.65177 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39148.9  39160.0 -19572.4  39144.9     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -4.7829 -0.4878 -0.0268  0.4379 12.0240  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept) 10717335 3274     #>  Residual             29671543 5447     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.2653536  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 12 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                                                         #>  0 -19538.21 -19531.94 -19556.38 -19536.54 -19576.97 -19552.31 -19562.71 #>                                                   #>  -19540.03 -19576.7 -19560.92 -19572.04 -19572.43 summarize_indicators(model2, MSE = TRUE, CV = TRUE) #> Warning: For objects of class SAEforest_mean or SAEforest_meanAGG, only results for the Indicator \"Mean\" are reported #> Indicator/s: Mean #>                         district      Mean    Mean_MSE    Mean_CV #> 1                      Amstetten 13997.762   631202.88 0.05675784 #> 2                          Baden 22162.265   490291.92 0.03159463 #> 3                        Bludenz 11677.357  1056903.33 0.08803859 #> 4                 Braunau am Inn 12423.022   842020.28 0.07386420 #> 5                        Bregenz 33773.405  8409482.08 0.08586373 #> 6            Bruck an der Leitha 22895.683  2032573.53 0.06226866 #> 7             Bruck-Mürzzuschlag 24629.872  1051632.73 0.04163609 #> 8               Deutschlandsberg 24060.313  3802531.13 0.08104666 #> 9                       Dornbirn 19167.423   517227.63 0.03752124 #> 10                      Eferding 13371.059 24010908.82 0.36647005 #> 11            Eisenstadt (Stadt) 29420.214  3451146.07 0.06314455 #> 12           Eisenstadt-Umgebung 22324.019 31753125.26 0.25241830 #> 13                     Feldkirch 17060.223  1090901.71 0.06122208 #> 14                   Feldkirchen 13491.680 21368271.06 0.34262468 #> 15                     Freistadt 16608.113  3248401.15 0.10852119 #> 16                       Gmunden 19195.521   464940.44 0.03552211 #> 17                         Gmünd 12935.088  2456657.34 0.12117217 #> 18                  Graz (Stadt) 17817.706   174460.13 0.02344209 #> 19                 Graz-Umgebung 35375.391   745359.63 0.02440516 #> 20                  Grieskirchen 15467.390  4232439.07 0.13300817 #> 21                   Gänserndorf 20151.203   432256.88 0.03262646 #> 22                       Güssing 17700.105  5010228.92 0.12645993 #> 23                       Hallein 17402.414  2118915.80 0.08364642 #> 24          Hartberg-Fürstenfeld 12204.906  2972994.99 0.14127413 #> 25                      Hermagor 11656.595 29216594.47 0.46370640 #> 26                    Hollabrunn 16358.021  1951983.03 0.08540971 #> 27                          Horn 12932.864 14540475.43 0.29484557 #> 28                          Imst 13884.109  1094959.82 0.07536698 #> 29              Innsbruck (Land) 27246.690  1862052.20 0.05008206 #> 30             Innsbruck (Stadt) 17242.950    88232.59 0.01722673 #> 31                   Jennersdorf 11760.991 12238924.83 0.29745940 #> 32        Kirchdorf an der Krems 17297.405  2727831.07 0.09548338 #> 33                     Kitzbühel 14207.121  3715920.67 0.13568353 #> 34             Klagenfurt (Land) 21952.348  1308628.80 0.05211074 #> 35            Klagenfurt (Stadt) 33176.624  2829225.64 0.05069926 #> 36                    Korneuburg 25479.452  1484348.36 0.04781650 #> 37                  Krems (Land) 15034.821  7580618.37 0.18312770 #> 38    Krems an der Donau (Stadt) 17856.312 43042153.55 0.36741359 #> 39                      Kufstein 19363.871  1777076.41 0.06884317 #> 40                       Landeck 12579.063  2760737.50 0.13208828 #> 41                      Leibnitz 15246.611   919661.88 0.06289857 #> 42                        Leoben 18844.759   219285.45 0.02484931 #> 43                         Lienz 11412.926   788991.29 0.07782858 #> 44                        Liezen 12287.276  1035945.38 0.08283480 #> 45                    Lilienfeld 12563.872  5792790.00 0.19156687 #> 46                  Linz (Stadt) 22170.808   153034.11 0.01764463 #> 47                     Linz-Land 26763.462   458132.96 0.02529027 #> 48                   Mattersburg 19603.512  4236112.78 0.10499047 #> 49                          Melk 12722.652   516932.06 0.05651179 #> 50                    Mistelbach 19876.821   683190.55 0.04158378 #> 51                         Murau 11407.739  4211972.84 0.17990499 #> 52                        Murtal 19103.299  3492890.89 0.09783272 #> 53                       Mödling 41652.793   779930.89 0.02120235 #> 54                   Neunkirchen 15331.582   914293.78 0.06236715 #> 55               Neusiedl am See 18417.721   435884.66 0.03584676 #> 56                Oberpullendorf 16376.261  4124680.54 0.12401677 #> 57                      Oberwart 12214.352   869931.62 0.07636109 #> 58                          Perg 19199.692  1852429.11 0.07088862 #> 59                        Reutte 18147.344  1248837.42 0.06158003 #> 60              Ried im Innkreis 13761.658  1734618.00 0.09570424 #> 61                      Rohrbach 13138.154   645194.74 0.06113798 #> 62                  Rust (Stadt) 15518.142 16150503.59 0.25897230 #> 63              Salzburg (Stadt) 20048.832   626255.45 0.03947178 #> 64             Salzburg-Umgebung 29137.707   786820.93 0.03044266 #> 65        Sankt Johann im Pongau 13101.953  4231289.19 0.15700025 #> 66           Sankt Pölten (Land) 17067.749   724805.59 0.04988093 #> 67          Sankt Pölten (Stadt) 16929.463  2953181.46 0.10150837 #> 68        Sankt Veit an der Glan 14531.231  1945743.20 0.09599317 #> 69                      Scheibbs 12765.646  9525935.37 0.24177479 #> 70                        Schwaz 15358.964   446191.59 0.04349094 #> 71                     Schärding 10655.602  1067583.00 0.09696675 #> 72           Spittal an der Drau 13091.560   694960.19 0.06367788 #> 73                 Steyr (Stadt) 19493.917 20630209.31 0.23299827 #> 74                    Steyr-Land 25149.629  1991828.32 0.05611699 #> 75              Südoststeiermark 13664.995  3205252.69 0.13101520 #> 76                       Tamsweg 16527.345  6574624.04 0.15514306 #> 77                         Tulln 21048.784   420466.43 0.03080624 #> 78               Urfahr-Umgebung 41276.636   672179.83 0.01986271 #> 79               Villach (Stadt) 20454.420  2156964.31 0.07180163 #> 80                  Villach Land 18757.257 11864848.55 0.18363767 #> 81                     Voitsberg 17516.225  3664840.44 0.10929166 #> 82                   Vöcklabruck 18310.683   522842.02 0.03948941 #> 83                   Völkermarkt 15009.718  2150264.23 0.09769523 #> 84        Waidhofen an der Thaya 11312.673 10121317.41 0.28122460 #> 85 Waidhofen an der Ybbs (Stadt) 16425.691  4170511.35 0.12432859 #> 86                          Weiz 15433.574  1032436.45 0.06583626 #> 87                  Wels (Stadt) 13829.543   766773.37 0.06331778 #> 88                     Wels-Land 19759.719  2039029.47 0.07226550 #> 89                          Wien 20856.445   491955.77 0.03362968 #> 90        Wiener Neustadt (Land) 20760.544   425631.40 0.03142520 #> 91       Wiener Neustadt (Stadt) 13890.256  3691959.08 0.13833058 #> 92                     Wolfsberg 16699.548  2633072.68 0.09716877 #> 93                   Zell am See  9810.445  1039496.04 0.10392564 #> 94                        Zwettl 11007.070 24630683.52 0.45088576  # Example 3: # Calculating point + MSE estimates and passing arguments to the forest. # Two additional custom indicators and the threshold is defined as a custom function of Y. # Note that B is unrealistically low to improve example speed.  model3 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\", smp_data = eusilcA_smp,                           pop_data = eusilcA_pop, meanOnly = FALSE, MSE = \"nonparametric\",                           B = 5, mtry = 5, num.trees = 100, threshold = function(Y){0.5 *                           median(Y)}, custom_indicator = list(my_max = function(Y,                           threshold){max(Y)}, mean40 = function(Y, threshold){                           mean(Y[Y<=quantile(Y,0.4)])}), smearing = FALSE) #> Error SD Bootstrap started: #> MSE Bootstrap with 5 rounds started:  # SAEforest generics: summary(model3) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop, MSE = \"nonparametric\",  #>     meanOnly = FALSE, smearing = FALSE, B = 5, threshold = function(Y) { #>         0.5 * median(Y) #>     }, custom_indicator = list(my_max = function(Y, threshold) { #>         max(Y) #>     }, mean40 = function(Y, threshold) { #>         mean(Y[Y <= quantile(Y, 0.4)]) #>     }), mtry = 5, num.trees = 100) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                        100 #> Number of independent variables:         13 #> Mtry:                                     5 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                     0.66844 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39083.5  39094.6 -19539.7  39079.5     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -4.0682 -0.5170 -0.0513  0.4268 12.1747  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept)  7689148 2773     #>  Residual             28970242 5382     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.2097457  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 4 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                           #>  0 -19519.14 -19541.96 -19537.78 -19539.73 summarize_indicators(model3, MSE = FALSE, CV = TRUE, indicator = c(\"Gini\", \"my_max\", \"mean40\")) #> Indicator/s: Gini #>  Indicator/s: my_max #>  Indicator/s: mean40 #>                         district      Gini    Gini_CV    my_max my_max_CV #> 1                      Amstetten 0.2496166 0.06139391  53367.94 0.5124650 #> 2                          Baden 0.1821222 0.07004379  69365.94 0.3929977 #> 3                        Bludenz 0.2836343 0.10597374  45119.26 0.2913200 #> 4                 Braunau am Inn 0.2769782 0.07798593  53789.77 0.5638769 #> 5                        Bregenz 0.1623321 0.07778439  82887.97 0.1120534 #> 6            Bruck an der Leitha 0.1786187 0.07669723  69086.14 0.1365179 #> 7             Bruck-Mürzzuschlag 0.1668700 0.09485270  71669.91 0.2235948 #> 8               Deutschlandsberg 0.1897958 0.08023022  57235.93 0.1824685 #> 9                       Dornbirn 0.2181016 0.06908320  56893.75 0.3678049 #> 10                      Eferding 0.2345167 0.18489711  42421.92 0.6557794 #> 11            Eisenstadt (Stadt) 0.1910494 0.17611874  68312.35 0.1181623 #> 12           Eisenstadt-Umgebung 0.2009430 0.12954595  58555.45 0.1984942 #> 13                     Feldkirch 0.2317475 0.10229294  59428.59 0.3881409 #> 14                   Feldkirchen 0.2446526 0.18556621  40754.56 0.2536565 #> 15                     Freistadt 0.2154424 0.12854458  53101.29 0.4965489 #> 16                       Gmunden 0.1999884 0.09455086  61906.52 0.2955842 #> 17                         Gmünd 0.2561330 0.29310131  39789.79 0.5867452 #> 18                  Graz (Stadt) 0.2176966 0.06736820  76946.33 0.1984235 #> 19                 Graz-Umgebung 0.1861077 0.16841540  95132.01 0.2606042 #> 20                  Grieskirchen 0.2167425 0.10161904  52493.09 0.2587489 #> 21                   Gänserndorf 0.1995323 0.10132979  61202.70 0.4011403 #> 22                       Güssing 0.2331344 0.08623459  42441.73 0.3973735 #> 23                       Hallein 0.2258108 0.12961906  51111.93 0.3519029 #> 24          Hartberg-Fürstenfeld 0.2645503 0.07211716  55098.67 0.3520621 #> 25                      Hermagor 0.2523298 0.16283129  33864.60 0.7615479 #> 26                    Hollabrunn 0.2223246 0.11138456  48751.66 0.4628220 #> 27                          Horn 0.2338976 0.19230341  43554.09 0.3160812 #> 28                          Imst 0.2377699 0.08142345  46086.11 0.2619329 #> 29              Innsbruck (Land) 0.2040890 0.08602366  77048.75 0.1486210 #> 30             Innsbruck (Stadt) 0.2065810 0.10692276  60773.36 0.4932663 #> 31                   Jennersdorf 0.2494483 0.17889506  34599.53 0.1609961 #> 32        Kirchdorf an der Krems 0.2325506 0.09950261  50549.39 0.5055384 #> 33                     Kitzbühel 0.2505483 0.11280844  45226.13 0.4784815 #> 34             Klagenfurt (Land) 0.1825540 0.08386088  57705.76 0.3781472 #> 35            Klagenfurt (Stadt) 0.1639245 0.06938104  81294.83 0.3479100 #> 36                    Korneuburg 0.1603203 0.08917155  63771.42 0.3168946 #> 37                  Krems (Land) 0.2391255 0.08436111  50278.43 0.2209006 #> 38    Krems an der Donau (Stadt) 0.2199381 0.11800657  40318.15 0.3457054 #> 39                      Kufstein 0.1847680 0.07407301  58083.20 0.2491800 #> 40                       Landeck 0.2615573 0.07132085  38413.82 0.7690219 #> 41                      Leibnitz 0.2315831 0.11104392  53370.41 0.4808914 #> 42                        Leoben 0.1927015 0.12717968  58604.30 0.2134696 #> 43                         Lienz 0.2608947 0.12025133  45782.32 0.4455413 #> 44                        Liezen 0.2734132 0.13385868  53213.01 0.4873165 #> 45                    Lilienfeld 0.2443897 0.19718093  42680.27 0.7047444 #> 46                  Linz (Stadt) 0.1866490 0.07613662  76815.99 0.1997204 #> 47                     Linz-Land 0.1685493 0.04476869  77998.89 0.2628937 #> 48                   Mattersburg 0.2068680 0.18340054  52645.18 0.2048766 #> 49                          Melk 0.2735880 0.08773104  48230.46 0.2642358 #> 50                    Mistelbach 0.2036992 0.12599481  60321.48 0.1358387 #> 51                         Murau 0.2529370 0.14983048  35311.93 0.3188117 #> 52                        Murtal 0.2150873 0.07773061  53926.56 0.4617912 #> 53                       Mödling 0.1496726 0.19444333  87746.94 0.1476431 #> 54                   Neunkirchen 0.2167925 0.13399309  56766.39 0.3887731 #> 55               Neusiedl am See 0.2056638 0.09013821  54394.24 0.2373192 #> 56                Oberpullendorf 0.2331675 0.21982944  46670.48 0.5692763 #> 57                      Oberwart 0.2583104 0.14040406  47608.62 0.5629113 #> 58                          Perg 0.2127375 0.09274623  53158.31 0.1649124 #> 59                        Reutte 0.1984683 0.10557539  43351.78 0.2284484 #> 60              Ried im Innkreis 0.2474063 0.12518031  50045.91 0.3044791 #> 61                      Rohrbach 0.2188741 0.12589123  48102.63 0.2523869 #> 62                  Rust (Stadt) 0.2697352 0.18642302  23357.17 0.1908323 #> 63              Salzburg (Stadt) 0.1932685 0.07948163  68674.85 0.1591554 #> 64             Salzburg-Umgebung 0.1679929 0.09598427  89310.34 0.1694144 #> 65        Sankt Johann im Pongau 0.2453427 0.09941047  53633.28 0.2670028 #> 66           Sankt Pölten (Land) 0.2298954 0.08762768  62305.47 0.2294852 #> 67          Sankt Pölten (Stadt) 0.2221361 0.16899913  49775.06 0.5028214 #> 68        Sankt Veit an der Glan 0.2455244 0.10072608  51492.05 0.3967974 #> 69                      Scheibbs 0.2480215 0.19712089  42353.38 0.3760305 #> 70                        Schwaz 0.2298244 0.15086416  52413.72 0.2150530 #> 71                     Schärding 0.3029931 0.08659790  43510.19 0.3755736 #> 72           Spittal an der Drau 0.2589875 0.07263732  58545.46 0.2843762 #> 73                 Steyr (Stadt) 0.2144196 0.28573383  47224.17 0.5252292 #> 74                    Steyr-Land 0.1730117 0.09023882  57873.40 0.4890363 #> 75              Südoststeiermark 0.2509470 0.06872722  55264.52 0.4612891 #> 76                       Tamsweg 0.2162900 0.10130196  40879.56 0.1156401 #> 77                         Tulln 0.2054317 0.08278396  61652.68 0.1982365 #> 78               Urfahr-Umgebung 0.1443740 0.15581748  89357.50 0.1001912 #> 79               Villach (Stadt) 0.1941162 0.11158736  60944.94 0.1558012 #> 80                  Villach Land 0.2069803 0.07776880  56018.43 0.2372981 #> 81                     Voitsberg 0.2100369 0.12259307  48686.29 0.5232139 #> 82                   Vöcklabruck 0.2111293 0.05842563  63596.83 0.2556668 #> 83                   Völkermarkt 0.2349521 0.10301081  47016.00 0.2725515 #> 84        Waidhofen an der Thaya 0.2660027 0.15929675  35849.69 0.1811430 #> 85 Waidhofen an der Ybbs (Stadt) 0.2109265 0.26315102  35962.63 0.1605012 #> 86                          Weiz 0.2452848 0.08436544  51603.52 0.3177342 #> 87                  Wels (Stadt) 0.2408120 0.09499697  47470.60 0.2739218 #> 88                     Wels-Land 0.2001741 0.08472676  59415.56 0.2160322 #> 89                          Wien 0.2447866 0.05381822 109676.70 0.2103532 #> 90        Wiener Neustadt (Land) 0.2057335 0.09337493  57415.41 0.2618388 #> 91       Wiener Neustadt (Stadt) 0.2105591 0.09349449  45909.63 0.2722959 #> 92                     Wolfsberg 0.2332638 0.09679308  50785.10 0.2186416 #> 93                   Zell am See 0.2933377 0.02306185  45910.49 0.3219887 #> 94                        Zwettl 0.2677241 0.11152893  45474.82 0.5364367 #>       mean40  mean40_CV #> 1   8104.170 0.02902325 #> 2  15735.431 0.02839009 #> 3   6234.411 0.22953106 #> 4   6253.489 0.25399596 #> 5  23840.219 0.03849579 #> 6  16660.491 0.03372998 #> 7  17345.005 0.09502401 #> 8  14506.407 0.11582412 #> 9  12450.326 0.09412046 #> 10  9565.550 0.35804410 #> 11 27297.832 0.30017683 #> 12 17758.733 0.20886305 #> 13 10075.268 0.13719385 #> 14  8402.480 0.27306219 #> 15 10754.675 0.10974376 #> 16 13368.639 0.04987205 #> 17  7485.412 0.85402883 #> 18 11365.140 0.05354266 #> 19 24264.907 0.05996671 #> 20 10584.374 0.08537967 #> 21 13424.339 0.10829529 #> 22 10275.955 0.14684277 #> 23 10024.918 0.10733773 #> 24  7309.488 0.15066485 #> 25  7087.851 0.31167004 #> 26 10231.910 0.09760702 #> 27  9405.537 0.44537825 #> 28  8610.950 0.15825954 #> 29 17869.057 0.05511827 #> 30 11623.388 0.07832363 #> 31  7667.007 0.23136868 #> 32 10030.946 0.12467688 #> 33  7138.563 0.10963907 #> 34 15789.840 0.09034039 #> 35 24134.944 0.05707198 #> 36 20230.548 0.06131129 #> 37  9220.980 0.12094249 #> 38 10874.673 0.11124036 #> 39 14157.177 0.05572605 #> 40  6690.407 0.22772454 #> 41  9564.511 0.08729996 #> 42 13783.134 0.10627174 #> 43  7211.216 0.14491196 #> 44  6485.282 0.23510147 #> 45  8939.741 0.48175894 #> 46 15460.731 0.06819121 #> 47 19818.833 0.03775992 #> 48 14359.113 0.36398719 #> 49  6209.175 0.11881243 #> 50 13183.924 0.07627689 #> 51  7260.136 0.21362813 #> 52 12128.811 0.12253665 #> 53 30477.641 0.04364185 #> 54 10333.526 0.14205719 #> 55 12630.609 0.06372049 #> 56 10385.815 0.41585492 #> 57  7387.320 0.22284874 #> 58 11466.888 0.14186941 #> 59 12948.996 0.13908392 #> 60  8129.388 0.25564883 #> 61  9546.130 0.12819871 #> 62  6752.316 0.21863140 #> 63 13423.428 0.05639137 #> 64 22100.403 0.04523701 #> 65  8542.659 0.13930779 #> 66 10368.832 0.06807740 #> 67 10210.859 0.17509699 #> 68  8725.549 0.13554502 #> 69  7794.362 0.21527478 #> 70  9618.193 0.09631738 #> 71  4738.325 0.29389391 #> 72  7703.324 0.09920418 #> 73 12093.106 0.43165920 #> 74 17657.622 0.09946456 #> 75  7923.985 0.21775466 #> 76 10633.185 0.12228878 #> 77 13220.184 0.07271324 #> 78 32063.473 0.05584124 #> 79 15122.046 0.09816730 #> 80 12793.717 0.04483305 #> 81 11390.310 0.15038505 #> 82 11800.726 0.06066700 #> 83  9235.364 0.13208011 #> 84  6855.515 0.33219771 #> 85 11547.659 0.45972960 #> 86  8482.244 0.08870874 #> 87  8464.953 0.09782143 #> 88 13509.826 0.08020484 #> 89 12093.349 0.02981109 #> 90 12484.619 0.08173127 #> 91 11126.650 0.11644553 #> 92 10536.540 0.09727307 #> 93  4909.782 0.13866430 #> 94  7230.085 0.23743497 # }"},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_pop.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated EU-SILC data - population data — eusilcA_pop","title":"Simulated EU-SILC data - population data — eusilcA_pop","text":"data set includes synthetic EU-SILC data taken package emdi. Originally, data builds eusilcP package simFrame reduced 17 variables containing regional variables states districts.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated EU-SILC data - population data — eusilcA_pop","text":"","code":"eusilcA_pop"},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_pop.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated EU-SILC data - population data — eusilcA_pop","text":"data frame 25000 observations 17 variables: eqIncome numeric; simplified version equivalized household income. eqsize numeric; equivalized household size according modified OECD scale. gender factor; person's gender (levels: male female). cash numeric; employee cash near cash income (net). self_empl numeric; cash benefits losses self-employment (net). unempl_ben numeric; unemployment benefits (net). age_ben numeric; old-age benefits (net). surv_ben numeric; survivor's benefits (net). sick_ben numeric; sickness benefits (net). dis_ben numeric; disability benefits (net). rent numeric; income rental property land (net). fam_allow numeric; family/children related allowances (net). house_allow numeric; housing allowances (net). cap_inv numeric; interest, dividends, profit capital investments  unincorporated business (net). tax_adj numeric; repayments/receipts tax adjustment (net). state factor; state (nine levels). district factor; districts (94 levels).","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_popAgg.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated EU-SILC data - aggregated population data — eusilcA_popAgg","title":"Simulated EU-SILC data - aggregated population data — eusilcA_popAgg","text":"data set includes synthetic EU-SILC data taken package emdi. Originally, data builds eusilcP package simFrame reduced 15 variables including district identifiers well aggregated household level covariates. Therefore, except variables ratio_n district, variables mean values per district.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_popAgg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated EU-SILC data - aggregated population data — eusilcA_popAgg","text":"","code":"eusilcA_popAgg"},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_popAgg.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated EU-SILC data - aggregated population data — eusilcA_popAgg","text":"data frame 94 observations 15 variables: eqsize numeric; equivalized household size according modified OECD scale. cash numeric; employee cash near cash income (net). self_empl numeric; cash benefits losses self-employment (net). unempl_ben numeric; unemployment benefits (net). age_ben numeric; old-age benefits (net). surv_ben numeric; survivor's benefits (net). sick_ben numeric; sickness benefits (net). dis_ben numeric; disability benefits (net). rent numeric; income rental property land (net). fam_allow numeric; family/children related allowances (net). house_allow numeric; housing allowances (net). cap_inv numeric; interest, dividends, profit capital investments  unincorporated business (net). tax_adj numeric; repayments/receipts tax adjustment (net). ratio_n numeric; ratios population size per area total population size. district factor; Austrian districts (94 levels).","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_smp.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated EU-SILC data - survey sample data — eusilcA_smp","title":"Simulated EU-SILC data - survey sample data — eusilcA_smp","text":"data set includes synthetic EU-SILC data taken package emdi. Originally, data builds eusilcP package simFrame reduced 18 variables containing regional variables states districts.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_smp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated EU-SILC data - survey sample data — eusilcA_smp","text":"","code":"eusilcA_smp"},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_smp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated EU-SILC data - survey sample data — eusilcA_smp","text":"data frame 1945 observations 18 variables: eqIncome numeric; simplified version equivalized household income. eqsize numeric; equivalized household size according modified OECD scale. gender factor; person's gender (levels: male female). cash numeric; employee cash near cash income (net). self_empl numeric; cash benefits losses self-employment (net). unempl_ben numeric; unemployment benefits (net). age_ben numeric; old-age benefits (net). surv_ben numeric; survivor's benefits (net). sick_ben numeric; sickness benefits (net). dis_ben numeric; disability benefits (net). rent numeric; income rental property land (net). fam_allow numeric; family/children related allowances (net). house_allow numeric; housing allowances (net). cap_inv numeric; interest, dividends, profit capital investments  unincorporated business (net). tax_adj numeric; repayments/receipts tax adjustment (net). state factor; state (nine levels). district factor; districts (94 levels). weight numeric; constant weight.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/load_shapeaustria.html","id":null,"dir":"Reference","previous_headings":"","what":"Loading the shape file for Austrian districts — load_shapeaustria","title":"Loading the shape file for Austrian districts — load_shapeaustria","text":"function simplifies loading shape file Austrian districts. originally used examples package emdi.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/load_shapeaustria.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loading the shape file for Austrian districts — load_shapeaustria","text":"","code":"load_shapeaustria()"},{"path":"https://krennpa.github.io/SAEforest/reference/load_shapeaustria.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loading the shape file for Austrian districts — load_shapeaustria","text":"shape file class SpatialPolygonsDataFrame.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/load_shapeaustria.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Loading the shape file for Austrian districts — load_shapeaustria","text":"shape file contains borders 94 Austrian districts. main purpose function visualization estimation results plotting function map_indicators.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualizes disaggregated estimates on a map — map_indicators","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"Function map_indicators visualizes estimates SAEforestObject specified map. function can seen modified wrapper map_plot package emdi.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"","code":"map_indicators(   object,   indicator = \"all\",   MSE = FALSE,   CV = FALSE,   map_obj = NULL,   map_dom_id = NULL,   map_tab = NULL,   color = c(\"white\", \"darkgreen\"),   scale_points = NULL,   guide = \"colourbar\",   return_data = FALSE,   return_plot = FALSE,   gg_theme = theme_minimal() )"},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"object object class SAEforest, containing estimates visualized. indicator Optional character vector specifying indicators mapped: () calculated indicators (\"\"); (ii) default indicators name: \"Mean\", \"Quant10\", \"Quant25\", \"Median\", \"Quant75\", \"Quant90\", \"Gini\", \"Hcr\", \"Pgap\", \"Qsr\" function name/s \"custom_indicator/s\"; (iii) vector names indicators. object estimated option meanOnly = TRUE, indicator arguments ignored \"Mean\" visualized. MSE Logical. TRUE, MSE also visualized. Defaults FALSE. CV Logical. TRUE, CV also visualized. Defaults FALSE. map_obj SpatialPolygonsDataFrame object defined sp package data visualized. map_dom_id Character string containing name variable map_obj indicates domains. map_tab data.frame object two columns matches domain variable population data set (first column) domain variable map_obj (second column). used domain-level identifiers different objects. color vector length 2 defining lowest highest color map. scale_points structure defining lowest, mid highest value colorscale. numeric vector length two given, scale used every plot. Alternatively, list defining colors plot separately may given. guide Character passed scale_colour_gradient ggplot2. Possible values \"none\", \"colourbar\", \"legend\". return_data set TRUE, fortified data frame including map data well chosen indicators returned. Customized maps can easily obtained data frame via package ggplot2. Defaults FALSE. return_plot set TRUE, list individual plots produced ggplot2 returned individual customization processing. gg_theme Specify predefined theme ggplot2. Defaults theme_minimal.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"Creates required plots selected, fortified data.frame list plots.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_pop,                           num.trees = 50)  # Load shape file load_shapeaustria()  # Create map plot for mean indicator - point and MSE estimates but no CV  map_indicators(object = model1, MSE = FALSE, CV = FALSE, map_obj = shape_austria_dis,                indicator = c(\"Mean\"), map_dom_id = \"PB\") #> Warning: For objects of class SAEforest_mean or SAEforest_meanAGG, only results for the Indicator \"Mean\" are reported   # Create a suitable mapping table to use numerical identifiers of the shape # file  # First find the right order dom_ord <- match(shape_austria_dis@data$PB, model1$Indicators$district)  # Create the mapping table based on the order obtained above map_tab <- data.frame(pop_data_id = model1$Indicators$district[dom_ord],                       shape_id = shape_austria_dis@data$BKZ)  # Create map plot for mean indicator - using the numerical domain # identifiers of the shape file. Additionally save the figure in as a list element.  map_obj <- map_indicators(object = model1, MSE = FALSE, CV = FALSE,                           map_obj = shape_austria_dis, indicator = c(\"Mean\"),                           map_dom_id = \"BKZ\", map_tab = map_tab, return_plot = TRUE) #> Warning: For objects of class SAEforest_mean or SAEforest_meanAGG, only results for the Indicator \"Mean\" are reported  # }"},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for a 'SAEforest' object — plot.SAEforest","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"Plots model-specific characteristics fixed effects random forest component MERF SAEforestObject. variable importance plot produced visualize importance individual covariates predictive performance model. variable importance plot, arguments passed internally function vip. requested, plot function additionally provides partial dependence plot (pdp) visualize impact given number influential covariates target variable. pdp plot produced using partial package pdp. plot-engine plots ggplot2.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"","code":"# S3 method for SAEforest plot(   x,   num_features = 6,   col = \"darkgreen\",   fill = \"darkgreen\",   alpha = 0.8,   include_type = TRUE,   horizontal = TRUE,   gg_theme = theme_minimal(),   lsize = 1.5,   lty = \"solid\",   grid_row = 2,   out_list = FALSE,   pdp_plot = TRUE,   ... )"},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"x object class SAEforest including random forest model class ranger. num_features Number features partial dependence plot required. col Parameter specifying color selected plots. argument must specified can processed aes. Defaults character name color \"darkgreen\". fill Parameter specifying fill selected plots. argument must specified can processed aes. Defaults character name color \"darkgreen\". alpha Parameter specifying transparency fill vip plots. argument must number [0,1]. include_type Logical. set TRUE, type importance specified fitting process model included vip plot. Defaults TRUE. horizontal Logical. set TRUE, importance scores appear x-axis. parameter set FALSE, importance scores plot y-axis. Defaults TRUE. gg_theme Specify predefined theme ggplot2. Defaults theme_minimal. lsize Parameter specifying line size pdp plots. argument must specified can processed aes. Defaults 1.5. lty Parameter specifying line size pdp plots. argument must specified can processed aes. Defaults \"solid\". grid_row Parameter specifying amount rows joint pdp plot. Defaults 2. out_list Logical. set TRUE, list individual plots produced ggplot2 returned individual customization processing. Defaults FALSE. pdp_plot Logical. set TRUE, partial dependence plots produced partial package pdp included. Defaults TRUE. ... Optional additional inputs ignored method.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"Plots variable importance /partial dependence covariates ranked corresponding importance. Additionally, list individual plots can returned facilitating individual customization exporting. See following examples details.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"production importance plots, sure specify parameter importance != 'none' producing estimates function SAEforest_model. pdp plots, note covariates type factor character used partial dependence plots. Dummy-variables can used, however, pdp plots always lines connecting two effect points 0 1. informative pdp plots can produced continuous predictors.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_pop,                           num.trees = 50) plot(model1) #> Press [enter] to continue #> Warning: The data contained 3 character or factor variables unsuitable for pdp plots(district, gender, state).   # }"},{"path":"https://krennpa.github.io/SAEforest/reference/popNsize.html","id":null,"dir":"Reference","previous_headings":"","what":"Demographic population-size data — popNsize","title":"Demographic population-size data — popNsize","text":"data contains simulated population data based aggregates eusilcA_pop, based eusilcP package simFrame.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/popNsize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demographic population-size data — popNsize","text":"","code":"popNsize"},{"path":"https://krennpa.github.io/SAEforest/reference/popNsize.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Demographic population-size data — popNsize","text":"data frame 94 Austrian districts corresponding synthetic population numbers: district character; districts (94 levels). N_i numeric; simulated population district.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/print.SAEforest.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints a 'SAEforest' object — print.SAEforest","title":"Prints a 'SAEforest' object — print.SAEforest","text":"Basic information SAEforestObject printed.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/print.SAEforest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints a 'SAEforest' object — print.SAEforest","text":"","code":"# S3 method for SAEforest print(x, ...)"},{"path":"https://krennpa.github.io/SAEforest/reference/print.SAEforest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints a 'SAEforest' object — print.SAEforest","text":"x Object class SAEforest, representing point MSE estimates obtained function SAEforest_model. ... Optional additional inputs ignored method.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/print.SAEforest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prints a 'SAEforest' object — print.SAEforest","text":"Prints basic information survey data characteristics.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":null,"dir":"Reference","previous_headings":"","what":"Presents point, MSE and CV estimates — summarize_indicators","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"Function summarize_indicators reports point mean squared error (MSE) estimates well calculated coefficients variation (CV) fitted SAEforest object.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"","code":"summarize_indicators(object, indicator = \"all\", MSE = FALSE, CV = FALSE)"},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"object Object point /MSE estimates /calculated CV's requested. object must class SAEforest. indicator Optional character vector specifying indicators mapped: () calculated indicators (\"\"); (ii) default indicators name: \"Mean\", \"Quant10\", \"Quant25\", \"Median\", \"Quant75\", \"Quant90\", \"Gini\", \"Hcr\", \"Pgap\", \"Qsr\" function name/s \"custom_indicator/s\"; (iii) vector names indicators. object estimated SAEforest_model indicator arguments ignored \"Mean\" returned. MSE Logical. TRUE, MSE estimates selected indicators per domain added data frame point estimates. Defaults FALSE. CV Logical. TRUE, coefficients variation selected indicators per domain added data frame point estimates. Defaults FALSE.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"return summarize_indicators object class summarize_indicators.SAEforest including domain-specific point /MSE estimates /calculated CV's SAEforest object returned object contains data.frame ind character including names requested indicator(s).","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"Objects class summarize_indicators.SAEforest methods following generic functions: head tail (default documentation, see head),  .matrix (default documentation, see matrix), .data.frame (default documentation, see .data.frame), subset (default documentation, see subset).","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Calculating point + MSE estimates and passing arguments to the forest. # Additionally, two additional indicators and functions as threshold are added. # Note that B and num.trees are low to speed up estimation time and must be changed for # practical applications.  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_pop,                           meanOnly = FALSE, MSE = \"nonparametric\", B = 5, mtry = 5,                           num.trees = 50, smearing = FALSE) #> Error SD Bootstrap started: #> MSE Bootstrap with 5 rounds started:  # Extract indicator and show generics: Gini1 <- summarize_indicators(model1, MSE = TRUE, CV = TRUE, indicator = \"Gini\")  head(Gini1) #>              district      Gini     Gini_MSE    Gini_CV #> 1           Amstetten 0.2506610 0.0004543057 0.08503297 #> 2               Baden 0.1815458 0.0001324130 0.06338390 #> 3             Bludenz 0.2841038 0.0007885591 0.09884166 #> 4      Braunau am Inn 0.2697336 0.0002901931 0.06315512 #> 5             Bregenz 0.1617372 0.0001258838 0.06937054 #> 6 Bruck an der Leitha 0.1778989 0.0002382211 0.08675945 tail(Gini1) #>                   district      Gini     Gini_MSE    Gini_CV #> 89                    Wien 0.2413731 0.0001131947 0.04407824 #> 90  Wiener Neustadt (Land) 0.2006023 0.0002253390 0.07483112 #> 91 Wiener Neustadt (Stadt) 0.2100767 0.0014837030 0.18335616 #> 92               Wolfsberg 0.2311071 0.0009660102 0.13448613 #> 93             Zell am See 0.3003195 0.0004827088 0.07315753 #> 94                  Zwettl 0.2677981 0.0022288514 0.17629216 as.data.frame(Gini1) #>                         district      Gini     Gini_MSE    Gini_CV #> 1                      Amstetten 0.2506610 4.543057e-04 0.08503297 #> 2                          Baden 0.1815458 1.324130e-04 0.06338390 #> 3                        Bludenz 0.2841038 7.885591e-04 0.09884166 #> 4                 Braunau am Inn 0.2697336 2.901931e-04 0.06315512 #> 5                        Bregenz 0.1617372 1.258838e-04 0.06937054 #> 6            Bruck an der Leitha 0.1778989 2.382211e-04 0.08675945 #> 7             Bruck-Mürzzuschlag 0.1682187 1.652236e-04 0.07641205 #> 8               Deutschlandsberg 0.1913224 2.293643e-04 0.07915843 #> 9                       Dornbirn 0.2082983 6.929718e-04 0.12637817 #> 10                      Eferding 0.2329806 6.966463e-04 0.11328867 #> 11            Eisenstadt (Stadt) 0.1875840 8.119365e-04 0.15190262 #> 12           Eisenstadt-Umgebung 0.2004414 5.140637e-04 0.11311524 #> 13                     Feldkirch 0.2262377 5.047038e-04 0.09930092 #> 14                   Feldkirchen 0.2537076 1.579048e-03 0.15662611 #> 15                     Freistadt 0.2099376 8.011244e-04 0.13482167 #> 16                       Gmunden 0.2035652 2.554946e-04 0.07852126 #> 17                         Gmünd 0.2557238 2.125490e-03 0.18028451 #> 18                  Graz (Stadt) 0.2155064 1.494586e-04 0.05672838 #> 19                 Graz-Umgebung 0.1829827 1.316544e-03 0.19829311 #> 20                  Grieskirchen 0.2090666 1.008586e-03 0.15190489 #> 21                   Gänserndorf 0.1994797 1.921915e-04 0.06949737 #> 22                       Güssing 0.2301604 7.912222e-04 0.12221336 #> 23                       Hallein 0.2254833 6.489844e-04 0.11298030 #> 24          Hartberg-Fürstenfeld 0.2631672 7.679258e-04 0.10529988 #> 25                      Hermagor 0.2485312 1.650781e-03 0.16347970 #> 26                    Hollabrunn 0.2197322 4.093010e-04 0.09207203 #> 27                          Horn 0.2289698 3.579521e-04 0.08262932 #> 28                          Imst 0.2449579 7.311943e-04 0.11038880 #> 29              Innsbruck (Land) 0.2019746 4.139933e-04 0.10073955 #> 30             Innsbruck (Stadt) 0.2069875 3.551326e-04 0.09104397 #> 31                   Jennersdorf 0.2459114 5.877856e-04 0.09858954 #> 32        Kirchdorf an der Krems 0.2302639 8.306758e-04 0.12516700 #> 33                     Kitzbühel 0.2523222 1.222655e-03 0.13857873 #> 34             Klagenfurt (Land) 0.1815504 5.944269e-04 0.13429261 #> 35            Klagenfurt (Stadt) 0.1627702 4.077377e-04 0.12405537 #> 36                    Korneuburg 0.1608567 9.234021e-05 0.05973879 #> 37                  Krems (Land) 0.2358282 5.561211e-04 0.09999745 #> 38    Krems an der Donau (Stadt) 0.2181051 7.553568e-04 0.12601150 #> 39                      Kufstein 0.1833995 1.678502e-04 0.07064198 #> 40                       Landeck 0.2602467 1.148258e-03 0.13020708 #> 41                      Leibnitz 0.2350626 3.335657e-04 0.07769751 #> 42                        Leoben 0.1860993 1.033475e-04 0.05462673 #> 43                         Lienz 0.2627103 6.914913e-04 0.10009588 #> 44                        Liezen 0.2587971 9.768290e-04 0.12076743 #> 45                    Lilienfeld 0.2417432 6.898991e-04 0.10865219 #> 46                  Linz (Stadt) 0.1847478 1.815338e-04 0.07292888 #> 47                     Linz-Land 0.1684694 3.443728e-05 0.03483321 #> 48                   Mattersburg 0.2073792 7.126628e-04 0.12872916 #> 49                          Melk 0.2656890 1.255416e-03 0.13335838 #> 50                    Mistelbach 0.2002418 2.197294e-04 0.07402685 #> 51                         Murau 0.2544567 2.923920e-03 0.21250489 #> 52                        Murtal 0.2232718 3.604960e-04 0.08503863 #> 53                       Mödling 0.1454743 7.551740e-04 0.18890225 #> 54                   Neunkirchen 0.2177180 2.832909e-04 0.07730757 #> 55               Neusiedl am See 0.2075293 5.246292e-04 0.11036894 #> 56                Oberpullendorf 0.2225282 5.380646e-04 0.10423948 #> 57                      Oberwart 0.2521503 4.386798e-04 0.08306428 #> 58                          Perg 0.2072744 2.015107e-04 0.06848623 #> 59                        Reutte 0.2070370 3.879181e-04 0.09513098 #> 60              Ried im Innkreis 0.2438417 2.854332e-04 0.06928579 #> 61                      Rohrbach 0.2279989 9.168689e-04 0.13280699 #> 62                  Rust (Stadt) 0.2508950 4.058043e-03 0.25390217 #> 63              Salzburg (Stadt) 0.1919434 1.643715e-04 0.06679440 #> 64             Salzburg-Umgebung 0.1639323 1.139990e-04 0.06513076 #> 65        Sankt Johann im Pongau 0.2402848 4.451068e-04 0.08780229 #> 66           Sankt Pölten (Land) 0.2332269 1.503084e-04 0.05256697 #> 67          Sankt Pölten (Stadt) 0.2199186 3.331637e-04 0.08299787 #> 68        Sankt Veit an der Glan 0.2438201 8.221905e-04 0.11760254 #> 69                      Scheibbs 0.2442704 5.390493e-03 0.30056843 #> 70                        Schwaz 0.2317185 4.676871e-04 0.09332906 #> 71                     Schärding 0.2907355 5.480095e-04 0.08051855 #> 72           Spittal an der Drau 0.2521698 6.586615e-04 0.10177429 #> 73                 Steyr (Stadt) 0.2102186 1.969636e-03 0.21111638 #> 74                    Steyr-Land 0.1731385 6.047411e-04 0.14203360 #> 75              Südoststeiermark 0.2439255 9.648467e-04 0.12734208 #> 76                       Tamsweg 0.2094321 1.302228e-04 0.05448792 #> 77                         Tulln 0.1996404 6.394416e-05 0.04005457 #> 78               Urfahr-Umgebung 0.1420431 7.835259e-04 0.19706365 #> 79               Villach (Stadt) 0.1877881 6.452013e-05 0.04277396 #> 80                  Villach Land 0.2042127 3.694955e-04 0.09412866 #> 81                     Voitsberg 0.2111620 1.451617e-03 0.18043062 #> 82                   Vöcklabruck 0.2094107 5.244822e-04 0.10936199 #> 83                   Völkermarkt 0.2369843 7.105056e-04 0.11247713 #> 84        Waidhofen an der Thaya 0.2672654 3.274056e-03 0.21409191 #> 85 Waidhofen an der Ybbs (Stadt) 0.2213196 3.763664e-03 0.27719509 #> 86                          Weiz 0.2436176 2.927377e-04 0.07023130 #> 87                  Wels (Stadt) 0.2369898 1.084322e-03 0.13894711 #> 88                     Wels-Land 0.1967274 7.877112e-04 0.14266538 #> 89                          Wien 0.2413731 1.131947e-04 0.04407824 #> 90        Wiener Neustadt (Land) 0.2006023 2.253390e-04 0.07483112 #> 91       Wiener Neustadt (Stadt) 0.2100767 1.483703e-03 0.18335616 #> 92                     Wolfsberg 0.2311071 9.660102e-04 0.13448613 #> 93                   Zell am See 0.3003195 4.827088e-04 0.07315753 #> 94                        Zwettl 0.2677981 2.228851e-03 0.17629216 as.matrix(Gini1) #>            Gini     Gini_MSE    Gini_CV #>  [1,] 0.2506610 4.543057e-04 0.08503297 #>  [2,] 0.1815458 1.324130e-04 0.06338390 #>  [3,] 0.2841038 7.885591e-04 0.09884166 #>  [4,] 0.2697336 2.901931e-04 0.06315512 #>  [5,] 0.1617372 1.258838e-04 0.06937054 #>  [6,] 0.1778989 2.382211e-04 0.08675945 #>  [7,] 0.1682187 1.652236e-04 0.07641205 #>  [8,] 0.1913224 2.293643e-04 0.07915843 #>  [9,] 0.2082983 6.929718e-04 0.12637817 #> [10,] 0.2329806 6.966463e-04 0.11328867 #> [11,] 0.1875840 8.119365e-04 0.15190262 #> [12,] 0.2004414 5.140637e-04 0.11311524 #> [13,] 0.2262377 5.047038e-04 0.09930092 #> [14,] 0.2537076 1.579048e-03 0.15662611 #> [15,] 0.2099376 8.011244e-04 0.13482167 #> [16,] 0.2035652 2.554946e-04 0.07852126 #> [17,] 0.2557238 2.125490e-03 0.18028451 #> [18,] 0.2155064 1.494586e-04 0.05672838 #> [19,] 0.1829827 1.316544e-03 0.19829311 #> [20,] 0.2090666 1.008586e-03 0.15190489 #> [21,] 0.1994797 1.921915e-04 0.06949737 #> [22,] 0.2301604 7.912222e-04 0.12221336 #> [23,] 0.2254833 6.489844e-04 0.11298030 #> [24,] 0.2631672 7.679258e-04 0.10529988 #> [25,] 0.2485312 1.650781e-03 0.16347970 #> [26,] 0.2197322 4.093010e-04 0.09207203 #> [27,] 0.2289698 3.579521e-04 0.08262932 #> [28,] 0.2449579 7.311943e-04 0.11038880 #> [29,] 0.2019746 4.139933e-04 0.10073955 #> [30,] 0.2069875 3.551326e-04 0.09104397 #> [31,] 0.2459114 5.877856e-04 0.09858954 #> [32,] 0.2302639 8.306758e-04 0.12516700 #> [33,] 0.2523222 1.222655e-03 0.13857873 #> [34,] 0.1815504 5.944269e-04 0.13429261 #> [35,] 0.1627702 4.077377e-04 0.12405537 #> [36,] 0.1608567 9.234021e-05 0.05973879 #> [37,] 0.2358282 5.561211e-04 0.09999745 #> [38,] 0.2181051 7.553568e-04 0.12601150 #> [39,] 0.1833995 1.678502e-04 0.07064198 #> [40,] 0.2602467 1.148258e-03 0.13020708 #> [41,] 0.2350626 3.335657e-04 0.07769751 #> [42,] 0.1860993 1.033475e-04 0.05462673 #> [43,] 0.2627103 6.914913e-04 0.10009588 #> [44,] 0.2587971 9.768290e-04 0.12076743 #> [45,] 0.2417432 6.898991e-04 0.10865219 #> [46,] 0.1847478 1.815338e-04 0.07292888 #> [47,] 0.1684694 3.443728e-05 0.03483321 #> [48,] 0.2073792 7.126628e-04 0.12872916 #> [49,] 0.2656890 1.255416e-03 0.13335838 #> [50,] 0.2002418 2.197294e-04 0.07402685 #> [51,] 0.2544567 2.923920e-03 0.21250489 #> [52,] 0.2232718 3.604960e-04 0.08503863 #> [53,] 0.1454743 7.551740e-04 0.18890225 #> [54,] 0.2177180 2.832909e-04 0.07730757 #> [55,] 0.2075293 5.246292e-04 0.11036894 #> [56,] 0.2225282 5.380646e-04 0.10423948 #> [57,] 0.2521503 4.386798e-04 0.08306428 #> [58,] 0.2072744 2.015107e-04 0.06848623 #> [59,] 0.2070370 3.879181e-04 0.09513098 #> [60,] 0.2438417 2.854332e-04 0.06928579 #> [61,] 0.2279989 9.168689e-04 0.13280699 #> [62,] 0.2508950 4.058043e-03 0.25390217 #> [63,] 0.1919434 1.643715e-04 0.06679440 #> [64,] 0.1639323 1.139990e-04 0.06513076 #> [65,] 0.2402848 4.451068e-04 0.08780229 #> [66,] 0.2332269 1.503084e-04 0.05256697 #> [67,] 0.2199186 3.331637e-04 0.08299787 #> [68,] 0.2438201 8.221905e-04 0.11760254 #> [69,] 0.2442704 5.390493e-03 0.30056843 #> [70,] 0.2317185 4.676871e-04 0.09332906 #> [71,] 0.2907355 5.480095e-04 0.08051855 #> [72,] 0.2521698 6.586615e-04 0.10177429 #> [73,] 0.2102186 1.969636e-03 0.21111638 #> [74,] 0.1731385 6.047411e-04 0.14203360 #> [75,] 0.2439255 9.648467e-04 0.12734208 #> [76,] 0.2094321 1.302228e-04 0.05448792 #> [77,] 0.1996404 6.394416e-05 0.04005457 #> [78,] 0.1420431 7.835259e-04 0.19706365 #> [79,] 0.1877881 6.452013e-05 0.04277396 #> [80,] 0.2042127 3.694955e-04 0.09412866 #> [81,] 0.2111620 1.451617e-03 0.18043062 #> [82,] 0.2094107 5.244822e-04 0.10936199 #> [83,] 0.2369843 7.105056e-04 0.11247713 #> [84,] 0.2672654 3.274056e-03 0.21409191 #> [85,] 0.2213196 3.763664e-03 0.27719509 #> [86,] 0.2436176 2.927377e-04 0.07023130 #> [87,] 0.2369898 1.084322e-03 0.13894711 #> [88,] 0.1967274 7.877112e-04 0.14266538 #> [89,] 0.2413731 1.131947e-04 0.04407824 #> [90,] 0.2006023 2.253390e-04 0.07483112 #> [91,] 0.2100767 1.483703e-03 0.18335616 #> [92,] 0.2311071 9.660102e-04 0.13448613 #> [93,] 0.3003195 4.827088e-04 0.07315753 #> [94,] 0.2677981 2.228851e-03 0.17629216 subset(Gini1, district == \"Wien\") #>    district      Gini     Gini_MSE    Gini_CV #> 89     Wien 0.2413731 0.0001131947 0.04407824 # }"},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizes an 'SAEforest' object — summary.SAEforest","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"Shows additional information data, SAE model components. Information extracted SAEforest object. returned object suitable printing print.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"","code":"# S3 method for SAEforest summary(object, ...)"},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"object object class SAEforest representing point MSE estimates. Objects differ depending estimation method. ... Optional additional inputs ignored method.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"object class summary.SAEforest including information sample population data, model fit random forest specific metrics.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"","code":"# Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                          smp_data = eusilcA_smp, pop_data = eusilcA_pop,                          num.trees=50, mtry=3)  # SAEforest generics: summary(model1) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop, num.trees = 50,  #>     mtry = 3) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                         50 #> Number of independent variables:         14 #> Mtry:                                     3 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                      0.5977 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39342.9  39354.1 -19669.5  39338.9     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -4.4557 -0.4893 -0.0572  0.4470 11.3610  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept) 14429652 3799     #>  Residual             32568503 5707     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.3070259  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 18 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                                                        #>  0 -19593.66 -19603.83 -19662.29 -19640.94 -19627.34 -19630.9 -19659.51 #>                                                                        #>  -19651.43 -19671.83 -19656.64 -19637.15 -19622.16 -19585.67 -19653.35 #>                                          #>  -19671.68 -19633.28 -19668.55 -19669.47"},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Tuning and cross-validation of MERF parameters — tune_parameters","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"Function tune_parameters allows tune parameters implemented MERF method. Essentially, function can understood modified wrapper train package caret, treating MERFs custom method.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"","code":"tune_parameters(   Y,   X,   data,   dName,   trControl,   tuneGrid,   seed = 11235,   gg_theme = theme_minimal(),   plot_res = TRUE,   return_plot = FALSE,   na.rm = TRUE,   ... )"},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"Y Continuous input value target variable. X Matrix data.frame predictive covariates. data data.frame survey sample data including specified elements Y X. dName Character specifying name domain identifier, random intercepts modeled. trControl Control parameters passed train. important parameters method (\"repeatedcv\" x-fold cross-validation), number (number folds) repeats (number repetitions). details see trainControl example . tuneGrid data.frame possible tuning values. columns must names tuning parameters. tuning function grid must comprise entries following parameters: num.trees, mtry, min.node.size, splitrule. seed Enabling reproducibility cross-validation tuning. Defaults 11235. gg_theme Specify predefined theme ggplot2. Defaults theme_minimal. plot_res Optional logical. TRUE, plot results cross-validation tuning shown. Defaults TRUE. return_plot set TRUE, list comparative plot produced ggplot2 returned individual customization processing. na.rm Logical. Whether missing values removed. Defaults TRUE. ... Additional parameters directly passed random forest ranger /training function train. details possible parameters examples see ranger train.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"Prints requested optimal tuning parameters (requested) additional comparative plot produced ggplot2.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"Tuning can performed following four parameters: num.trees (number trees forest), mtry (number variables split candidates node), min.node.size (minimal individual node size) splitrule (general splitting rule). details see ranger.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\") library(caret) #> Loading required package: ggplot2 #> Loading required package: lattice  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Specific characteristics of Cross-validation fitControl <- trainControl(method = \"repeatedcv\", number = 5,                            repeats = 1)  # Define a tuning-grid merfGrid <- expand.grid(num.trees = 50, mtry = c(3, 7, 9),                         min.node.size = 10, splitrule = \"variance\")  tune_parameters(Y = income, X = X_covar, data = eusilcA_smp,                 dName = \"district\", trControl = fitControl,                 tuneGrid = merfGrid) #> 1945 samples #>   15 predictor #>  #> No pre-processing #> Resampling: Cross-Validated (5 fold, repeated 1 times)  #> Summary of sample sizes: 1557, 1557, 1556, 1556, 1554  #> Resampling results across tuning parameters: #>  #>   mtry  RMSE      Rsquared   MAE      #>   3     5757.157  0.7120835  3830.652 #>   7     5518.994  0.7281565  3588.959 #>   9     5606.048  0.7184037  3655.541 #>  #> Tuning parameter 'num.trees' was held constant at a value of 50 #>  #> Tuning parameter 'min.node.size' was held constant at a value of 10 #>  #> Tuning parameter 'splitrule' was held constant at a value of variance #> RMSE was used to select the optimal model using the smallest value. #> The final values used for the model were num.trees = 50, mtry = #>  7, min.node.size = 10 and splitrule = variance.  # }"},{"path":[]}]
