[{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://krennpa.github.io/SAEforest/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Patrick Krennmair. Author, maintainer.","code":""},{"path":"https://krennpa.github.io/SAEforest/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Krennmair P (2022). SAEforest: Mixed Effect Random Forests Small Area Estimation. https://github.com/krennpa/SAEforest, https://krennpa.github.io/SAEforest/.","code":"@Manual{,   title = {SAEforest: Mixed Effect Random Forests for Small Area Estimation},   author = {Patrick Krennmair},   year = {2022},   note = {https://github.com/krennpa/SAEforest, https://krennpa.github.io/SAEforest/}, }"},{"path":"https://krennpa.github.io/SAEforest/index.html","id":"saeforest","dir":"","previous_headings":"","what":"Mixed Effect Random Forests for Small Area Estimation","title":"Mixed Effect Random Forests for Small Area Estimation","text":"package promotes use Mixed Effects Random Forests (MERFs) applications Small Area Estimation (SAE). package effectively combines functions estimation regionally disaggregated linear nonlinear economic inequality indicators using survey sample data. Estimated models increase precision direct estimates survey data, combining unit-level aggregated population level covariate information census register data. Apart point estimates, MSE estimates requested indicators can easily obtained. package provides procedures facilitate analysis model performance MERFs visualizes predictive relations covariates variable importance. Additionally, users can summarize map indicators corresponding measures uncertainty.","code":""},{"path":"https://krennpa.github.io/SAEforest/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Mixed Effect Random Forests for Small Area Estimation","text":"can install development version SAEforest Github :","code":"# install.packages(\"devtools\") devtools::install_github(\"krennpa/SAEforest\")"},{"path":"https://krennpa.github.io/SAEforest/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Mixed Effect Random Forests for Small Area Estimation","text":"basic example demonstrates functionality package: included features inspect model graphically. instance look following output generic function plot, shows -called variable importance plot: inspect model graphically, also map indicators. Take look example Austrian pseudo-data district-level mean income produced function map_indicators: hope like presentation package. interested model-based SAE definitely also check package emdi.","code":"library(SAEforest)  data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[,-c(1,16,17,18)]  #Example 1: #Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                          smp_data = eusilcA_smp, pop_data = eusilcA_pop)  #SAEforest generics: summary(model1) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                        500 #> Number of independent variables:         14 #> Mtry:                                     3 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                     0.62976 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39193.1  39204.2 -19594.5  39189.1     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -2.9730 -0.5194 -0.0759  0.4448 11.8159  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept) 11157235 3340     #>  Residual             30335770 5508     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.2688944  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 4 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                           #>  0 -19545.67 -19573.45 -19593.59 -19594.53 #> Press [enter] to continue"},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":null,"dir":"Reference","previous_headings":"","what":"Main function for unit-level MERF — MERFranger","title":"Main function for unit-level MERF — MERFranger","text":"function enables use Mixed Effects Random Forests (MERFs) effectively combining random forest ranger model capturing random effects lme4. MERF algorithm algorithmic procedure reminiscent EM-algorithm (see Details). function base-function wrapping function (SAEforest_model directly used ordinary user. Recommended exceptions applications exceeding scope existing wrapper functions research. function MERFranger allows model complex patterns structural relations (see Examples). function returns object class MERFranger, can used produce unit-level predictions. contrast wrapping functions, function directly provide SAE estimates domain-specific indicators.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main function for unit-level MERF — MERFranger","text":"","code":"MERFranger(   Y,   X,   random,   data,   importance = \"none\",   initialRandomEffects = 0,   ErrorTolerance = 1e-04,   MaxIterations = 25,   na.rm = TRUE,   ... )"},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main function for unit-level MERF — MERFranger","text":"Y Continuous input value target variable. X Matrix predictive covariates. random Specification random effects terms following syntax lmer. Random effect terms specified vertical bars (|) separating expressions design matrices grouping factors. details see lmer example . data data.frame sample data including specified elements Y X. importance Variable importance mode processed random forest ranger. Must 'none', 'impurity', 'impurity_corrected', 'permutation'. details see ranger. initialRandomEffects Numeric value vector initial estimate random effects. Defaults 0. ErrorTolerance Numeric value monitor MERF algorithm's convergence. Defaults 1e-04. MaxIterations Numeric value specifying maximal amount iterations MERF algorithm. Defaults 25. na.rm Logical. Whether missing values removed. Defaults TRUE. ... Additional parameters directly passed random forest ranger. important parameters instance mtry (number variables possibly split node), num.trees (number trees). details possible parameters see ranger example .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main function for unit-level MERF — MERFranger","text":"object class MERFranger includes following elements: Forest random forest class ranger modelling fixed effects model. EffectModel model random effects class merMod capturing structural components MERFs modeling random components. RandomEffects List element containing values random intercepts EffectModel. RanEffSD Numeric value standard deviation random intercepts. ErrorSD Numeric value standard deviation unit-level errors. VarianceCovariance VarCorr matrix EffectModel. LogLik Vector numerical entries showing loglikelihood MERF algorithm. IterationsUsed Numeric number iterations used convergence MERF algorithm. OOBresiduals Vector OOB-residuals. Random Character specifying random intercept random effects model. ErrorTolerance Numerical value monitor MERF algorithm's convergence. initialRandomEffects Numeric value vector initial specification random effects. MaxIterations Numeric value specifying maximal amount iterations MERF algorithm.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Main function for unit-level MERF — MERFranger","text":"exists generic function predict objects obtained MERFranger. MERF algorithm iteratively optimizes two separate steps: ) random forest function, assuming random effects term correct b) estimates random effects part, assuming OOB-predictions forest correct. Overall convergence algorithm monitored log-likelihood joint model components. details see Krennmair & Schmid (2022) Hajjem et al. (2014). Note MERFranger object composition elements random forest class ranger random effects model class merMod. Thus, generic functions applicable corresponding objects. details generic functions see ranger lmer well examples .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Main function for unit-level MERF — MERFranger","text":"Hajjem, ., Bellavance, F., & Larocque, D. (2014). Mixed-Effects Random Forest Clustered Data. Journal Statistical Computation Simulation, 84 (6), 1313–1328. Krennmair, P., & Schmid, T. (2022). Flexible Domain Prediction Using Mixed Effects Random Forests. Journal Royal Statistical Society: Series C (Applied Statistics) (forthcoming).","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main function for unit-level MERF — MERFranger","text":"","code":"# \\donttest{ # Load Data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Example 1: # Calculating general model used in wrapper functions  model1 <- MERFranger(Y = income, X = X_covar, random = \"(1|district)\",                      data = eusilcA_smp, num.trees=50)  # get individual predictions:  ind_pred <- predict(model1, eusilcA_pop) # }"},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest.html","id":null,"dir":"Reference","previous_headings":"","what":"'SAEforest' - Estimating disaggregated indicators using Mixed Effects Random Forests — SAEforest","title":"'SAEforest' - Estimating disaggregated indicators using Mixed Effects Random Forests — SAEforest","text":"package SAEforest promotes use Mixed Effects Random Forests (MERFs) applications Small Area Estimation (SAE). package effectively combines functions estimation regionally disaggregated linear nonlinear economic inequality indicators using survey sample data. Estimated models increase precision direct estimates survey data, combining unit-level aggregated population level covariate information census register data. Apart point estimates, MSE estimates requested indicators can easily obtained. package provides procedures facilitate analysis model performance MERFs visualizes predictive relations covariates variable importance. Additionally, users can summarize map indicators corresponding measures uncertainty. Methodological details functions package found Krennmair & Schmid (2022), Krennmair et al. (2022a) Krennmair et al. (2022b).","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"'SAEforest' - Estimating disaggregated indicators using Mixed Effects Random Forests — SAEforest","text":"package includes main function MERFranger wrapped SAEforest_model improved SAE workflow. function produces object inheriting requested results regionally disaggregated point uncertainty estimates. Additionally, statistical information model fit variable importance accessible generic functions summary (summary.SAEforest) class-specific plot function (plot.SAEforest). full documentation objects class SAEforest see SAEforestObject. overview currently provided functions within package can seen help(package=\"SAEforest\").","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"'SAEforest' - Estimating disaggregated indicators using Mixed Effects Random Forests — SAEforest","text":"Krennmair, P., & Schmid, T. (2022). Flexible Domain Prediction Using Mixed Effects Random Forests. Journal Royal Statistical Society: Series C (Applied Statistics) (forthcoming). Krennmair, P., & Würz, N. & Schmid, T. (2022a). Analysing Opportunity Cost Care Work using Mixed Effects Random Forests Aggregated Census Data. Krennmair, P., & Schmid, T & Tzavidis, Nikos. (2022b). Estimation Poverty Indicators Using Mixed Effects Random Forests. Working Paper.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitted 'SAEforest' object — SAEforestObject","title":"Fitted 'SAEforest' object — SAEforestObject","text":"object class SAEforest always includes point estimates regionally disaggregated economic inequality indicators MERFmodel element including information model fit fixed effects well random effects. Optionally SAEforestObject includes corresponding MSE estimates. case mean estimates aggregated covariate information, SAEforestObject additionally includes element, capturing number variables used weighting process aggregated covariate information. object class SAEforestObject, following generic functions applicable: print, plot, summary summarize_indicators. Additionally selected generic functions lme4 (fixef, getData, ranef, residuals, sigma, VarCorr) directly applicable object class SAEforest.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitted 'SAEforest' object — SAEforestObject","text":"Four components always included SAEforest object. MSE_estimates AdjustedSD NULL except MSE results requested. element NrCovar exists SAEforest objects produced SAEforest_model option aggData = TRUE. MERFmodel included MERFmodel object comprises information model fit, details performed MERF algorithm well details variance components. See exact description components. Indicators data frame first column area-level identifier additional columns indicators interest. Note objects SAEforest_model report \"Mean\". MSE_estimates MSE results requested. data frame first column area-level identifier additional columns MSE estimates indicators interest. Note objects SAEforest_model report MSE values \"Mean\". NrCovar means aggregated covariate information estimated, .e. SAEforest_model option aggData = TRUE. list containing variable names covariates used calculation needed calibration weights point estimates. See Krennmair et al. (2022a) methodological details explanations. Details object MERFmodel: Forest random forest class ranger modelling fixed effects model. EffectModel model random effects class merMod capturing structural components MERFs modeling random components. RandomEffects List element containing values random intercepts EffectModel. RanEffSD Numeric value standard deviation random intercepts. ErrorSD Numeric value standard deviation unit-level errors. VarianceCovariance VarCorr matrix EffectModel. LogLik Vector numerical entries showing loglikelihood MERF algorithm. IterationsUsed Numeric number iterations used convergence MERF algorithm. OOBresiduals Vector OOB-residuals. Random Character specifying random intercept random effects model. ErrorTolerance Numerical value monitor MERF algorithm's convergence. initialRandomEffects Numeric value vector initial specification random effects. MaxIterations Numeric value specifying maximal amount iterations MERF algorithm. call summarized function call producing object. data_specs Data characteristics domain-specific sample sizes number --sample areas. data Processed survey sample data.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fitted 'SAEforest' object — SAEforestObject","text":"Note MERFmodel object composition elements random forest class ranger random effects model class merMod. Thus, generic functions applicable corresponding objects. details generic functions see ranger lmer well examples .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fitted 'SAEforest' object — SAEforestObject","text":"Krennmair, P., & Schmid, T. (2022). Flexible Domain Prediction Using Mixed Effects Random Forests. Journal Royal Statistical Society: Series C (Applied Statistics) (forthcoming). Krennmair, P., & Würz, N. & Schmid, T. (2022a). Analysing Opportunity Cost Care Work using Mixed Effects Random Forests Aggregated Census Data. Krennmair, P., & Schmid, T & Tzavidis, Nikos. (2022b). Estimation Poverty Indicators Using Mixed Effects Random Forests. Working Paper.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitted 'SAEforest' object — SAEforestObject","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[,-c(1,16,17,18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                          smp_data = eusilcA_smp, pop_data = eusilcA_pop,                          num.trees=50, mtry = 3)  #SAEforest generics:  summary(model1) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop, num.trees = 50,  #>     mtry = 3) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                         50 #> Number of independent variables:         14 #> Mtry:                                     3 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                     0.59538 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39334.4  39345.5 -19665.2  39330.4     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -3.1077 -0.5313 -0.0494  0.4427 11.3744  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept) 13003090 3606     #>  Residual             32534834 5704     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.2855442  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 12 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                                                         #>  0 -19605.08 -19612.37 -19639.98 -19616.73 -19641.94 -19647.69 -19637.91 #>                                                 #>  -19674.39 -19636.8 -19669.3 -19664.24 -19665.2 summarize_indicators(model1) #> Warning: For objects of class SAEforest_mean or SAEforest_meanAGG, only results for the Indicator \"Mean\" are reported #> Indicator/s: Mean #>                         district     Mean #> 1                      Amstetten 14331.84 #> 2                          Baden 22166.71 #> 3                        Bludenz 12420.06 #> 4                 Braunau am Inn 12276.01 #> 5                        Bregenz 32820.72 #> 6            Bruck an der Leitha 23263.97 #> 7             Bruck-Mürzzuschlag 23959.13 #> 8               Deutschlandsberg 20707.54 #> 9                       Dornbirn 19760.85 #> 10                      Eferding 15565.50 #> 11            Eisenstadt (Stadt) 36360.20 #> 12           Eisenstadt-Umgebung 24719.31 #> 13                     Feldkirch 16744.33 #> 14                   Feldkirchen 13963.65 #> 15                     Freistadt 17042.94 #> 16                       Gmunden 19645.62 #> 17                         Gmünd 13746.41 #> 18                  Graz (Stadt) 17724.99 #> 19                 Graz-Umgebung 34633.02 #> 20                  Grieskirchen 16696.74 #> 21                   Gänserndorf 20073.13 #> 22                       Güssing 16479.76 #> 23                       Hallein 16221.26 #> 24          Hartberg-Fürstenfeld 13342.60 #> 25                      Hermagor 13145.99 #> 26                    Hollabrunn 16933.75 #> 27                          Horn 15293.44 #> 28                          Imst 14037.23 #> 29              Innsbruck (Land) 26597.53 #> 30             Innsbruck (Stadt) 17429.75 #> 31                   Jennersdorf 13320.25 #> 32        Kirchdorf an der Krems 16082.61 #> 33                     Kitzbühel 12428.66 #> 34             Klagenfurt (Land) 22551.62 #> 35            Klagenfurt (Stadt) 33228.69 #> 36                    Korneuburg 27940.03 #> 37                  Krems (Land) 15577.46 #> 38    Krems an der Donau (Stadt) 16689.14 #> 39                      Kufstein 20320.02 #> 40                       Landeck 13052.72 #> 41                      Leibnitz 15884.71 #> 42                        Leoben 20271.63 #> 43                         Lienz 12625.12 #> 44                        Liezen 12144.19 #> 45                    Lilienfeld 15188.40 #> 46                  Linz (Stadt) 22293.60 #> 47                     Linz-Land 27517.80 #> 48                   Mattersburg 19942.89 #> 49                          Melk 12241.17 #> 50                    Mistelbach 19715.48 #> 51                         Murau 12986.21 #> 52                        Murtal 19195.26 #> 53                       Mödling 41192.70 #> 54                   Neunkirchen 16354.42 #> 55               Neusiedl am See 18418.88 #> 56                Oberpullendorf 17138.02 #> 57                      Oberwart 13095.24 #> 58                          Perg 17177.40 #> 59                        Reutte 18068.51 #> 60              Ried im Innkreis 13730.82 #> 61                      Rohrbach 15172.07 #> 62                  Rust (Stadt) 13883.49 #> 63              Salzburg (Stadt) 20172.88 #> 64             Salzburg-Umgebung 30322.77 #> 65        Sankt Johann im Pongau 14714.75 #> 66           Sankt Pölten (Land) 16876.12 #> 67          Sankt Pölten (Stadt) 16320.62 #> 68        Sankt Veit an der Glan 14706.31 #> 69                      Scheibbs 14081.12 #> 70                        Schwaz 16082.86 #> 71                     Schärding 10536.04 #> 72           Spittal an der Drau 13477.94 #> 73                 Steyr (Stadt) 18259.52 #> 74                    Steyr-Land 25369.47 #> 75              Südoststeiermark 13974.85 #> 76                       Tamsweg 15754.50 #> 77                         Tulln 20417.30 #> 78               Urfahr-Umgebung 41917.63 #> 79               Villach (Stadt) 21630.90 #> 80                  Villach Land 19345.92 #> 81                     Voitsberg 17271.81 #> 82                   Vöcklabruck 18047.13 #> 83                   Völkermarkt 15064.38 #> 84        Waidhofen an der Thaya 12923.03 #> 85 Waidhofen an der Ybbs (Stadt) 17206.82 #> 86                          Weiz 14841.11 #> 87                  Wels (Stadt) 14267.82 #> 88                     Wels-Land 20314.36 #> 89                          Wien 20324.87 #> 90        Wiener Neustadt (Land) 19585.21 #> 91       Wiener Neustadt (Stadt) 16969.45 #> 92                     Wolfsberg 16711.33 #> 93                   Zell am See 10391.61 #> 94                        Zwettl 13345.88 residuals(model1) #>           213           194           258           460           798  #>  -4723.471642   3585.292699   1159.552007   -943.854708   4141.952161  #>           447           567           704           680           277  #>    772.610562  -1970.625325   -960.266736   3922.402458  -5043.877916  #>            65           507           672            41           435  #>  -4098.466806  -1159.415495   5791.113703   -193.082098    -26.620421  #>           532           248            75           673           401  #>   -141.725689   9938.851112  -3038.986741   -628.043666   -283.252846  #>           765           156           436            12           612  #>   6030.513894   1338.688861  -4404.112568  -1176.826892  -5222.399519  #>           514           529           142           390           107  #>  -1210.798826   -759.410212  -1250.061018   3082.335209  -6112.206988  #>           478          2806          2787          5385          3760  #>   -157.962277   3655.300595   1781.960664  -4926.355067   4192.158170  #>          2552          3271          6185          6320          6080  #>  12008.600076   -625.029986  -3211.725125   -413.758527  -4508.957185  #>          5667          2638          4275          6175          6112  #>   -248.708403    541.879925  -1683.551125  -1514.674329   4995.391653  #>          5838          5641          3705          3660          3609  #>   5542.551250   -630.985053   -281.867566  -7945.996705   3818.014369  #>          2712          6686          5166          4054          4840  #>   2148.118510   1360.062351  -3612.007927 -11433.533622    374.010774  #>          4133          6653          6871          5143          4922  #>    287.106621   6376.750511   -189.435956  -1745.546592  -3666.129773  #>          5927          7005          6332          4727          5439  #>  -4324.691685   3023.062015  -1352.524299   -266.712415  -5254.742149  #>          3887          6199          6667          3704          3450  #>   3861.898022  -3010.628322   5298.895829   1145.257376   -909.587161  #>          6292          2636          5399          2838          4376  #>   9562.048420   -359.012832   7414.490121  -2472.691426   -302.011905  #>          7138          2834          3916          5585          4065  #>  -3721.360244    270.882390   -149.015158  -6358.104788   3102.188778  #>          6249          6821          6958          6029          5513  #>  -1481.593772  -7179.530741   3090.975641  -4792.239661  -3090.911601  #>          5165          3738          4548          6291          3589  #>  -1377.642864   4658.227882   8274.801654  -4376.675709  -7809.619356  #>          3262          5338          3680          3983          6991  #>  -2804.303051   1342.309889   3643.521311   -939.881296    956.775859  #>          4670          4466          6163          6026          3544  #>   -455.316130   4077.510929  -2236.782743   2158.681794   1421.704221  #>          2541          5640          4858          2939          4596  #>   1561.005196  -3680.903100   2262.273084   5088.151217   1015.813797  #>          3129          2523          5060          6526          6244  #>   2588.816940   1720.997103  -2672.326600  -2257.180475   3326.249873  #>          5489          6008          6890          4207          6582  #>   5508.192910  -2798.042385  -2184.010392    115.691492    363.405628  #>          6993          4421          3548          7136          2817  #>  -1972.244640   -819.598946    792.793929  -2864.057004    -78.956207  #>          3325          6911          3577          4635          3958  #>   1743.645626   1742.191131   3587.024632  -2588.779121  -3864.847947  #>          6484          3012          4848          6601          2860  #>  -2818.111327  -3757.975424  12024.121705  -3099.239394   3785.385425  #>          2556          5897          5781          3899          6099  #>   -337.914162    -27.369731    305.750012   6440.788458     67.201238  #>          5524          4317          4638          5654          5285  #>  -1391.755210     -8.618419   4098.338051   2543.761467   -867.318297  #>          4961          3657          5045          6192          5889  #>   -555.727562   1577.024163  -1959.989474  -3326.742024  -5516.706650  #>          4199          2883          6294          4443          3747  #>  -2485.243655     31.977948   4638.018899  -5110.851627   1392.784189  #>          3755          7139          3358          3394          5210  #>   -487.509037    419.361308    878.026660  -1172.426514   2569.613602  #>          2701          3550          5323          4470          5815  #>  -6015.795089   3199.805652   5039.837749   -676.414886   -382.696625  #>          6855          3856          4803          6646          5425  #>   5978.082533  -1879.764787  -1476.283885  -2357.508669     29.378864  #>          3914          4660          4710          6461          3623  #>  -1988.942672  -1829.169229   -384.123303  -3036.584474   5547.176997  #>          2739          5650          3212          6872          6630  #>  -5823.651910   2022.875128   1034.795419   7273.472726  10669.603871  #>          5146          2917          5952          7046          3500  #>   9500.546419  -2355.140552  -1317.053366  -2392.806203  -2952.452293  #>          3592          4618          3649          4653          4117  #>  -4787.494036  -1060.036463    767.847543   7443.840350   7633.513644  #>          6910          3695          4312          3533          4547  #>  -5431.129489  -5076.058402   -782.511661   2009.337819  -3637.741219  #>          4732          2872          4291          6235          6380  #>  -2666.575693  -3613.313892   1246.812314    625.047403  -3504.595436  #>          2697          4333          3813          6647          6076  #>   4028.003785  16337.610147  -5822.882241   -760.896434  -5254.017792  #>          2764          7051          4043          4846          3121  #>  -4064.587344   5782.379851    568.897198  -1547.250966   -984.969221  #>          6528          4380          5982          3719          5784  #>   1560.965951  -4764.026597   5373.500858   3169.452995   1800.197745  #>          5993          6924          4761          3656          4818  #>   1081.828114   -279.267713  -4467.564943  -3971.262529   6562.607578  #>          6541          2779          5230          6481          3411  #>    474.666206  -3223.653317   2640.458335  -7704.589591  -1027.013850  #>          6436          3612          4360          5892          6136  #>   2820.100368   8633.294324  -4451.372452  -1780.827870   8281.234724  #>          6451          4267          3768          5920          4374  #>   -258.065786    419.733887   1101.656216  -8048.516800   1690.629154  #>          7018          5044          7103          3294          5777  #>    975.403038   3546.432766    651.960350  -3721.538534  -4771.673763  #>          3909          5469          5223          6202          4095  #>   1209.427432  -3029.083550   3130.650725    -19.167057  -2581.189066  #>          5089          7119          4784          3388          4002  #>  -1205.047414    485.859618   1909.692400    593.129467    793.072880  #>          2721          6960          4869          6338          3674  #>  -7692.479946   4572.508318   3374.547785     37.256123  -6006.428049  #>          4326          4342          4178          6226          6238  #>   2764.085038  -2693.168242   1966.686991   5773.573199  -4290.604027  #>          4677          6264          6651          3893          6279  #>  11862.477540  -3105.560199  -5307.534794    -96.739101  11428.560914  #>          5260          5945          4613          3630          5062  #>  17070.138767  24092.785352  17654.428862   8013.485873  14520.150193  #>          2750          2762          3508          3191          3072  #>  -3064.250920  12463.643148   5040.531513  10255.065627   2076.175855  #>          4527          3514          7026          4507          5437  #>  -6528.947893  -4837.034256  -3698.367308  -2596.463535   4722.133228  #>          5269          7040          5753          3784          2648  #>  -7266.672488  -6437.591883  -3244.479751 -10713.023384   1717.031914  #>          4911          2771          4574          5691          6059  #>  -4038.688650 -11167.976153   -401.104577  -8362.127351  -4168.494261  #>          4908          3019          3844          4056          2715  #>  -6753.959648  -2138.676312 -14257.423011  -3562.115745  10237.753702  #>          6913          6354          2912          2927          7083  #>   1257.137264  -6386.649401   3037.814447   -154.908565  -5295.485290  #>          5418          4420          5443          6027          2664  #>  -2924.910652   3293.934786    539.275348  -2951.972626  -7010.952309  #>          5734          4997          2926          3173          2782  #>  -1020.618711    880.660415  -4766.988805     -9.646001  -4728.219178  #>          4709          5441          3298          4050          4879  #>   -725.349055   8233.555932    196.843433  -4296.143276   8540.132534  #>          7076          4017          6742          2802          4149  #>  -4302.435581   6457.597382   8358.915812   -285.006238   3853.532584  #>          5980          6893          3217          4588          6538  #>  -2573.643304  -1767.051661  -6287.249491   -275.097069   3554.715727  #>          5666          3310          2905          4324          3037  #>   4377.099400  -3422.597113   3042.721676  -2463.136465   1789.442566  #>          3843          3185          4666          2947          6721  #>   1264.687515   4237.363008   1685.686308   2621.936412   3568.100412  #>          6246          2983          4565          5422          5745  #>  -7617.689337   6770.254387  -1651.785269  -5257.956942   4312.878687  #>          6227          4347          6161          6127          3021  #>    217.235595    353.928691   4552.824644  -3037.400018  -5461.159825  #>          5180          5375          6650          3228          3569  #>   6363.983050    -31.020925  -3315.195424   3869.010393  -7248.604866  #>          7077          4270          4822          5235          3275  #>  -6217.073052   1336.061388  -4089.124768  -1877.200493  -1995.492318  #>          4959          2627          5272          5322          4601  #>  -3807.986522   1616.566183   7895.851914   -126.348582   6737.391337  #>          5258          4069          5148          3882          3307  #>   -184.905908   -888.666200     63.562898   1636.422059    404.413170  #>          5358          2681          5508          5463          6662  #>   -850.191363    586.946871   5158.504011   1667.303814  -8030.703025  #>          2851          5984          6720          5983          5869  #>  -2771.771345   -951.353686  -1498.746104    735.843104  -2301.390716  #>          3105          5026          4814          3734          3267  #>   1821.306213  -6263.965006    875.225387   7250.546491   5080.599001  #>          3601          5981          5577          3931          4503  #>   1153.811703  -5236.581367   5533.834124    287.610279   2750.823312  #>          5543          3323          6205          7032          4145  #>   -969.633131  -2111.794968  -1503.493216   -794.848106   -597.080949  #>          4256          2970          4744          4740          3928  #>  -5324.534876   -220.573969   -651.676632    949.955863   6250.021906  #>          5403          3107          3798          6965          3591  #>  -1260.038430  -2982.715519  -1909.263363   3092.769950  -4647.133043  #>          5332          2957          4662          4563          6442  #>   4514.915466  -3198.237811  -2150.609745   2614.326639  -2336.525667  #>          5574          6896          7133          3197          5130  #>   4658.973059  -3697.508477  -3245.019706    749.902571    401.744898  #>          4924          5702          6937          6399          6018  #>   5271.923033    747.086052   7457.117909  -1101.378268  -5928.214078  #>          6520          5701          6485          4356          5084  #>   6000.455101   -844.810003  -1080.113857  -8289.438681   5627.537456  #>          4413          6881          6446         19888         19002  #>   5899.553147  -5205.711974    700.219364  32337.811764  25115.706480  #>         18315         20371         20862         21386         21124  #>   6859.791136   7966.551248   8931.428240   9585.923406   6726.236086  #>         21694         21420         22630         20981         18630  #>  14227.960166  -3435.207404  -1365.577898    668.715788   2641.972104  #>         18313         18238         21052         22103         19650  #>  13198.546951   7536.020968   3454.651166   5008.502804  -2025.535598  #>         20548         23178         23814         23535         23711  #>  11625.616969   8998.212888   8701.003266  10463.459982   3976.459977  #>         21778         19831         23072         20153         20500  #>   4335.660311   -964.044871  15259.098603   6904.671307   2220.852330  #>         20483         23502         23268         22897         23972  #>   4074.576552  -1329.514200  -4529.071385   -859.692842   5483.827053  #>         18689         22742         21776         19453         19908  #>   2054.896146   -897.071770   4361.053019  -1332.380405  -2580.047528  #>         18589         23641         22342         20947         21075  #>  -3182.362496   5040.891196   1717.602828   4666.992161   5124.690513  #>         23365         21917         20956         22397         23123  #>   -286.733771    845.400364  -1257.871796   6238.865833   2493.583379  #>         20533         19614         18300         18856         21830  #>   8181.635464   2191.765273   4408.890718  -1594.748854    227.655818  #>         19222         22581         19761         19842         23427  #>   2966.482356   1499.638332    544.307417   2994.436791   7279.180789  #>         23480         19824         21803         19318         23274  #>  -5491.622024    129.356374   8047.485036   -617.175768   1923.914023  #>         21617         20287         21937         22381         19784  #>  -3902.127003  -8240.747741  -7244.499195  -4068.340911   -384.690235  #>         21084         20734         18518         19329         22350  #>  -1829.350563  -2487.255281  -1463.588100   2439.048966   1113.027584  #>         23104         18411         23216         19359         23117  #>   4319.404691   6779.303797  -7488.805872  14946.156549  -5169.144991  #>         19382         19665         23051         20991         21044  #>  -5067.537872    457.730367   -762.780083  -1410.559082  -8917.724456  #>         22752         18563         18772         21808         22355  #>   4300.096987   7783.361377   -694.164780    896.831941   1294.292746  #>         21231         23666         20912         18510         18671  #>  -5274.417140    257.894798   6972.677437   -319.917427  -1138.940305  #>         23637         19136         19765         22042         18873  #>  -1307.419242  -3259.194669  15582.144080  -1426.720494    925.926692  #>         19928         22478         23450         20441         22540  #>  -4738.332024   -298.528567   -584.601545  -4365.387424  -1317.204228  #>         20618         19316         20353         19845         21205  #>   2291.509582    -19.619546  -7731.241435  -6337.070595  -2444.059002  #>         19859         20591         22968         22184         20426  #>   2564.268457   6051.707193  -1875.321513    -82.066094   6950.264817  #>         23654         19871         23057         20891         22932  #>   5938.755455  -4925.173236  -2319.349541   1811.516243  -3081.980093  #>         20649         23328         21157         20457         19169  #>  -1857.406663  -1096.993103  -3020.375265  -4847.333662   -935.039421  #>         23576         21825         22360         18652         21962  #>  -4430.349733   1889.798635  -2820.994432  -2582.689270    473.399332  #>         21684         19402         20539         18653         21049  #>    803.496930    202.950005   6268.694955  -3291.990681  -3053.254903  #>         19105         21339         19901         23056         23545  #>   1240.657641  -2096.104529  -1821.192499   -986.709071   2080.866091  #>         21304         22121         23931         19403         20857  #>    249.981344  -1090.751470  -2423.245797   1241.651578  -6496.198060  #>         19726         20770         22683         20207         19143  #>   -488.554247   6063.240921   3555.479432  -2295.769726  -3014.398469  #>         18528         18927         21095         18296         18626  #>   2616.359095  -1897.718724    928.005843  -3295.690751   -289.618647  #>         22140         22709         22236         22470         22066  #>  -3994.831325  -4828.512385  -1135.232711  -2165.898234  -4221.191327  #>         23160         19035         22812         20993         22912  #>   -934.073043  -1977.436222 -14423.831400  -3330.398115   -658.097108  #>         23971         22911         18201         22878         18688  #>  -3028.443419  -3893.073636   -456.712871  -2962.811192  -5439.515216  #>         21121         19706         20386         23896         18687  #>   -260.245447  -6442.241831   1309.263427  -5947.235442  -1826.497659  #>         23761         18408         19530         19680         20678  #>  -1380.013790  -9624.872927  -2558.048982 -13816.940261  -6550.199239  #>         18505         22555         23045         23454         23852  #>  -6116.067265  -5460.745100  -5639.665405    422.400911  -3101.902752  #>         21837         20480         23448         21920         22754  #>  -7724.333691  -1643.404930  -9845.245999  -9230.760533  -3338.734609  #>         20120         22972         19722         22451         19531  #>  -3852.703379  -7201.637097  -1182.640983  -5926.825807  -2535.230347  #>         23991         21023         22857         22590         22513  #>    515.886234 -10476.322803  -3856.397358 -12812.917465   -968.554327  #>         20275         19585         21612          2127           843  #>  -2699.737910  -8837.812545  -6140.668075   -843.723002  14780.265668  #>          1710          1281          1102          1696          1200  #>  -7970.082942  -7167.759291   5658.214703  15682.515729  -2529.701489  #>          2002          1446          2137          1301          2411  #>    161.706227   -675.276178   5958.876266  -1996.232906  -6215.963319  #>          1104          2072          2235          2175          2510  #>  -4097.626539  -5500.760712  -4575.148338   3672.193171   3032.987915  #>          1114          1617          1430          1159          1575  #>   2357.292899  -2355.672579  64878.634794  26525.998089   5284.172849  #>          2022          1240          1768          1254          1510  #>  -4136.789020   5142.091386  -1383.768412  -2893.915921   5476.538056  #>          2246          2036          2104          1115          2321  #>   1005.732565   5202.345538   -866.859406  -5035.687859    668.130509  #>          1890          2239          1728          1265          1428  #>  -5308.254266   -537.468176  -4020.663227  -4715.481016  -2048.571046  #>          2161          1940          1438          2068          1330  #>    762.089328  -6576.491518  -7264.289140  -6614.735105  -6671.564090  #>          1522          2517          2343          1271          1238  #>  -7257.754377   2168.798113  -3211.588964  -7239.774631  -7702.272023  #>          1400          2232          2214          1563          1079  #>  -4675.494808  -5965.854633  -7523.156264  -1668.371799   2331.678616  #>          2327           806          1992          1553          2305  #>  -4087.427740   1384.678895  -1292.618815   5262.734759   3484.399564  #>           967          2216          1022          1971          2431  #>   5325.752776   -133.294454   2244.545993   9324.697213  -3789.212351  #>          1369          1307          1506          1455          1581  #>  -5330.758875  -2417.923207   1934.972375  -6199.768388  -1938.818328  #>          1598          1589          1270          2318          1226  #>   -627.693166   5700.750587   4530.201562  -4853.394699    210.892914  #>          1972           903          2391           859          1469  #>   6967.542928    430.921444   1153.478602  -7290.681741   4092.610910  #>          2003           824          1819          1916          1898  #>  -5509.821968    -10.042330     78.182631  -4893.102446   3076.973619  #>          1148          2167          1242          1206          1936  #>    393.359779   2863.796098   1971.134233   1185.360320  -1004.823240  #>          2262          1336          1162          2501          2507  #>  -3352.655930  -2146.487349  -1789.438369  -4526.082304   -661.975676  #>          2434          2344          2390          1947          1709  #>   4204.573086  -6358.759172  -4696.720669   7202.333990   2474.956362  #>          1706          1143          1141          1754          1138  #>  -7045.744209  -2009.600510  11128.321751  -5381.539373   4337.959274  #>          1646          1843          1291          1250          2356  #>   1829.577476   1190.831383  -1064.845413  -6234.707546   1132.993381  #>          2301          2460          1144          2477          1878  #>    -33.344352  -3313.951073   4787.317526   3417.805411   5455.051849  #>          2043          2306          1930          2331          2264  #>  -8213.837985   2806.882199  -1898.738932  -1013.056327   5326.540876  #>          2187          1033          1567          1376          1039  #>  -1636.211177   3934.146529  -2661.209492   7234.709526   7526.642584  #>           987          1187          1834          2408          2285  #>   -640.186843   1509.841432  -7677.581282  -1923.553776  -7474.483655  #>          2351          1317          1729           878          1657  #>  13959.679218  -5095.534547  -4650.151817    906.680792   2756.126723  #>           939          1158          1150           812          1525  #>  -4979.499545  -6551.191571    357.976015   5254.742585   2650.831554  #>          2174           891          2006          1103          1659  #>   3778.112692    255.089126   1200.102530  -5280.981849  10488.039160  #>          1486          1602          1462          2265           930  #>  -4529.700065  -5528.434033  -1366.065778    851.709528   3597.751497  #>          1391          1994          2362          1557          1063  #>   1790.136917   3806.877382   7231.217470  -4395.934519  -4191.941698  #>          1632          1619          1278          1808          1726  #>   -464.099634    216.604379   -741.146048    759.175322    462.420347  #>          2150          1331          2144          1977          1080  #>   1952.494317 -15082.298900  -4849.037486   5391.201154    -79.931605  #>         10177          9814          9972          9967          8819  #>     45.279889  -6248.338642  -5828.997721  -2191.637684   1945.621684  #>         11461         11711          8986         11599         10250  #>   3146.650959    -59.532064   6818.614274  -3200.284557   1952.718459  #>          9306         11061         11146          9265         11762  #>   2065.713895   3097.479286    952.115271   2330.070668   -260.048079  #>         10020          9362          9930         11243         12167  #>   8783.864652  -6132.945785  -2609.300473  -2404.744632  -1743.525317  #>         10982         11544         11657          9132          9628  #>    609.451003   3387.316296   2651.691576  -6330.054022   9566.708720  #>         11869         10387         10373          8955         10857  #>   1489.104397   1914.885425  -3401.581549   -514.037817  10918.125200  #>         11320         10178         11928          9237         10444  #>  -2522.421931 -13202.893061  -4056.975327    255.240294    703.101034  #>          9685         11596         10697          9809          9525  #>   1124.006855   2696.134747  -1244.306005 -12830.782704   3778.657147  #>         12012         11355         10412          9701          9957  #>   5821.308767   5885.123456  -1902.923905   7650.731814   2355.980105  #>          9945         10244         10891         10396         10480  #>  -1501.810647  55121.804020  15188.596217  29284.040458  13152.362323  #>         10194          8839         11910          9023          9560  #>  22502.194341   3732.171358   5738.277067   1484.452778   6810.742242  #>          9385          9616         11849         11117         11523  #>   -795.581698   3282.655010  -3908.478931 -16556.145001   2007.790965  #>          8821          9914         10144          9652         10714  #>  -5654.000793   4126.820291  -8272.853118  -2699.690306 -10613.519884  #>          9444         11089         10741         10034          8923  #>  -6761.783401   5503.450829   -392.648916 -10315.783950  -6316.189940  #>         10180         10656         11803          9354          9098  #>   4667.408303  -8071.813895  -2337.580091    368.091651  -3985.072583  #>          9155         10551          9821          8933         12046  #> -17726.047249 -14133.239069  -4855.267204   1907.859748  -8885.510829  #>          9179         11064          9263         10816         11854  #>   3260.158907  -8463.403663    421.743390  -4710.342483  -7876.151150  #>          9727          9742          9927         10504         12005  #>   2756.434136  -6230.917625   5346.699946   1852.275587  -5968.237311  #>         11242         10826         11138         11452         10246  #>  -1336.402901    376.399149  -5551.016560   3647.147231   4903.016339  #>          9588          8879         10100         10704         10983  #>  -2311.603752  -5562.390800   -575.383824  -3614.622659   1472.120158  #>          9365         11344          9310          9710          9050  #>    720.908409   2823.711422   2872.907043    472.047677   -704.451832  #>         10342          9593         10159         11693         10798  #>   3109.550228   1108.930433   9980.539289   -212.679607    376.661154  #>          9912          9236          8999          9347         11489  #>  -5798.449422  -7894.060162   1677.185803   6618.955712  -3359.363411  #>          8939         10768         11568         11983         11141  #>  -1136.354895   7713.620600   1337.816432  -5084.979984   3463.994785  #>         10426         10574         11270          8945         11057  #>  -2073.127693   1488.219011   3264.914004  -1181.656096   -384.302285  #>         10460         11993          9948          8962         11241  #>  -3009.311703  -6187.765977  -5730.056907   8970.772532   1788.947522  #>         10275         10678         10613         10732          9953  #>  -4178.982423   2802.720755  -1814.925066  -2342.724041   -901.791687  #>          9296          9129          8917         10050         11373  #>   1243.976127  -4073.271699   2981.553567     34.344087   2405.192248  #>         10571         11601          8984          9400         11075  #>  -1886.782478   1660.507825   1513.374805    495.849197   2523.758704  #>          9268         10132         10490         10895          9554  #>  -4320.735345   4321.912152  -1333.783457  -6422.650547   1140.201812  #>         10397          9623          9718          9174          9925  #>   2002.315729  -1654.981923   1297.621473    493.313237  -1761.728728  #>          9269         11187         11746          9323         10783  #>  -1306.866649  -1096.587974  -3249.007180   1423.525955   4482.105646  #>         10663          9102          9085         11404         12101  #>  -1173.274684  -5006.456745   3927.257076   -658.863855   2032.074877  #>         10367         10575         10659          9979         10258  #>  -2132.717515   2199.424345  -4078.073879    534.014561  -4391.789101  #>         11215         11221          9032         11960         11212  #>    450.306178   2153.500826   2645.279342   2146.423208      6.580195  #>          9576         11499         11000         11391          9559  #>   3606.075582   -903.852250  -6858.530715  -3118.431376   2547.303655  #>          9187          9455         10938          9811         11982  #>   2953.289965   2656.542266    536.774302    772.756723  -4053.863249  #>         11705         11235         10458         10985         11625  #>  -1757.565709    549.191513  -1820.184252   5001.934428  -2935.680280  #>         11441          9071         12182          8820          9311  #>   -898.753211  -1525.776852  -3834.396898   2554.200132   4172.034265  #>         11511         11925         10949          8870          8989  #>  -3479.820359   3510.185429   1800.178705    -69.891225     22.414556  #>          8907         11926         10805         11228         11552  #>   2478.253858    926.138654   -538.519137  -1901.260288  -3157.460250  #>         11988         11924         10845         10221         10164  #>   -939.526762   1842.277331    989.653430   1951.254245  -4177.170876  #>          8990         10438         12177          8898          9956  #>  -2046.806609   2222.432270  -2996.106348   -679.846944  -2999.487544  #>         11119          9259         11385         10472         11115  #>   2509.999253   3377.287457  -4124.436780   2444.981303    379.756795  #>          9391         10318          9806          9496          9603  #>   5092.654469  -3694.460452   -458.808735  -1367.490426   1670.228741  #>         11976          9290         10781         11247         11660  #>   2925.704566   2986.427014  -2134.780683   5473.999738   1297.902547  #>         11686         11245         12197          9314          9822  #>  -2129.534388  -1170.031092   1097.336613    812.258855   2091.650175  #>         10818         11673         11600          9539         11312  #>   2519.345964   3142.866668  -6207.275161   2500.386426     59.922972  #>         10152          9543          9725          9441          8997  #>   -840.858167  -4604.761298   1656.771315   2090.923475  -3261.719927  #>          9470          9599          9332         10716         12038  #>   2666.402104  -1639.015339  -4118.393830  -1848.288395   -828.314159  #>         11121         10384         11033          9653         10266  #>  -2865.673942   -613.005592  -1960.731171  -3589.998915   3845.865029  #>         12054         10173         11459         11745          9621  #>   -890.872457   6778.200484   1104.933336   3494.487507    835.982715  #>         11400         11724         10990         11464         11533  #>  -3142.907329   7230.217616   1308.560970   4095.544414   1880.377623  #>         11184         10245          8862         10352         12055  #>  -6014.442710   4062.270084    406.579734   1594.817817   3947.985818  #>         11267          9196          9239         12052         10263  #> -15550.617025  -7434.293059   2976.371117    225.712124  -1190.240624  #>          9080         11977          9650         10875          9799  #>  -2670.254457  -4640.124064   1457.281389  -2658.090298    838.603219  #>          9421          9230         10578          9136          9257  #>   2162.689394  -1546.294498  -5309.037929   3252.681479    357.993932  #>          9991         11820          9776          9304         11760  #>   8215.405274  -2619.228092  -4108.705497   2763.412502  -3231.229193  #>         10959         11806         10035          9955         11313  #>  -1226.816284   3223.860146  -1920.584981   6060.148578  -6593.163313  #>         11343          9973         11702         10327         10635  #>  -1862.661359   5223.761845   1997.577598   2978.047150  -3734.664986  #>         11832         11594         10370         10603          9475  #>  -1839.376817  -1450.547742  -3822.892604  -2280.804955  -2415.825548  #>         10828         11011          9531         10851          9204  #>    988.088925   2994.391586  -4829.711661   5093.566700   2335.587071  #>         10225         11195         11517         11013          9022  #>    676.208904   5252.512677  -3739.267562   -103.110885  -4476.640618  #>          8875         11036          9712         12111         10793  #>  -2791.939557  -1175.329684   -689.944851   5370.756806   6375.171424  #>         11737          9573         10935          9639         11194  #>  -1546.436825  -4456.752913    433.791034  -3027.185156  -1947.443605  #>         10165          9031         11092          9882          9894  #>  -1214.230642   1195.144247  -2183.330522    830.269178   6422.942123  #>         11018         10282         11741         11363         11575  #>  -4891.708615   7837.196113  -2577.122308   1908.769234    786.672555  #>         10273          9772         15687         17545         14717  #>     78.131006   1486.049792  -5264.059633   2666.346509   2496.518249  #>         15060         17725         16189         15752         17687  #>   3645.188292  -4987.085935   2934.999616   4419.191564   3876.272015  #>         14326         15530         15393         16553         18141  #>  -3937.823136   2759.189220   3545.989200 -17684.344564  -4503.054142  #>         17346         16330         17591         16567         16093  #>    -40.145656   1621.694297  -2526.457157  -3530.451121   1373.736171  #>         14153         14737         15396         15526         17243  #>   4046.882047   1085.026029    740.311902   3805.282669   3758.753093  #>         15089         15551         16212         15767         16529  #>  -1908.461225  -9419.956110   -582.886455  -1986.981392   3943.367103  #>         16406         15430         16153         14782         17551  #>   3105.842496   -207.575705   4062.865151    -17.782440   3650.842400  #>         15569         16666         14279         14838         16030  #>   -943.381759  -3136.725276    154.095345   1655.624469   5973.425198  #>         17605         17513         16887         14126         17382  #>   -895.704459  -2929.229155  -5175.159467    887.266127   3201.228647  #>         15111         15021         17809         16245         16899  #>  -3160.120937  -6048.364188  -3580.812814   1252.272194   5098.216910  #>         17481         17230         15348         18084         16215  #>   2059.643448  -9186.193005   2642.360935  -1737.051500    315.820031  #>         15876         17557         15770         17985         18037  #>  -1068.618931  -2873.603977  10598.730226   1252.429343  -4522.974431  #>         17894         17070         16275         17300         16101  #>  -1160.648571   1064.755611   -996.830530    771.224986   1119.858469  #>         16752         15801         16410         15573         16796  #>   1409.057148  -3742.883259   4202.674410  -2481.661540  -6452.586452  #>         16983         15261         17991         17603         15892  #>   3403.347561   1293.922924  -1804.855919   1218.437918   9008.009331  #>         17778         17363         16356         17960         14550  #>     72.770927  -8582.973806   4413.696159   1678.699026  -3710.755432  #>         17458         17071         14251         14296         17433  #>  -2763.690004   5895.598409  -3220.684914  -4585.182512   1658.764513  #>         14463         18023         14212         17879         15595  #>   8098.727325   2462.445035  -5159.041096   6259.904192  -2771.837521  #>         17743         16656         17207         17881         15705  #>   4093.897008   -522.749516  -1827.019849  -2892.634006  -4038.282081  #>         17826         15813         14746         14539         17386  #>   5308.814443  -2304.737157   3843.334471   1048.634639   1340.912324  #>         18117         16398         15697         16512         16094  #>  -2901.216667  -3868.732014  -7235.136621  -2515.538882    106.855939  #>         16799         16766         15134         17415         14670  #>  -8415.869109   7591.957310  11559.187860   2477.536715  -1764.387540  #>         16949         17804         15367         14571         14118  #>  -3692.771227   2159.117397  -1868.193726  -5419.939014  -2929.883876  #>         17723         17857         16450         16412         16176  #>  -3739.456235  11852.768389   5118.828513  -8541.462963   5218.817658  #>         15839         16283         16542         14294         14761  #>   3011.213266   2937.285348   -653.402431  -3812.660290  16043.441372  #>         15545         16904         16448         17111         15746  #>  -3785.419248   2531.537338  -1754.416176   5082.170709   8358.718072  #>         16896         15187         17412         17594         17038  #>   3141.756934  -1165.342611   3247.949469  -1290.189939  -1093.260458  #>         16313         18107         15541         15211         16982  #>  -5063.456954   -958.834617   -278.546702   -344.976792  -3354.441861  #>         16280         15167         16551         16111         17767  #>  -1517.484755  -3296.343482  -3643.333555  -5647.242469   5410.552838  #>         16321         14104         14412         14527         17232  #>  -6778.642061  -3530.516461   7972.503074   4245.414694  -3151.639155  #>         16698         15643         17929         16217         15076  #>   4577.492922  -1607.563356  -3566.486191   1685.008050    983.812527  #>         15219         17720         16106         17099         18073  #>   9522.638894   4073.614229    606.472012   6181.102726  -5478.476384  #>         16365         15164         17287         15181         15868  #>   8833.616154   2685.111679   5818.823473  -4578.769697  -3377.880890  #>         15046         16779         16797         17485         15124  #>   -785.756421   8019.824964   1452.050563   3520.813033   1980.504613  #>         14509         16657         17254         17131         15672  #>   1225.108637   6653.548179  -1399.704528  -1997.295112  -1419.324720  #>         14894         15065         15910         16371         14702  #>    170.513620  -2644.648379   1825.658040   1064.192921   -565.762396  #>         15623         17352         14547         15288         18120  #>  -1809.585555   2407.517065 -12112.181562   -312.398970 -12866.322358  #>         15378         17127         14768         15954         15271  #>  -3798.103185   3307.927241   5006.636489  -5799.041981  -2516.883831  #>         14866         17209         16080         17941         15395  #>   3495.962188   -697.793699   3451.430790   2995.003416     89.926376  #>         14956         15009         17827         15809         15090  #>   5037.901810  -3461.581158  -5249.541327  -1831.726922  -5552.063567  #>         15237         14295         17241         16304         16487  #>  -4458.998888  -7323.731086   5384.926108  -4313.702812   -662.233298  #>         17837         14622         17704         17039         16205  #>  -4598.112873    660.874955   6119.860843     67.598539   2011.523727  #>         16002         17281         17657         17156         17543  #>  -7668.559542    -54.075598  -3726.369987   5411.529821  -3592.175303  #>         17538         17672         14333         16876         17197  #>   4472.273958   1359.959740   3155.240798   2990.444386    198.282037  #>         16329         14842         15727         16524         16635  #>   -765.173710   -180.182116    -60.918273  -1271.220870  -4140.672450  #>         14573         14522         15983         15515         16198  #>   -942.454539   1221.211547   7309.268977  -8911.063171  -1943.996581  #>         16174         14798         14677         16823         17866  #>  -3927.035191  -1040.458732   2029.488039    790.074520  -1545.801762  #>         16034         15640         16102         17370         16183  #>   1224.101285   1522.725950  -2297.801129   4622.208547   1725.165330  #>         15665         14417         16764         14767         15890  #>    511.501838  -2838.542024    270.436567  -1233.661930   5823.953026  #>         14282         14394         17549         17921         14735  #>   2027.017275  -2171.444586   -221.731378  -2956.118682  -3169.284182  #>         17912         15554         16496         17624         16862  #>    884.948846  -4439.649105   4140.752801   3825.720152    595.541892  #>         15282         15928         15511         14432         17527  #>   -660.960666   2274.160327   -824.964990    970.861033  -3162.064796  #>         17951         14559         16702         15691         14887  #>  -4165.743080   3616.803860  -3197.186955   5033.435239  -1055.788017  #>         17566         17599         16746         17121         16372  #>   5008.724082   1970.696205   -650.521260   1296.785687  -3538.978291  #>         16105         15810         16622         15079         16977  #>  -3844.890134  -7959.814939   -323.589458  -4658.207823  -4320.608510  #>         15432         16962         16641         16375         15421  #>   2986.047466  -1441.185418   2786.823127   -810.762560   -513.679930  #>         15100         16873         17178         17247         18041  #>   -289.196607  -4634.412182    103.864589   2699.493488   1978.034944  #>         15581         17629         14731         17356         17546  #>  -3056.004529   9015.937289    545.243099    314.006200  -1319.867838  #>         17421         17635         15295         15674         15109  #>   3985.742717   2748.631653  -5657.740305   3505.418487   2205.942016  #>         17764         14773         15478         14284         16314  #>  49153.845304    915.004261   3559.816968  25731.835769   3634.696572  #>         16604         14178         16814         15807         14270  #>   1292.335057  -4435.039964  -4084.773563   -598.867511  13647.678690  #>         15016         17216         18108         14499         14951  #>  -5103.907136  -2284.975002  -4546.757023  -3968.279427  -4236.299034  #>         16889         14166         15034         14651         16582  #>  -8036.763073  -1580.369708 -10482.258857   2084.467333  -4683.882716  #>         17777         14812         14910         16022         17153  #>  -4828.243934  -6382.857366   -160.097285  -5325.292568   1704.615803  #>         14633         17378         15206         17668         16173  #>   1985.440819   4586.464830   -325.073530  -2137.891518  -3896.369651  #>         15616         14513         17942         14516         17783  #>   1976.741531   4767.871285  -6989.954081  -1690.129868  -1839.047362  #>         15766         17656         16436         16229         16326  #>   1385.629411  -1032.958772   7198.133799   -635.853442   4028.394408  #>         17604         17418         17797         15897         16433  #>  -4437.857395    431.263779   2661.386115    852.284991   3283.252501  #>         16562         15180         17745         15977         17148  #>  -1724.605361   -288.963724  -4620.323095  -1150.708041  -3831.957386  #>         17899         15014         14836         14387         17313  #>   2146.567925  -6407.373420   3074.934332    224.862758  -7790.986261  #>         15260         14248         16339         16359         15495  #>   4903.353672    -14.527054   3257.581243   -397.663667  -1653.167218  #>         14156         14526         16624         15960         14456  #>    -56.631254   3161.209528   7825.990263   -194.642263   2173.709192  #>         15047         16112         16568         15538         15648  #>  -5640.378692   2104.545461    799.615424   8079.584096  -5156.992251  #>         17371         17196         14930         14708         17358  #>   -588.510668   5420.617926      2.069414  -2903.624401  -4287.892012  #>         17729         17943         15592         17284         17612  #>  -3119.954350  -2588.651919    -18.047677 -10060.971570  -3149.789221  #>         15591         16926         16488         15520         15695  #>  -3924.654881  17578.415553  -2409.571240   1389.530852   1850.956002  #>         16906         16133         16680         14854         14198  #>  -2375.472538    645.285513   2058.732681    393.143196   1164.159227  #>         14436         16050         15188         14784         17262  #>  -3392.551060  -3025.555308    632.896716   3655.090375   2501.514447  #>         15578         17208         14233         18043          8684  #>   1449.553638   -408.263927  -7319.808919    -72.280827   4386.676411  #>          8490          8215          8173          8806          8698  #>  -5382.176603  -1791.050995    332.930100  -9425.904781   -803.015544  #>          7207          7801          7951          7369          7959  #>   2342.470449  10947.928877  -6047.973241   4318.965347   1851.338040  #>          7974          7712          8489          8470          8257  #>   -416.031102    154.442473  -1060.308149   1035.668673   1222.929985  #>          8415          8185          7440          7928          8401  #>   1758.426220     74.543127  -3712.220223  57512.212843  40978.390085  #>          8793          7522          7823          7458          8792  #>  19082.565949  16836.659022   8609.832359 -11991.091581  -7043.699801  #>          8182          7506          8172          8305          8241  #>  -2229.040111   6570.826296   8174.369390  -4812.693447  -5478.998515  #>          7762          8383          7659          7860          7937  #>  -1293.367134  -8979.638978  -7250.457055   -618.576371   4205.914803  #>          7400          7358          7555          8131          7723  #>  -5923.931531   7921.121783  -9016.920109   -551.653482  -8528.022078  #>          7175          7693          8283          7282          8585  #>   1912.531643    772.953478  12321.548682  -6475.255407   1035.959922  #>          7887          7368          8304          7151          8550  #>  -7958.736477   3233.992701  -4041.121101  -5046.442259 -10474.104867  #>          8743          8442          7415          8484          7608  #>  -7716.304328  -3621.650708   -826.518665  -4001.366511  -5636.250975  #>          8524          7563          8503          7541          7347  #>  -7751.437814  -3908.862931  -2162.858705  -1970.962093  -7677.707654  #>          8019          8646          7310          7921          7198  #>   3930.762002  -2989.219822  -8128.555537  -9241.166193   5866.934493  #>          7678          8054          7891          7201          8673  #>   8113.051823   6516.148607   4397.096974  -1880.459130  -4459.737089  #>          8030          7319          7834          8269          7656  #>   -196.586486  -2783.976947  -4382.202339  -1172.592458   3629.818592  #>          7324          8132          8548          8149          8695  #>   2167.066788   4852.299144   2538.101513  -3579.676082  -5221.247454  #>          7852          7225          7241          8794          7390  #>   2984.556338  -1629.902425  -1618.261042   2392.863163   1561.584433  #>          8779          8418          7278          7374          8116  #>  -2134.312791  -2229.881940   3217.642303   -230.951165  -1640.012444  #>          8668          7254          7618          7213          7917  #>  -2559.703786  -2062.101338  14112.106947  -1648.500178  -1484.409604  #>          7750          7216          7696          8652          7565  #>  -1801.484851  -1720.422310  -1654.352075    317.003821  -4584.796525  #>          8554          8678          7460          8200          7174  #>  -1059.264462  -1649.866753  -1386.634434   3209.349943   -535.632464  #>          7370          8008          8660          8628          7579  #>   2186.687635  -1755.052706  -9444.625119   4655.862877   -667.946529  #>          7551          7397          8535          8113          7614  #>    142.429427  -2776.857205    549.956194   1102.388134  -2793.717263  #>          8525          8584          7539          7545          8421  #>  -5635.353990   2156.015103   6189.435050    642.459557   3054.450373  #>          7807          7277          7236          7802          8244  #>    192.208294   5040.101035  -3013.332405  -2038.068693   1210.395996  #>          7683          8193          8701          7583          7797  #>   -230.396683   1195.886572  -2670.439799    952.884005    908.254629  #>          7217          8370          7493          7900          7716  #>  -2263.304059  -1864.950754   -599.296573  -1580.235430   1074.496821  #>          7269          8500          8683          7352          7455  #>  -1937.632197   1731.156853  -2382.863537   2752.782657   4302.281554  #>          8015          8349          7816          8092          7463  #>   1462.838582  -1800.730040  -8980.814577   1990.996904   6137.390834  #>          8192          8296          8681          7387          7655  #>  -3281.548466  -1712.756254   -206.111110  -8267.277562   3303.604110  #>          7484          8483          8112          8583          7306  #>   3508.753001    774.209582  -1889.394864   1301.701279  -4412.382526  #>          8186          7361          8188          8776          8765  #>    167.124006   1679.747274   3180.073354    564.619000  -2915.926725  #>          8265          7606         12499         12519         13355  #>   1067.041003  -3573.396780  -3358.974239   1179.127620  -4563.386746  #>         13460         12220         13587         12670         14011  #>  -1385.696935    309.625216   7624.937805  -1466.549714   2698.735606  #>         12498         13400         13730         12435         12271  #>   5773.663572   2366.026716  -2296.184067  -1965.734094    139.639557  #>         12204         13659         13451         13097         13072  #>  -1883.050782  -2455.880486  -4357.833950  14060.282598  10371.358701  #>         13364         12485         14070         12355         13525  #>   9576.679664  -1222.357560   5852.235093  -3416.480758  -4640.401695  #>         13592         12819         12929         13781         13706  #>   7630.904144   3515.364349  -5466.921152    795.577521  -4774.923093  #>         13073         12884         14064         13412         13229  #>    679.987055   2602.865446    711.280111    706.397207  11969.636850  #>         12641         13345         12521         13971         13873  #>   2812.345161  -3048.991730   8157.571823  -2223.329516   -993.056599  #>         14006         13504         13623         12280         13863  #>  -3069.924346  -1658.020792    584.982404   -719.709691  -2835.345928  #>         13784         12847         13134         12292         13107  #>  -4504.180767  -1537.882222  -4100.544691   -626.034512   4225.850675  #>         13663         12541         12544         13972         12323  #>   2217.702494  -1169.471542   6141.149697  -3059.786405  -3591.677719  #>         12506         13802         13657         12676         13026  #>  -3738.917986  -5351.864957      1.817313  -5235.627440  -3776.424304  #>         12552         14025         12917         13805         12467  #>  -2734.285953  -2711.832132  -6907.379918  -1214.918831    147.456308  #>         13727         13960         12440         12668         13669  #>    758.027295   5948.962335   2410.703631    835.976570  -1018.486339  #>         12744         13932         13304         12860         13410  #>   5840.863048  -4399.415700  -2934.977916   4737.228536   8444.450811  #>         13740         13829         12566         12226         12903  #>   1450.954904  -5667.993337  -1939.580885   6207.095941  -8101.596858  #>         13415         12721         12526         12284         13593  #>   6476.900049   -219.109512  -4112.572412  -5036.490698  -6720.441334  #>         13237         13335         13930         13330         12354  #>   -829.846347    107.771594  -2064.293011   1823.359224    855.103838  #>         13479         13203         13422         13480         12408  #>   -241.594818   4064.350920  -4335.806447   -937.770693   1842.288645  #>         12912         13036         13148         12951         13366  #>  -2106.714091   1361.964118  -1664.306611  -3663.427431   7556.347798  #>         13205         14027         13601         12558         12948  #>  -1471.096288   5211.092095  -1330.900486    390.734214    988.608738  #>         13315         13869         13754         14014         13676  #>   2811.835817 -14660.411934   4139.357581   3698.465247  -2982.299629  #>         13081         13114         12629         13098         13370  #>    167.672710  -3658.904711  10960.408296  10997.720595  -4003.492186  #>         12701         13874         13913         12883         13538  #>  -6787.057471  -1506.627226  -2663.462740  -3030.403428   1531.867721  #>         12852         13372         12208         13537         13747  #>  -1442.633465   2071.033960  -1809.094399   1637.338126   4365.816228  #>         13417         13096         13895         13003         13691  #>   -189.268568  -3165.801094   4251.173466   2453.545482   4659.916545  #>         12839         13289         13683         13697         12780  #>   -349.323482   2582.944361      4.583692  -1370.485298    104.978611  #>         13405         12334         13236         12245         12438  #>  -7274.472070  -2977.413265  -1047.422445  -3338.029491  -7826.319330  #>         14081         13300         13210         12719         12745  #>   5380.581917    623.209084  -2506.578698   -140.997813    306.400223  #>         13214         12770         13862         12812         12663  #>   2524.856872   -514.179320  -2485.144917  -4370.456243  -1495.131968  #>         12980         12889         12484         13590         13047  #>   4392.505444   2018.374953  -1449.126902   2719.902936   2155.300459  #>         13102         12809         13216         12657         13524  #>  -1112.014264   2033.219513  12098.870455   2158.824904  -4386.640234  #>         12873         13981         12601         13542         13644  #>   5017.430201  -8254.993872    250.639165   -813.612223   1211.733668  #>         13263         12611         12970         13363         13746  #>   -573.454204  -1104.227141  -4237.513189  -1470.578162  -1231.680112  #>         12619         12845         12844         13273         12764  #>   1147.351047  -3353.585400    401.581206   1044.607314  -3364.672664  #>         24339         24478         24485         24843         24682  #>  -3010.722527  -5817.689352  -4174.752006   4059.499637  -1306.636079  #>         24367         24217         24078         24276         24416  #>  -2532.639981   -608.360945   5568.317061   3938.408005  -2060.811489  #>         24628         24517         24844         24327         24981  #>  -2202.836828  -1284.075323    818.398363   1396.222416  -2014.424882  #>         24631         24716         24761         24354         24240  #>   3423.816451    904.606104   6518.622435   3573.538046   2495.244330  #>         24647         24757         24231         24899         24398  #>   7804.205893   3687.365665  13832.221158  -2579.520393  30379.774258  #>         24248         24274         24528         24812         24257  #>    444.204537   9404.630599   4093.353992  16483.983871     15.117533  #>         24636         24880         24114         24876         24765  #>  -2751.251326   4114.209189   -287.713413  -6944.705887  -4212.560120  #>         24611         24376         24629         24476         24709  #>  -9369.108198  -6524.851652  -2368.688594   2058.115287  -3685.186116  #>         24389         24973         24999         24491         24132  #>   2712.922346  -2896.434523  -6579.787837 -10963.413247  -8362.345921  #>         24686         24352         24034         24625         24130  #>  -3907.089137  -1291.045990   2211.544959  -5582.000650  -4596.828199  #>         24211         24787         24545         24410         24154  #>  -5695.023694  -3002.300263   5279.692961   2945.232346   3866.275491  #>         24298         24856         24346         24074         24355  #>  -5423.364363    915.750370     76.578129   4718.899169   7393.250163  #>         24914         24887         24770         24309         24035  #>   2140.659587    -56.422443  -1590.312959  -5886.260817   1353.869169  #>         24305         24987         24282         24639         24449  #>   2660.689903  -3807.242508  -3202.599749  -1944.760011    613.902113  #>         24548         24432         24041         24764         24758  #>   -782.203296  -2336.567250  -3255.080342  -3133.238859    206.078883  #>         24726         24382         24780         24379         24081  #>   -903.579773    910.809537   8641.364370  -4925.091256    140.896264  #>         24549         24359         24729         24604         24392  #>   7307.980517     81.950382   2979.507651  -3410.556377   1925.002074  #>         24453         24662         24277         24236         24455  #>    294.254421   -942.138459   -402.034855  -2084.429511   4564.669238  #>         24505         24529         24118         24017         24417  #>  -9788.376497   8344.245576    425.202305   1563.323423  -2640.461996  #>         24730         24396         24247         24296         24384  #>  -1242.032710    213.436241  -3098.658369  -1049.305298  -5880.269810  sigma(model1) #> [1] 5703.931 # }"},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"function enables use Mixed Effects Random Forests (MERFs) applications Small Area Estimation (SAE). Unit-level survey data target auxiliary covariates required produce reliable estimates various disaggregated economic inequality indicators. Option meanOnly saves computational time users interested estimation domain-specific means using unit-level aggregated auxiliary data. Predefined indicators include mean, median, quantiles (10%, 25%, 75% 90%), head count ratio, poverty gap, Gini-coefficient quintile share ratio. MERF algorithm algorithmic procedure reminiscent EM-algorithm (see Details). Overall, function serves coherent framework estimation point estimates requested uncertainty estimates indicators. Methodological details found Krennmair & Schmid (2022) Krennmair et al. (2022b). following examples showcase potential applications.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"","code":"SAEforest_model(   Y,   X,   dName,   smp_data,   pop_data,   MSE = \"none\",   meanOnly = TRUE,   aggData = FALSE,   smearing = TRUE,   popnsize = NULL,   importance = \"impurity\",   OOsample_obs = 25,   ADDsamp_obs = 0,   w_min = 3,   B = 100,   B_adj = 100,   B_MC = 100,   threshold = NULL,   custom_indicator = NULL,   initialRandomEffects = 0,   ErrorTolerance = 1e-04,   MaxIterations = 25,   na.rm = TRUE,   ... )"},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"Y Continuous input value target variable. X Matrix data.frame predictive covariates. dName Character specifying name domain identifier, random intercepts modeled. smp_data data.frame survey sample data including specified elements Y X. pop_data data.frame unit-level population covariate data X. Please note column names predictive covariates must match column names smp_data. holds especially name domain identifier. MSE Character input specifying type uncertainty estimates. Available options : () \"none\" point estimates requested, (ii) \"nonparametric\" following MSE bootstrap procedure proposed Krennmair & Schmid (2022) Krennmair et al. (2022a) aggData = TRUE. (iii) \"wild\" nonlinear indicators proposed Krennmair et al. (2022b). Defaults \"none\". meanOnly Logical. Calculating domain-level means . Defaults TRUE. aggData Logical input indicating whether aggregated covariate information unit-level covariate information used domain-level means. Defaults FALSE, assuming unit-level covariate data. smearing Logical input indicating whether smearing based approach Monte Carlo (MC) version point estimates obtained estimate (nonlinear) indicators. MC used computational constraints prohibit smearing approach. theoretical details see Krennmair et al (2022b). Defaults TRUE. popnsize data.frame, comprising information population size domains. needed aggData = TRUE MSE requested. Please note name domain identifier must match column name smp_data. importance Variable importance mode processed random forest ranger. Must 'none', 'impurity', 'impurity_corrected' 'permutation'. concept variable importance needed production generic plots plot. estimation domain-level means aggregated covariate  data, variable importance needed rank information process finding suitable calibration weights (Krennmair et al., 2022b). information regarding measures importance see ranger. OOsample_obs Number --sample observations taken closest area potentially unsampled areas. needed aggData = TRUE defaults 25. ADDsamp_obs Number --sample observations taken closest area first iteration calculation calibration weights fails. needed aggData = TRUE defaults 0. w_min Minimal number covariates informative weights calculated. needed aggData = TRUE. Defaults 3. B Number bootstrap replications MSE estimation procedures. Defaults 100. B_adj Number bootstrap replications adjustment residual variance proposed Mendez Lohr (2001). Defaults 100. B_MC Number bootstrap populations MC version point estimates (nonlinear) indicators. Defaults 100. threshold Set custom threshold indicators, head count ratio. threshold can known numeric value function Y. threshold NULL, 60 % median Y taken threshold. Defaults NULL. custom_indicator list additional functions containing indicators calculated. functions must depend target variable Y optionally threshold. Defaults NULL. initialRandomEffects Numeric value vector initial estimates random effects. Defaults 0. ErrorTolerance Numeric value monitor MERF algorithm's convergence. Defaults 1e-04. MaxIterations Numeric value specifying maximal amount iterations MERF algorithm. Defaults 25. na.rm Logical. Whether missing values removed. Defaults TRUE. ... Additional parameters directly passed random forest ranger. important parameters instance mtry (number variables possibly split node), num.trees (number trees). details possible parameters see ranger example .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"object class SAEforest includes point estimates disaggregated indicators well information MERF-model. Optionally corresponding MSE estimates returned. Several generic functions methods returned object class SAEforest. full list explanation components possibilities objects class SAEforest, see SAEforestObject.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"MERFs combine advantages regression forests (implicit model-selection robustness properties) ability model hierarchical dependencies. MERF algorithm iteratively optimizes two separate steps: ) random forest function, assuming random effects term correct b) estimates random effects part, assuming OOB-predictions forest correct. Overall convergence algorithm monitored log-likelihood joint model components. details see Krennmair Schmid (2022). Users interested estimation domain-level means set meanOnly = TRUE. MERF requires covariate micro-data. function, however also allows use aggregated covariate information, setting aggData = TRUE. Aggregated covariate information adaptively incorporated calibration-weights based empirical likelihood estimation area-level means. See methodological details Krennmair et al. (2022a) estimation (nonlinear) poverty indicators /quantiles, need information area-specific cumulative distribution function (CDF) Y. Krennmair et al. (2022b) propose smearing approach originated Duan (1983). Alternatively, Monte-Carlo methods used simulate domain-specific CDF Y. estimation MSE, bootstrap population built based bias-corrected residual variance discussed Krennmair Schmid (2022). bootstrap bias correction follows Mendez Lohr (2011). Note MERFmodel object composition elements random forest class ranger random effects model class merMod. Thus, generic functions applicable corresponding objects. details generic functions see ranger lmer well examples .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"Duan, N. (1983). Smearing Estimate: Nonparametric Retransformation Method. Journal American Statistical Association, 78(383), 605–610. Krennmair, P., & Schmid, T. (2022). Flexible Domain Prediction Using Mixed Effects Random Forests. Journal Royal Statistical Society: Series C (Applied Statistics) (forthcoming). Krennmair, P., & Würz, N. & Schmid, T. (2022a). Analysing Opportunity Cost Care Work using Mixed Effects Random Forests Aggregated Census Data. Krennmair, P., & Schmid, T & Tzavidis, Nikos. (2022b). Estimation Poverty Indicators Using Mixed Effects Random Forests. Working Paper. Mendez, G., & Lohr, S. (2011). Estimating residual variance random forest regression. Computational Statistics & Data Analysis, 55 (11), 2937–2950.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[,-c(1, 16, 17, 18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_pop)  # SAEforest generics: summary(model1) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                        500 #> Number of independent variables:         14 #> Mtry:                                     3 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                     0.62502 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39205.4  39216.6 -19600.7  39201.4     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -3.0107 -0.5308 -0.0680  0.4319 11.7568  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept) 11734330 3426     #>  Residual             30484852 5521     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.2779383  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 6 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                                               #>  0 -19546.43 -19576.65 -19592.38 -19603.79 -19599.64 -19600.72  # Example 2: # Calculating point + MSE estimates for aggregated covariate data and passing # arguments to the random forest. # Note that B is unrealistically low to improve example speed  # remove factor for gender X_covar <- X_covar[,-1] model2 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_popAgg,                           MSE = \"nonparametric\", popnsize = popNsize,B = 5, mtry = 5,                           num.trees = 100, aggData = TRUE) #> Calculation of weights failed for area: Eisenstadt (Stadt) #> Calculation of weights failed for area: Melk #> Calculation of weights failed for area: Rust (Stadt) #> Calculation of weights failed for area: Schärding #> Calculation of weights failed for area: Villach (Stadt) #> Calculation of weights failed for area: Wels (Stadt) #> Calculation of weights failed for area: Wiener Neustadt (Stadt) #> Error SD Bootstrap started: #> Bootstrap with 5 rounds started  # SAEforest generics: summary(model2) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_popAgg, MSE = \"nonparametric\",  #>     aggData = TRUE, popnsize = popNsize, B = 5, mtry = 5, num.trees = 100) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #>  #>                Min. 1st Qu. Median     Mean 3rd Qu. Max. #> Sample_domains   14      17   22.5 27.78571      29  200 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                        100 #> Number of independent variables:         13 #> Mtry:                                     5 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                     0.64984 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39161.6  39172.7 -19578.8  39157.6     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -3.7128 -0.4889 -0.0118  0.4399 12.2245  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept) 13211667 3635     #>  Residual             29663914 5446     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.3081397  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 25 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                                                         #>  0 -19515.47 -19527.04 -19550.95 -19547.42 -19536.62 -19532.03 -19535.75 #>                                                                              #>  -19557.99 -19532.8 -19569.88 -19553.79 -19595.5 -19551.4 -19564.11 -19558.9 #>                                                                                 #>  -19575.27 -19560.74 -19567.9 -19541.24 -19564.77 -19586.43 -19569.06 -19582.25 #>                      #>  -19561.14 -19578.79 summarize_indicators(model2, MSE = TRUE, CV = TRUE) #> Warning: For objects of class SAEforest_mean or SAEforest_meanAGG, only results for the Indicator \"Mean\" are reported #> Indicator/s: Mean #>                         district      Mean   Mean_MSE    Mean_CV #> 1                      Amstetten 14043.869   730057.8 0.06084037 #> 2                          Baden 22150.087   398697.6 0.02850666 #> 3                        Bludenz 11544.081   785844.2 0.07679074 #> 4                 Braunau am Inn 12520.172   575264.7 0.06057921 #> 5                        Bregenz 33974.414  8823174.8 0.08743000 #> 6            Bruck an der Leitha 23037.541  1909203.0 0.05997772 #> 7             Bruck-Mürzzuschlag 24713.282   966332.6 0.03977708 #> 8               Deutschlandsberg 23784.959  3829030.9 0.08227010 #> 9                       Dornbirn 18580.485   589895.9 0.04133621 #> 10                      Eferding 12098.160 27801238.6 0.43582561 #> 11            Eisenstadt (Stadt) 28286.813  2733175.4 0.05844532 #> 12           Eisenstadt-Umgebung 20982.511 37418571.9 0.29153195 #> 13                     Feldkirch 17322.679   643250.2 0.04629935 #> 14                   Feldkirchen 12916.464 27488406.4 0.40591130 #> 15                     Freistadt 16561.752  3115603.4 0.10657733 #> 16                       Gmunden 19049.434   396162.5 0.03304111 #> 17                         Gmünd 12317.210  2277104.5 0.12251215 #> 18                  Graz (Stadt) 17724.873   171422.6 0.02335882 #> 19                 Graz-Umgebung 35297.065   691482.8 0.02355874 #> 20                  Grieskirchen 15610.451  3210980.9 0.11478983 #> 21                   Gänserndorf 20024.466   463755.0 0.03400818 #> 22                       Güssing 16674.269  6935164.2 0.15793616 #> 23                       Hallein 16923.456  1071896.2 0.06117688 #> 24          Hartberg-Fürstenfeld 12043.971  2952937.4 0.14267813 #> 25                      Hermagor 11033.871 32327685.9 0.51529915 #> 26                    Hollabrunn 16175.320  1940646.7 0.08612324 #> 27                          Horn 12154.000 20362287.2 0.37127357 #> 28                          Imst 13911.930  1627806.4 0.09170943 #> 29              Innsbruck (Land) 27205.813  1881806.0 0.05042266 #> 30             Innsbruck (Stadt) 17535.785   232882.1 0.02751964 #> 31                   Jennersdorf 11147.917 15181981.1 0.34951875 #> 32        Kirchdorf an der Krems 15926.880  1531188.0 0.07769330 #> 33                     Kitzbühel 13783.281  3187925.7 0.12953928 #> 34             Klagenfurt (Land) 21702.440  1032302.1 0.04681606 #> 35            Klagenfurt (Stadt) 33146.942  2469363.4 0.04740772 #> 36                    Korneuburg 25630.289  1408237.4 0.04630037 #> 37                  Krems (Land) 14940.629  5801679.5 0.16121594 #> 38    Krems an der Donau (Stadt) 17003.275 52849033.8 0.42754905 #> 39                      Kufstein 19746.645   920185.3 0.04857853 #> 40                       Landeck 11992.238  4579994.0 0.17845643 #> 41                      Leibnitz 15538.174  1572757.1 0.08071065 #> 42                        Leoben 18976.203   359653.2 0.03160332 #> 43                         Lienz 11147.027   949692.4 0.08742435 #> 44                        Liezen 12302.636   762994.2 0.07100067 #> 45                    Lilienfeld 11754.588  6416100.4 0.21549052 #> 46                  Linz (Stadt) 22236.145   321252.5 0.02548965 #> 47                     Linz-Land 26582.246   521065.0 0.02715528 #> 48                   Mattersburg 18823.901  3290963.4 0.09637223 #> 49                          Melk 12842.433   784613.7 0.06897324 #> 50                    Mistelbach 19810.667   798902.0 0.04511777 #> 51                         Murau 10793.702  5049360.8 0.20818421 #> 52                        Murtal 19212.415  2534816.8 0.08286885 #> 53                       Mödling 41560.283   648827.9 0.01938145 #> 54                   Neunkirchen 15266.934  1281828.5 0.07415887 #> 55               Neusiedl am See 18678.355   996736.4 0.05345047 #> 56                Oberpullendorf 15640.593  4655185.7 0.13794796 #> 57                      Oberwart 12020.028   595978.8 0.06422586 #> 58                          Perg 19038.091  1247373.1 0.05866442 #> 59                        Reutte 17098.757   679498.0 0.04820916 #> 60              Ried im Innkreis 13673.559  1813054.9 0.09847453 #> 61                      Rohrbach 12736.606   702433.1 0.06580347 #> 62                  Rust (Stadt) 14794.835 18286804.7 0.28904056 #> 63              Salzburg (Stadt) 20028.357   707065.2 0.04198406 #> 64             Salzburg-Umgebung 29011.500   844394.4 0.03167397 #> 65        Sankt Johann im Pongau 13145.906  3706423.6 0.14644920 #> 66           Sankt Pölten (Land) 16945.252   754729.5 0.05126815 #> 67          Sankt Pölten (Stadt) 16846.271  3859487.6 0.11661678 #> 68        Sankt Veit an der Glan 14520.015  1663462.6 0.08882587 #> 69                      Scheibbs 11953.645  9843871.1 0.26247176 #> 70                        Schwaz 15392.416   474455.0 0.04474976 #> 71                     Schärding 10826.985   619384.2 0.07268964 #> 72           Spittal an der Drau 12980.513   470760.7 0.05285769 #> 73                 Steyr (Stadt) 18440.445 24792055.3 0.27001311 #> 74                    Steyr-Land 24506.296  1881817.2 0.05597718 #> 75              Südoststeiermark 13777.315  4825543.2 0.15944412 #> 76                       Tamsweg 15129.233  7686984.3 0.18325721 #> 77                         Tulln 20994.911   553242.6 0.03542776 #> 78               Urfahr-Umgebung 39130.833  4727755.0 0.05556590 #> 79               Villach (Stadt) 22123.595  3370437.5 0.08298268 #> 80                  Villach Land 18823.565 10505740.2 0.17219140 #> 81                     Voitsberg 17106.190  2831922.0 0.09837559 #> 82                   Vöcklabruck 18184.475   593355.4 0.04236007 #> 83                   Völkermarkt 14911.433  2305782.0 0.10183328 #> 84        Waidhofen an der Thaya 10656.498 15506701.0 0.36952618 #> 85 Waidhofen an der Ybbs (Stadt) 15512.489  4081044.8 0.13022795 #> 86                          Weiz 15364.557  1217287.1 0.07180860 #> 87                  Wels (Stadt) 13750.165   870260.2 0.06784481 #> 88                     Wels-Land 23768.582 13269634.4 0.15325908 #> 89                          Wien 20673.618   334076.3 0.02795802 #> 90        Wiener Neustadt (Land) 20548.786   979642.9 0.04816679 #> 91       Wiener Neustadt (Stadt) 12969.335  4022844.7 0.15464965 #> 92                     Wolfsberg 16737.833  2165702.9 0.08792254 #> 93                   Zell am See  9921.009  1117640.0 0.10656023 #> 94                        Zwettl 10374.583 31182935.9 0.53825473  # Example 3: # Calculating point + MSE estimates and passing arguments to the forest. # Two additional custom indicators and the threshold is defined as a custom function of Y. # Note that B is unrealistically low to improve example speed.  model3 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\", smp_data = eusilcA_smp,                           pop_data = eusilcA_pop, meanOnly = FALSE, MSE = \"nonparametric\",                           B = 5, mtry = 5, num.trees = 100, threshold = function(Y){0.5 *                           median(Y)}, custom_indicator = list(my_max = function(Y,                           threshold){max(Y)}, mean40 = function(Y, threshold){                           mean(Y[Y<=quantile(Y,0.4)])}), smearing = FALSE) #> Error SD Bootstrap started: #> MSE Bootstrap with 5 rounds started:  # SAEforest generics: summary(model3) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop, MSE = \"nonparametric\",  #>     meanOnly = FALSE, smearing = FALSE, B = 5, threshold = function(Y) { #>         0.5 * median(Y) #>     }, custom_indicator = list(my_max = function(Y, threshold) { #>         max(Y) #>     }, mean40 = function(Y, threshold) { #>         mean(Y[Y <= quantile(Y, 0.4)]) #>     }), mtry = 5, num.trees = 100) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                        100 #> Number of independent variables:         13 #> Mtry:                                     5 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                     0.66844 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39083.5  39094.6 -19539.7  39079.5     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -4.0682 -0.5170 -0.0513  0.4268 12.1747  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept)  7689148 2773     #>  Residual             28970242 5382     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.2097457  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 4 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                           #>  0 -19519.14 -19541.96 -19537.78 -19539.73 summarize_indicators(model3, MSE = FALSE, CV = TRUE, indicator = c(\"Gini\", \"my_max\", \"mean40\")) #> Indicator/s: Gini #>  Indicator/s: my_max #>  Indicator/s: mean40 #>                         district      Gini    Gini_CV    my_max my_max_CV #> 1                      Amstetten 0.2496166 0.06139391  53367.94 0.5124650 #> 2                          Baden 0.1821222 0.07004379  69365.94 0.3929977 #> 3                        Bludenz 0.2836343 0.10597374  45119.26 0.2913200 #> 4                 Braunau am Inn 0.2769782 0.07798593  53789.77 0.5638769 #> 5                        Bregenz 0.1623321 0.07778439  82887.97 0.1120534 #> 6            Bruck an der Leitha 0.1786187 0.07669723  69086.14 0.1365179 #> 7             Bruck-Mürzzuschlag 0.1668700 0.09485270  71669.91 0.2235948 #> 8               Deutschlandsberg 0.1897958 0.08023022  57235.93 0.1824685 #> 9                       Dornbirn 0.2181016 0.06908320  56893.75 0.3678049 #> 10                      Eferding 0.2345167 0.18489711  42421.92 0.6557794 #> 11            Eisenstadt (Stadt) 0.1910494 0.17611874  68312.35 0.1181623 #> 12           Eisenstadt-Umgebung 0.2009430 0.12954595  58555.45 0.1984942 #> 13                     Feldkirch 0.2317475 0.10229294  59428.59 0.3881409 #> 14                   Feldkirchen 0.2446526 0.18556621  40754.56 0.2536565 #> 15                     Freistadt 0.2154424 0.12854458  53101.29 0.4965489 #> 16                       Gmunden 0.1999884 0.09455086  61906.52 0.2955842 #> 17                         Gmünd 0.2561330 0.29310131  39789.79 0.5867452 #> 18                  Graz (Stadt) 0.2176966 0.06736820  76946.33 0.1984235 #> 19                 Graz-Umgebung 0.1861077 0.16841540  95132.01 0.2606042 #> 20                  Grieskirchen 0.2167425 0.10161904  52493.09 0.2587489 #> 21                   Gänserndorf 0.1995323 0.10132979  61202.70 0.4011403 #> 22                       Güssing 0.2331344 0.08623459  42441.73 0.3973735 #> 23                       Hallein 0.2258108 0.12961906  51111.93 0.3519029 #> 24          Hartberg-Fürstenfeld 0.2645503 0.07211716  55098.67 0.3520621 #> 25                      Hermagor 0.2523298 0.16283129  33864.60 0.7615479 #> 26                    Hollabrunn 0.2223246 0.11138456  48751.66 0.4628220 #> 27                          Horn 0.2338976 0.19230341  43554.09 0.3160812 #> 28                          Imst 0.2377699 0.08142345  46086.11 0.2619329 #> 29              Innsbruck (Land) 0.2040890 0.08602366  77048.75 0.1486210 #> 30             Innsbruck (Stadt) 0.2065810 0.10692276  60773.36 0.4932663 #> 31                   Jennersdorf 0.2494483 0.17889506  34599.53 0.1609961 #> 32        Kirchdorf an der Krems 0.2325506 0.09950261  50549.39 0.5055384 #> 33                     Kitzbühel 0.2505483 0.11280844  45226.13 0.4784815 #> 34             Klagenfurt (Land) 0.1825540 0.08386088  57705.76 0.3781472 #> 35            Klagenfurt (Stadt) 0.1639245 0.06938104  81294.83 0.3479100 #> 36                    Korneuburg 0.1603203 0.08917155  63771.42 0.3168946 #> 37                  Krems (Land) 0.2391255 0.08436111  50278.43 0.2209006 #> 38    Krems an der Donau (Stadt) 0.2199381 0.11800657  40318.15 0.3457054 #> 39                      Kufstein 0.1847680 0.07407301  58083.20 0.2491800 #> 40                       Landeck 0.2615573 0.07132085  38413.82 0.7690219 #> 41                      Leibnitz 0.2315831 0.11104392  53370.41 0.4808914 #> 42                        Leoben 0.1927015 0.12717968  58604.30 0.2134696 #> 43                         Lienz 0.2608947 0.12025133  45782.32 0.4455413 #> 44                        Liezen 0.2734132 0.13385868  53213.01 0.4873165 #> 45                    Lilienfeld 0.2443897 0.19718093  42680.27 0.7047444 #> 46                  Linz (Stadt) 0.1866490 0.07613662  76815.99 0.1997204 #> 47                     Linz-Land 0.1685493 0.04476869  77998.89 0.2628937 #> 48                   Mattersburg 0.2068680 0.18340054  52645.18 0.2048766 #> 49                          Melk 0.2735880 0.08773104  48230.46 0.2642358 #> 50                    Mistelbach 0.2036992 0.12599481  60321.48 0.1358387 #> 51                         Murau 0.2529370 0.14983048  35311.93 0.3188117 #> 52                        Murtal 0.2150873 0.07773061  53926.56 0.4617912 #> 53                       Mödling 0.1496726 0.19444333  87746.94 0.1476431 #> 54                   Neunkirchen 0.2167925 0.13399309  56766.39 0.3887731 #> 55               Neusiedl am See 0.2056638 0.09013821  54394.24 0.2373192 #> 56                Oberpullendorf 0.2331675 0.21982944  46670.48 0.5692763 #> 57                      Oberwart 0.2583104 0.14040406  47608.62 0.5629113 #> 58                          Perg 0.2127375 0.09274623  53158.31 0.1649124 #> 59                        Reutte 0.1984683 0.10557539  43351.78 0.2284484 #> 60              Ried im Innkreis 0.2474063 0.12518031  50045.91 0.3044791 #> 61                      Rohrbach 0.2188741 0.12589123  48102.63 0.2523869 #> 62                  Rust (Stadt) 0.2697352 0.18642302  23357.17 0.1908323 #> 63              Salzburg (Stadt) 0.1932685 0.07948163  68674.85 0.1591554 #> 64             Salzburg-Umgebung 0.1679929 0.09598427  89310.34 0.1694144 #> 65        Sankt Johann im Pongau 0.2453427 0.09941047  53633.28 0.2670028 #> 66           Sankt Pölten (Land) 0.2298954 0.08762768  62305.47 0.2294852 #> 67          Sankt Pölten (Stadt) 0.2221361 0.16899913  49775.06 0.5028214 #> 68        Sankt Veit an der Glan 0.2455244 0.10072608  51492.05 0.3967974 #> 69                      Scheibbs 0.2480215 0.19712089  42353.38 0.3760305 #> 70                        Schwaz 0.2298244 0.15086416  52413.72 0.2150530 #> 71                     Schärding 0.3029931 0.08659790  43510.19 0.3755736 #> 72           Spittal an der Drau 0.2589875 0.07263732  58545.46 0.2843762 #> 73                 Steyr (Stadt) 0.2144196 0.28573383  47224.17 0.5252292 #> 74                    Steyr-Land 0.1730117 0.09023882  57873.40 0.4890363 #> 75              Südoststeiermark 0.2509470 0.06872722  55264.52 0.4612891 #> 76                       Tamsweg 0.2162900 0.10130196  40879.56 0.1156401 #> 77                         Tulln 0.2054317 0.08278396  61652.68 0.1982365 #> 78               Urfahr-Umgebung 0.1443740 0.15581748  89357.50 0.1001912 #> 79               Villach (Stadt) 0.1941162 0.11158736  60944.94 0.1558012 #> 80                  Villach Land 0.2069803 0.07776880  56018.43 0.2372981 #> 81                     Voitsberg 0.2100369 0.12259307  48686.29 0.5232139 #> 82                   Vöcklabruck 0.2111293 0.05842563  63596.83 0.2556668 #> 83                   Völkermarkt 0.2349521 0.10301081  47016.00 0.2725515 #> 84        Waidhofen an der Thaya 0.2660027 0.15929675  35849.69 0.1811430 #> 85 Waidhofen an der Ybbs (Stadt) 0.2109265 0.26315102  35962.63 0.1605012 #> 86                          Weiz 0.2452848 0.08436544  51603.52 0.3177342 #> 87                  Wels (Stadt) 0.2408120 0.09499697  47470.60 0.2739218 #> 88                     Wels-Land 0.2001741 0.08472676  59415.56 0.2160322 #> 89                          Wien 0.2447866 0.05381822 109676.70 0.2103532 #> 90        Wiener Neustadt (Land) 0.2057335 0.09337493  57415.41 0.2618388 #> 91       Wiener Neustadt (Stadt) 0.2105591 0.09349449  45909.63 0.2722959 #> 92                     Wolfsberg 0.2332638 0.09679308  50785.10 0.2186416 #> 93                   Zell am See 0.2933377 0.02306185  45910.49 0.3219887 #> 94                        Zwettl 0.2677241 0.11152893  45474.82 0.5364367 #>       mean40  mean40_CV #> 1   8104.170 0.02902325 #> 2  15735.431 0.02839009 #> 3   6234.411 0.22953106 #> 4   6253.489 0.25399596 #> 5  23840.219 0.03849579 #> 6  16660.491 0.03372998 #> 7  17345.005 0.09502401 #> 8  14506.407 0.11582412 #> 9  12450.326 0.09412046 #> 10  9565.550 0.35804410 #> 11 27297.832 0.30017683 #> 12 17758.733 0.20886305 #> 13 10075.268 0.13719385 #> 14  8402.480 0.27306219 #> 15 10754.675 0.10974376 #> 16 13368.639 0.04987205 #> 17  7485.412 0.85402883 #> 18 11365.140 0.05354266 #> 19 24264.907 0.05996671 #> 20 10584.374 0.08537967 #> 21 13424.339 0.10829529 #> 22 10275.955 0.14684277 #> 23 10024.918 0.10733773 #> 24  7309.488 0.15066485 #> 25  7087.851 0.31167004 #> 26 10231.910 0.09760702 #> 27  9405.537 0.44537825 #> 28  8610.950 0.15825954 #> 29 17869.057 0.05511827 #> 30 11623.388 0.07832363 #> 31  7667.007 0.23136868 #> 32 10030.946 0.12467688 #> 33  7138.563 0.10963907 #> 34 15789.840 0.09034039 #> 35 24134.944 0.05707198 #> 36 20230.548 0.06131129 #> 37  9220.980 0.12094249 #> 38 10874.673 0.11124036 #> 39 14157.177 0.05572605 #> 40  6690.407 0.22772454 #> 41  9564.511 0.08729996 #> 42 13783.134 0.10627174 #> 43  7211.216 0.14491196 #> 44  6485.282 0.23510147 #> 45  8939.741 0.48175894 #> 46 15460.731 0.06819121 #> 47 19818.833 0.03775992 #> 48 14359.113 0.36398719 #> 49  6209.175 0.11881243 #> 50 13183.924 0.07627689 #> 51  7260.136 0.21362813 #> 52 12128.811 0.12253665 #> 53 30477.641 0.04364185 #> 54 10333.526 0.14205719 #> 55 12630.609 0.06372049 #> 56 10385.815 0.41585492 #> 57  7387.320 0.22284874 #> 58 11466.888 0.14186941 #> 59 12948.996 0.13908392 #> 60  8129.388 0.25564883 #> 61  9546.130 0.12819871 #> 62  6752.316 0.21863140 #> 63 13423.428 0.05639137 #> 64 22100.403 0.04523701 #> 65  8542.659 0.13930779 #> 66 10368.832 0.06807740 #> 67 10210.859 0.17509699 #> 68  8725.549 0.13554502 #> 69  7794.362 0.21527478 #> 70  9618.193 0.09631738 #> 71  4738.325 0.29389391 #> 72  7703.324 0.09920418 #> 73 12093.106 0.43165920 #> 74 17657.622 0.09946456 #> 75  7923.985 0.21775466 #> 76 10633.185 0.12228878 #> 77 13220.184 0.07271324 #> 78 32063.473 0.05584124 #> 79 15122.046 0.09816730 #> 80 12793.717 0.04483305 #> 81 11390.310 0.15038505 #> 82 11800.726 0.06066700 #> 83  9235.364 0.13208011 #> 84  6855.515 0.33219771 #> 85 11547.659 0.45972960 #> 86  8482.244 0.08870874 #> 87  8464.953 0.09782143 #> 88 13509.826 0.08020484 #> 89 12093.349 0.02981109 #> 90 12484.619 0.08173127 #> 91 11126.650 0.11644553 #> 92 10536.540 0.09727307 #> 93  4909.782 0.13866430 #> 94  7230.085 0.23743497 # }"},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_pop.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated EU-SILC data - population data — eusilcA_pop","title":"Simulated EU-SILC data - population data — eusilcA_pop","text":"data set includes synthetic EU-SILC data taken package emdi. Originally, data builds eusilcP package simFrame reduced 17 variables containing regional variables states districts.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated EU-SILC data - population data — eusilcA_pop","text":"","code":"eusilcA_pop"},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_pop.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated EU-SILC data - population data — eusilcA_pop","text":"data frame 25000 observations 17 variables: eqIncome numeric; simplified version equivalized household income. eqsize numeric; equivalized household size according modified OECD scale. gender factor; person's gender (levels: male female). cash numeric; employee cash near cash income (net). self_empl numeric; cash benefits losses self-employment (net). unempl_ben numeric; unemployment benefits (net). age_ben numeric; old-age benefits (net). surv_ben numeric; survivor's benefits (net). sick_ben numeric; sickness benefits (net). dis_ben numeric; disability benefits (net). rent numeric; income rental property land (net). fam_allow numeric; family/children related allowances (net). house_allow numeric; housing allowances (net). cap_inv numeric; interest, dividends, profit capital investments  unincorporated business (net). tax_adj numeric; repayments/receipts tax adjustment (net). state factor; state (nine levels). district factor; districts (94 levels).","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_popAgg.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated EU-SILC data - aggregated population data — eusilcA_popAgg","title":"Simulated EU-SILC data - aggregated population data — eusilcA_popAgg","text":"data set includes synthetic EU-SILC data taken package emdi. Originally, data builds eusilcP package simFrame reduced 15 variables including district identifiers well aggregated household level covariates. Therefore, except variables ratio_n district, variables mean values per district.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_popAgg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated EU-SILC data - aggregated population data — eusilcA_popAgg","text":"","code":"eusilcA_popAgg"},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_popAgg.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated EU-SILC data - aggregated population data — eusilcA_popAgg","text":"data frame 94 observations 15 variables: eqsize numeric; equivalized household size according modified OECD scale. cash numeric; employee cash near cash income (net). self_empl numeric; cash benefits losses self-employment (net). unempl_ben numeric; unemployment benefits (net). age_ben numeric; old-age benefits (net). surv_ben numeric; survivor's benefits (net). sick_ben numeric; sickness benefits (net). dis_ben numeric; disability benefits (net). rent numeric; income rental property land (net). fam_allow numeric; family/children related allowances (net). house_allow numeric; housing allowances (net). cap_inv numeric; interest, dividends, profit capital investments  unincorporated business (net). tax_adj numeric; repayments/receipts tax adjustment (net). ratio_n numeric; ratios population size per area total population size. district factor; Austrian districts (94 levels).","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_smp.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated EU-SILC data - survey sample data — eusilcA_smp","title":"Simulated EU-SILC data - survey sample data — eusilcA_smp","text":"data set includes synthetic EU-SILC data taken package emdi. Originally, data builds eusilcP package simFrame reduced 18 variables containing regional variables states districts.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_smp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated EU-SILC data - survey sample data — eusilcA_smp","text":"","code":"eusilcA_smp"},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_smp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated EU-SILC data - survey sample data — eusilcA_smp","text":"data frame 1945 observations 18 variables: eqIncome numeric; simplified version equivalized household income. eqsize numeric; equivalized household size according modified OECD scale. gender factor; person's gender (levels: male female). cash numeric; employee cash near cash income (net). self_empl numeric; cash benefits losses self-employment (net). unempl_ben numeric; unemployment benefits (net). age_ben numeric; old-age benefits (net). surv_ben numeric; survivor's benefits (net). sick_ben numeric; sickness benefits (net). dis_ben numeric; disability benefits (net). rent numeric; income rental property land (net). fam_allow numeric; family/children related allowances (net). house_allow numeric; housing allowances (net). cap_inv numeric; interest, dividends, profit capital investments  unincorporated business (net). tax_adj numeric; repayments/receipts tax adjustment (net). state factor; state (nine levels). district factor; districts (94 levels). weight numeric; constant weight.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/load_shapeaustria.html","id":null,"dir":"Reference","previous_headings":"","what":"Loading the shape file for Austrian districts — load_shapeaustria","title":"Loading the shape file for Austrian districts — load_shapeaustria","text":"function simplifies loading shape file Austrian districts. originally used examples package emdi.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/load_shapeaustria.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loading the shape file for Austrian districts — load_shapeaustria","text":"","code":"load_shapeaustria()"},{"path":"https://krennpa.github.io/SAEforest/reference/load_shapeaustria.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loading the shape file for Austrian districts — load_shapeaustria","text":"shape file class SpatialPolygonsDataFrame.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/load_shapeaustria.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Loading the shape file for Austrian districts — load_shapeaustria","text":"shape file contains borders 94 Austrian districts. main purpose function visualization estimation results plotting function map_indicators.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualizes disaggregated estimates on a map — map_indicators","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"Function map_indicators visualizes estimates SAEforestObject specified map. function can seen modified wrapper map_plot package emdi.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"","code":"map_indicators(   object,   indicator = \"all\",   MSE = FALSE,   CV = FALSE,   map_obj = NULL,   map_dom_id = NULL,   map_tab = NULL,   color = c(\"white\", \"darkgreen\"),   scale_points = NULL,   guide = \"colourbar\",   return_data = FALSE,   return_plot = FALSE,   gg_theme = theme_minimal() )"},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"object object class SAEforest, containing estimates visualized. indicator Optional character vector specifying indicators mapped: () calculated indicators (\"\"); (ii) default indicators name: \"Mean\", \"Quant10\", \"Quant25\", \"Median\", \"Quant75\", \"Quant90\", \"Gini\", \"Hcr\", \"Pgap\", \"Qsr\" function name/s \"custom_indicator/s\"; (iii) vector names indicators. object estimated option meanOnly = TRUE, indicator arguments ignored \"Mean\" visualized. MSE Logical. TRUE, MSE also visualized. Defaults FALSE. CV Logical. TRUE, CV also visualized. Defaults FALSE. map_obj SpatialPolygonsDataFrame object defined sp package data visualized. map_dom_id Character string containing name variable map_obj indicates domains. map_tab data.frame object two columns matches domain variable population data set (first column) domain variable map_obj (second column). used domain-level identifiers different objects. color vector length 2 defining lowest highest color map. scale_points structure defining lowest, mid highest value colorscale. numeric vector length two given, scale used every plot. Alternatively, list defining colors plot separately may given. guide Character passed scale_colour_gradient ggplot2. Possible values \"none\", \"colourbar\", \"legend\". return_data set TRUE, fortified data frame including map data well chosen indicators returned. Customized maps can easily obtained data frame via package ggplot2. Defaults FALSE. return_plot set TRUE, list individual plots produced ggplot2 returned individual customization processing. gg_theme Specify predefined theme ggplot2. Defaults theme_minimal.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"Creates required plots selected, fortified data.frame list plots.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_pop,                           num.trees = 50)  # Load shape file load_shapeaustria()  # Create map plot for mean indicator - point and MSE estimates but no CV  map_indicators(object = model1, MSE = FALSE, CV = FALSE, map_obj = shape_austria_dis,                indicator = c(\"Mean\"), map_dom_id = \"PB\") #> Warning: For objects of class SAEforest_mean or SAEforest_meanAGG, only results for the Indicator \"Mean\" are reported   # Create a suitable mapping table to use numerical identifiers of the shape # file  # First find the right order dom_ord <- match(shape_austria_dis@data$PB, model1$Indicators$district)  # Create the mapping table based on the order obtained above map_tab <- data.frame(pop_data_id = model1$Indicators$district[dom_ord],                       shape_id = shape_austria_dis@data$BKZ)  # Create map plot for mean indicator - using the numerical domain # identifiers of the shape file. Additionally save the figure in as a list element.  map_obj <- map_indicators(object = model1, MSE = FALSE, CV = FALSE,                           map_obj = shape_austria_dis, indicator = c(\"Mean\"),                           map_dom_id = \"BKZ\", map_tab = map_tab, return_plot = TRUE) #> Warning: For objects of class SAEforest_mean or SAEforest_meanAGG, only results for the Indicator \"Mean\" are reported  # }"},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for a 'SAEforest' object — plot.SAEforest","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"Plots model-specific characteristics fixed effects random forest component MERF SAEforestObject. variable importance plot produced visualize importance individual covariates predictive performance model. variable importance plot, arguments passed internally function vip. requested, plot function additionally provides partial dependence plot (pdp) visualize impact given number influential covariates target variable. pdp plot produced using partial package pdp. plot-engine plots ggplot2.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"","code":"# S3 method for SAEforest plot(   x,   num_features = 6,   col = \"darkgreen\",   fill = \"darkgreen\",   alpha = 0.8,   include_type = TRUE,   horizontal = TRUE,   gg_theme = theme_minimal(),   lsize = 1.5,   lty = \"solid\",   grid_row = 2,   out_list = FALSE,   pdp_plot = TRUE,   ... )"},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"x object class SAEforest including random forest model class ranger. num_features Number features partial dependence plot required. col Parameter specifying color selected plots. argument must specified can processed aes. Defaults character name color \"darkgreen\". fill Parameter specifying fill selected plots. argument must specified can processed aes. Defaults character name color \"darkgreen\". alpha Parameter specifying transparency fill vip plots. argument must number [0,1]. include_type Logical. set TRUE, type importance specified fitting process model included vip plot. Defaults TRUE. horizontal Logical. set TRUE, importance scores appear x-axis. parameter set FALSE, importance scores plot y-axis. Defaults TRUE. gg_theme Specify predefined theme ggplot2. Defaults theme_minimal. lsize Parameter specifying line size pdp plots. argument must specified can processed aes. Defaults 1.5. lty Parameter specifying line size pdp plots. argument must specified can processed aes. Defaults \"solid\". grid_row Parameter specifying amount rows joint pdp plot. Defaults 2. out_list Logical. set TRUE, list individual plots produced ggplot2 returned individual customization processing. Defaults FALSE. pdp_plot Logical. set TRUE, partial dependence plots produced partial package pdp included. Defaults TRUE. ... Optional additional inputs ignored method.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"Plots variable importance /partial dependence covariates ranked corresponding importance. Additionally, list individual plots can returned facilitating individual customization exporting. See following examples details.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"production importance plots, sure specify parameter importance != 'none' producing estimates function SAEforest_model. pdp plots, note covariates type factor character used partial dependence plots. Dummy-variables can used, however, pdp plots always lines connecting two effect points 0 1. informative pdp plots can produced continuous predictors.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_pop,                           num.trees = 50) plot(model1) #> Press [enter] to continue #> Warning: The data contained 3 character or factor variables unsuitable for pdp plots(district, gender, state).   # }"},{"path":"https://krennpa.github.io/SAEforest/reference/popNsize.html","id":null,"dir":"Reference","previous_headings":"","what":"Demographic population-size data — popNsize","title":"Demographic population-size data — popNsize","text":"data contains simulated population data based aggregates eusilcA_pop, based eusilcP package simFrame.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/popNsize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demographic population-size data — popNsize","text":"","code":"popNsize"},{"path":"https://krennpa.github.io/SAEforest/reference/popNsize.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Demographic population-size data — popNsize","text":"data frame 94 Austrian districts corresponding synthetic population numbers: district character; districts (94 levels). N_i numeric; simulated population district.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/print.SAEforest.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints a 'SAEforest' object — print.SAEforest","title":"Prints a 'SAEforest' object — print.SAEforest","text":"Basic information SAEforestObject printed.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/print.SAEforest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints a 'SAEforest' object — print.SAEforest","text":"","code":"# S3 method for SAEforest print(x, ...)"},{"path":"https://krennpa.github.io/SAEforest/reference/print.SAEforest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints a 'SAEforest' object — print.SAEforest","text":"x Object class SAEforest, representing point MSE estimates obtained function SAEforest_model. ... Optional additional inputs ignored method.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/print.SAEforest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prints a 'SAEforest' object — print.SAEforest","text":"Prints basic information survey data characteristics.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":null,"dir":"Reference","previous_headings":"","what":"Presents point, MSE and CV estimates — summarize_indicators","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"Function summarize_indicators reports point mean squared error (MSE) estimates well calculated coefficients variation (CV) fitted SAEforest object.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"","code":"summarize_indicators(object, indicator = \"all\", MSE = FALSE, CV = FALSE)"},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"object Object point /MSE estimates /calculated CV's requested. object must class SAEforest. indicator Optional character vector specifying indicators mapped: () calculated indicators (\"\"); (ii) default indicators name: \"Mean\", \"Quant10\", \"Quant25\", \"Median\", \"Quant75\", \"Quant90\", \"Gini\", \"Hcr\", \"Pgap\", \"Qsr\" function name/s \"custom_indicator/s\"; (iii) vector names indicators. object estimated SAEforest_model indicator arguments ignored \"Mean\" returned. MSE Logical. TRUE, MSE estimates selected indicators per domain added data frame point estimates. Defaults FALSE. CV Logical. TRUE, coefficients variation selected indicators per domain added data frame point estimates. Defaults FALSE.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"return summarize_indicators object class summarize_indicators.SAEforest including domain-specific point /MSE estimates /calculated CV's SAEforest object returned object contains data.frame ind character including names requested indicator(s).","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"Objects class summarize_indicators.SAEforest methods following generic functions: head tail (default documentation, see head),  .matrix (default documentation, see matrix), .data.frame (default documentation, see .data.frame), subset (default documentation, see subset).","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Calculating point + MSE estimates and passing arguments to the forest. # Additionally, two additional indicators and functions as threshold are added. # Note that B and num.trees are low to speed up estimation time and must be changed for # practical applications.  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_pop,                           meanOnly = FALSE, MSE = \"nonparametric\", B = 5, mtry = 5,                           num.trees = 50, smearing = FALSE) #> Error SD Bootstrap started: #> MSE Bootstrap with 5 rounds started:  # Extract indicator and show generics: Gini1 <- summarize_indicators(model1, MSE = TRUE, CV = TRUE, indicator = \"Gini\")  head(Gini1) #>              district      Gini     Gini_MSE    Gini_CV #> 1           Amstetten 0.2506610 0.0004543057 0.08503297 #> 2               Baden 0.1815458 0.0001324130 0.06338390 #> 3             Bludenz 0.2841038 0.0007885591 0.09884166 #> 4      Braunau am Inn 0.2697336 0.0002901931 0.06315512 #> 5             Bregenz 0.1617372 0.0001258838 0.06937054 #> 6 Bruck an der Leitha 0.1778989 0.0002382211 0.08675945 tail(Gini1) #>                   district      Gini     Gini_MSE    Gini_CV #> 89                    Wien 0.2413731 0.0001131947 0.04407824 #> 90  Wiener Neustadt (Land) 0.2006023 0.0002253390 0.07483112 #> 91 Wiener Neustadt (Stadt) 0.2100767 0.0014837030 0.18335616 #> 92               Wolfsberg 0.2311071 0.0009660102 0.13448613 #> 93             Zell am See 0.3003195 0.0004827088 0.07315753 #> 94                  Zwettl 0.2677981 0.0022288514 0.17629216 as.data.frame(Gini1) #>                         district      Gini     Gini_MSE    Gini_CV #> 1                      Amstetten 0.2506610 4.543057e-04 0.08503297 #> 2                          Baden 0.1815458 1.324130e-04 0.06338390 #> 3                        Bludenz 0.2841038 7.885591e-04 0.09884166 #> 4                 Braunau am Inn 0.2697336 2.901931e-04 0.06315512 #> 5                        Bregenz 0.1617372 1.258838e-04 0.06937054 #> 6            Bruck an der Leitha 0.1778989 2.382211e-04 0.08675945 #> 7             Bruck-Mürzzuschlag 0.1682187 1.652236e-04 0.07641205 #> 8               Deutschlandsberg 0.1913224 2.293643e-04 0.07915843 #> 9                       Dornbirn 0.2082983 6.929718e-04 0.12637817 #> 10                      Eferding 0.2329806 6.966463e-04 0.11328867 #> 11            Eisenstadt (Stadt) 0.1875840 8.119365e-04 0.15190262 #> 12           Eisenstadt-Umgebung 0.2004414 5.140637e-04 0.11311524 #> 13                     Feldkirch 0.2262377 5.047038e-04 0.09930092 #> 14                   Feldkirchen 0.2537076 1.579048e-03 0.15662611 #> 15                     Freistadt 0.2099376 8.011244e-04 0.13482167 #> 16                       Gmunden 0.2035652 2.554946e-04 0.07852126 #> 17                         Gmünd 0.2557238 2.125490e-03 0.18028451 #> 18                  Graz (Stadt) 0.2155064 1.494586e-04 0.05672838 #> 19                 Graz-Umgebung 0.1829827 1.316544e-03 0.19829311 #> 20                  Grieskirchen 0.2090666 1.008586e-03 0.15190489 #> 21                   Gänserndorf 0.1994797 1.921915e-04 0.06949737 #> 22                       Güssing 0.2301604 7.912222e-04 0.12221336 #> 23                       Hallein 0.2254833 6.489844e-04 0.11298030 #> 24          Hartberg-Fürstenfeld 0.2631672 7.679258e-04 0.10529988 #> 25                      Hermagor 0.2485312 1.650781e-03 0.16347970 #> 26                    Hollabrunn 0.2197322 4.093010e-04 0.09207203 #> 27                          Horn 0.2289698 3.579521e-04 0.08262932 #> 28                          Imst 0.2449579 7.311943e-04 0.11038880 #> 29              Innsbruck (Land) 0.2019746 4.139933e-04 0.10073955 #> 30             Innsbruck (Stadt) 0.2069875 3.551326e-04 0.09104397 #> 31                   Jennersdorf 0.2459114 5.877856e-04 0.09858954 #> 32        Kirchdorf an der Krems 0.2302639 8.306758e-04 0.12516700 #> 33                     Kitzbühel 0.2523222 1.222655e-03 0.13857873 #> 34             Klagenfurt (Land) 0.1815504 5.944269e-04 0.13429261 #> 35            Klagenfurt (Stadt) 0.1627702 4.077377e-04 0.12405537 #> 36                    Korneuburg 0.1608567 9.234021e-05 0.05973879 #> 37                  Krems (Land) 0.2358282 5.561211e-04 0.09999745 #> 38    Krems an der Donau (Stadt) 0.2181051 7.553568e-04 0.12601150 #> 39                      Kufstein 0.1833995 1.678502e-04 0.07064198 #> 40                       Landeck 0.2602467 1.148258e-03 0.13020708 #> 41                      Leibnitz 0.2350626 3.335657e-04 0.07769751 #> 42                        Leoben 0.1860993 1.033475e-04 0.05462673 #> 43                         Lienz 0.2627103 6.914913e-04 0.10009588 #> 44                        Liezen 0.2587971 9.768290e-04 0.12076743 #> 45                    Lilienfeld 0.2417432 6.898991e-04 0.10865219 #> 46                  Linz (Stadt) 0.1847478 1.815338e-04 0.07292888 #> 47                     Linz-Land 0.1684694 3.443728e-05 0.03483321 #> 48                   Mattersburg 0.2073792 7.126628e-04 0.12872916 #> 49                          Melk 0.2656890 1.255416e-03 0.13335838 #> 50                    Mistelbach 0.2002418 2.197294e-04 0.07402685 #> 51                         Murau 0.2544567 2.923920e-03 0.21250489 #> 52                        Murtal 0.2232718 3.604960e-04 0.08503863 #> 53                       Mödling 0.1454743 7.551740e-04 0.18890225 #> 54                   Neunkirchen 0.2177180 2.832909e-04 0.07730757 #> 55               Neusiedl am See 0.2075293 5.246292e-04 0.11036894 #> 56                Oberpullendorf 0.2225282 5.380646e-04 0.10423948 #> 57                      Oberwart 0.2521503 4.386798e-04 0.08306428 #> 58                          Perg 0.2072744 2.015107e-04 0.06848623 #> 59                        Reutte 0.2070370 3.879181e-04 0.09513098 #> 60              Ried im Innkreis 0.2438417 2.854332e-04 0.06928579 #> 61                      Rohrbach 0.2279989 9.168689e-04 0.13280699 #> 62                  Rust (Stadt) 0.2508950 4.058043e-03 0.25390217 #> 63              Salzburg (Stadt) 0.1919434 1.643715e-04 0.06679440 #> 64             Salzburg-Umgebung 0.1639323 1.139990e-04 0.06513076 #> 65        Sankt Johann im Pongau 0.2402848 4.451068e-04 0.08780229 #> 66           Sankt Pölten (Land) 0.2332269 1.503084e-04 0.05256697 #> 67          Sankt Pölten (Stadt) 0.2199186 3.331637e-04 0.08299787 #> 68        Sankt Veit an der Glan 0.2438201 8.221905e-04 0.11760254 #> 69                      Scheibbs 0.2442704 5.390493e-03 0.30056843 #> 70                        Schwaz 0.2317185 4.676871e-04 0.09332906 #> 71                     Schärding 0.2907355 5.480095e-04 0.08051855 #> 72           Spittal an der Drau 0.2521698 6.586615e-04 0.10177429 #> 73                 Steyr (Stadt) 0.2102186 1.969636e-03 0.21111638 #> 74                    Steyr-Land 0.1731385 6.047411e-04 0.14203360 #> 75              Südoststeiermark 0.2439255 9.648467e-04 0.12734208 #> 76                       Tamsweg 0.2094321 1.302228e-04 0.05448792 #> 77                         Tulln 0.1996404 6.394416e-05 0.04005457 #> 78               Urfahr-Umgebung 0.1420431 7.835259e-04 0.19706365 #> 79               Villach (Stadt) 0.1877881 6.452013e-05 0.04277396 #> 80                  Villach Land 0.2042127 3.694955e-04 0.09412866 #> 81                     Voitsberg 0.2111620 1.451617e-03 0.18043062 #> 82                   Vöcklabruck 0.2094107 5.244822e-04 0.10936199 #> 83                   Völkermarkt 0.2369843 7.105056e-04 0.11247713 #> 84        Waidhofen an der Thaya 0.2672654 3.274056e-03 0.21409191 #> 85 Waidhofen an der Ybbs (Stadt) 0.2213196 3.763664e-03 0.27719509 #> 86                          Weiz 0.2436176 2.927377e-04 0.07023130 #> 87                  Wels (Stadt) 0.2369898 1.084322e-03 0.13894711 #> 88                     Wels-Land 0.1967274 7.877112e-04 0.14266538 #> 89                          Wien 0.2413731 1.131947e-04 0.04407824 #> 90        Wiener Neustadt (Land) 0.2006023 2.253390e-04 0.07483112 #> 91       Wiener Neustadt (Stadt) 0.2100767 1.483703e-03 0.18335616 #> 92                     Wolfsberg 0.2311071 9.660102e-04 0.13448613 #> 93                   Zell am See 0.3003195 4.827088e-04 0.07315753 #> 94                        Zwettl 0.2677981 2.228851e-03 0.17629216 as.matrix(Gini1) #>            Gini     Gini_MSE    Gini_CV #>  [1,] 0.2506610 4.543057e-04 0.08503297 #>  [2,] 0.1815458 1.324130e-04 0.06338390 #>  [3,] 0.2841038 7.885591e-04 0.09884166 #>  [4,] 0.2697336 2.901931e-04 0.06315512 #>  [5,] 0.1617372 1.258838e-04 0.06937054 #>  [6,] 0.1778989 2.382211e-04 0.08675945 #>  [7,] 0.1682187 1.652236e-04 0.07641205 #>  [8,] 0.1913224 2.293643e-04 0.07915843 #>  [9,] 0.2082983 6.929718e-04 0.12637817 #> [10,] 0.2329806 6.966463e-04 0.11328867 #> [11,] 0.1875840 8.119365e-04 0.15190262 #> [12,] 0.2004414 5.140637e-04 0.11311524 #> [13,] 0.2262377 5.047038e-04 0.09930092 #> [14,] 0.2537076 1.579048e-03 0.15662611 #> [15,] 0.2099376 8.011244e-04 0.13482167 #> [16,] 0.2035652 2.554946e-04 0.07852126 #> [17,] 0.2557238 2.125490e-03 0.18028451 #> [18,] 0.2155064 1.494586e-04 0.05672838 #> [19,] 0.1829827 1.316544e-03 0.19829311 #> [20,] 0.2090666 1.008586e-03 0.15190489 #> [21,] 0.1994797 1.921915e-04 0.06949737 #> [22,] 0.2301604 7.912222e-04 0.12221336 #> [23,] 0.2254833 6.489844e-04 0.11298030 #> [24,] 0.2631672 7.679258e-04 0.10529988 #> [25,] 0.2485312 1.650781e-03 0.16347970 #> [26,] 0.2197322 4.093010e-04 0.09207203 #> [27,] 0.2289698 3.579521e-04 0.08262932 #> [28,] 0.2449579 7.311943e-04 0.11038880 #> [29,] 0.2019746 4.139933e-04 0.10073955 #> [30,] 0.2069875 3.551326e-04 0.09104397 #> [31,] 0.2459114 5.877856e-04 0.09858954 #> [32,] 0.2302639 8.306758e-04 0.12516700 #> [33,] 0.2523222 1.222655e-03 0.13857873 #> [34,] 0.1815504 5.944269e-04 0.13429261 #> [35,] 0.1627702 4.077377e-04 0.12405537 #> [36,] 0.1608567 9.234021e-05 0.05973879 #> [37,] 0.2358282 5.561211e-04 0.09999745 #> [38,] 0.2181051 7.553568e-04 0.12601150 #> [39,] 0.1833995 1.678502e-04 0.07064198 #> [40,] 0.2602467 1.148258e-03 0.13020708 #> [41,] 0.2350626 3.335657e-04 0.07769751 #> [42,] 0.1860993 1.033475e-04 0.05462673 #> [43,] 0.2627103 6.914913e-04 0.10009588 #> [44,] 0.2587971 9.768290e-04 0.12076743 #> [45,] 0.2417432 6.898991e-04 0.10865219 #> [46,] 0.1847478 1.815338e-04 0.07292888 #> [47,] 0.1684694 3.443728e-05 0.03483321 #> [48,] 0.2073792 7.126628e-04 0.12872916 #> [49,] 0.2656890 1.255416e-03 0.13335838 #> [50,] 0.2002418 2.197294e-04 0.07402685 #> [51,] 0.2544567 2.923920e-03 0.21250489 #> [52,] 0.2232718 3.604960e-04 0.08503863 #> [53,] 0.1454743 7.551740e-04 0.18890225 #> [54,] 0.2177180 2.832909e-04 0.07730757 #> [55,] 0.2075293 5.246292e-04 0.11036894 #> [56,] 0.2225282 5.380646e-04 0.10423948 #> [57,] 0.2521503 4.386798e-04 0.08306428 #> [58,] 0.2072744 2.015107e-04 0.06848623 #> [59,] 0.2070370 3.879181e-04 0.09513098 #> [60,] 0.2438417 2.854332e-04 0.06928579 #> [61,] 0.2279989 9.168689e-04 0.13280699 #> [62,] 0.2508950 4.058043e-03 0.25390217 #> [63,] 0.1919434 1.643715e-04 0.06679440 #> [64,] 0.1639323 1.139990e-04 0.06513076 #> [65,] 0.2402848 4.451068e-04 0.08780229 #> [66,] 0.2332269 1.503084e-04 0.05256697 #> [67,] 0.2199186 3.331637e-04 0.08299787 #> [68,] 0.2438201 8.221905e-04 0.11760254 #> [69,] 0.2442704 5.390493e-03 0.30056843 #> [70,] 0.2317185 4.676871e-04 0.09332906 #> [71,] 0.2907355 5.480095e-04 0.08051855 #> [72,] 0.2521698 6.586615e-04 0.10177429 #> [73,] 0.2102186 1.969636e-03 0.21111638 #> [74,] 0.1731385 6.047411e-04 0.14203360 #> [75,] 0.2439255 9.648467e-04 0.12734208 #> [76,] 0.2094321 1.302228e-04 0.05448792 #> [77,] 0.1996404 6.394416e-05 0.04005457 #> [78,] 0.1420431 7.835259e-04 0.19706365 #> [79,] 0.1877881 6.452013e-05 0.04277396 #> [80,] 0.2042127 3.694955e-04 0.09412866 #> [81,] 0.2111620 1.451617e-03 0.18043062 #> [82,] 0.2094107 5.244822e-04 0.10936199 #> [83,] 0.2369843 7.105056e-04 0.11247713 #> [84,] 0.2672654 3.274056e-03 0.21409191 #> [85,] 0.2213196 3.763664e-03 0.27719509 #> [86,] 0.2436176 2.927377e-04 0.07023130 #> [87,] 0.2369898 1.084322e-03 0.13894711 #> [88,] 0.1967274 7.877112e-04 0.14266538 #> [89,] 0.2413731 1.131947e-04 0.04407824 #> [90,] 0.2006023 2.253390e-04 0.07483112 #> [91,] 0.2100767 1.483703e-03 0.18335616 #> [92,] 0.2311071 9.660102e-04 0.13448613 #> [93,] 0.3003195 4.827088e-04 0.07315753 #> [94,] 0.2677981 2.228851e-03 0.17629216 subset(Gini1, district == \"Wien\") #>    district      Gini     Gini_MSE    Gini_CV #> 89     Wien 0.2413731 0.0001131947 0.04407824 # }"},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizes an 'SAEforest' object — summary.SAEforest","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"Shows additional information data, SAE model components. Information extracted SAEforest object. returned object suitable printing print.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"","code":"# S3 method for SAEforest summary(object, ...)"},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"object object class SAEforest representing point MSE estimates. Objects differ depending estimation method. ... Optional additional inputs ignored method.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"object class summary.SAEforest including information sample population data, model fit random forest specific metrics.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                          smp_data = eusilcA_smp, pop_data = eusilcA_pop,                          num.trees=50, mtry=3)  # SAEforest generics: summary(model1) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop, num.trees = 50,  #>     mtry = 3) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                         50 #> Number of independent variables:         14 #> Mtry:                                     3 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                      0.5977 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39342.9  39354.1 -19669.5  39338.9     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -4.4557 -0.4893 -0.0572  0.4470 11.3610  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept) 14429652 3799     #>  Residual             32568503 5707     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.3070259  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 18 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                                                        #>  0 -19593.66 -19603.83 -19662.29 -19640.94 -19627.34 -19630.9 -19659.51 #>                                                                        #>  -19651.43 -19671.83 -19656.64 -19637.15 -19622.16 -19585.67 -19653.35 #>                                          #>  -19671.68 -19633.28 -19668.55 -19669.47 # }"},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Tuning and cross-validation of MERF parameters — tune_parameters","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"Function tune_parameters allows tune parameters implemented MERF method. Essentially, function can understood modified wrapper train package caret, treating MERFs custom method.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"","code":"tune_parameters(   Y,   X,   data,   dName,   trControl,   tuneGrid,   seed = 11235,   gg_theme = theme_minimal(),   plot_res = TRUE,   return_plot = FALSE,   na.rm = TRUE,   ... )"},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"Y Continuous input value target variable. X Matrix data.frame predictive covariates. data data.frame survey sample data including specified elements Y X. dName Character specifying name domain identifier, random intercepts modeled. trControl Control parameters passed train. important parameters method (\"repeatedcv\" x-fold cross-validation), number (number folds) repeats (number repetitions). details see trainControl example . tuneGrid data.frame possible tuning values. columns must names tuning parameters. tuning function grid must comprise entries following parameters: num.trees, mtry, min.node.size, splitrule. seed Enabling reproducibility cross-validation tuning. Defaults 11235. gg_theme Specify predefined theme ggplot2. Defaults theme_minimal. plot_res Optional logical. TRUE, plot results cross-validation tuning shown. Defaults TRUE. return_plot set TRUE, list comparative plot produced ggplot2 returned individual customization processing. na.rm Logical. Whether missing values removed. Defaults TRUE. ... Additional parameters directly passed random forest ranger /training function train. details possible parameters examples see ranger train.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"Prints requested optimal tuning parameters (requested) additional comparative plot produced ggplot2.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"Tuning can performed following four parameters: num.trees (number trees forest), mtry (number variables split candidates node), min.node.size (minimal individual node size) splitrule (general splitting rule). details see ranger.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\") library(caret) #> Loading required package: ggplot2 #> Loading required package: lattice  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Specific characteristics of Cross-validation fitControl <- trainControl(method = \"repeatedcv\", number = 5,                            repeats = 1)  # Define a tuning-grid merfGrid <- expand.grid(num.trees = 50, mtry = c(3, 7, 9),                         min.node.size = 10, splitrule = \"variance\")  tune_parameters(Y = income, X = X_covar, data = eusilcA_smp,                 dName = \"district\", trControl = fitControl,                 tuneGrid = merfGrid) #> 1945 samples #>   15 predictor #>  #> No pre-processing #> Resampling: Cross-Validated (5 fold, repeated 1 times)  #> Summary of sample sizes: 1557, 1557, 1556, 1556, 1554  #> Resampling results across tuning parameters: #>  #>   mtry  RMSE      Rsquared   MAE      #>   3     5757.157  0.7120835  3830.652 #>   7     5518.994  0.7281565  3588.959 #>   9     5606.048  0.7184037  3655.541 #>  #> Tuning parameter 'num.trees' was held constant at a value of 50 #>  #> Tuning parameter 'min.node.size' was held constant at a value of 10 #>  #> Tuning parameter 'splitrule' was held constant at a value of variance #> RMSE was used to select the optimal model using the smallest value. #> The final values used for the model were num.trees = 50, mtry = #>  7, min.node.size = 10 and splitrule = variance.  # }"},{"path":[]}]
