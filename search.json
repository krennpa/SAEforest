[{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://krennpa.github.io/SAEforest/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Patrick Krennmair. Author, maintainer.","code":""},{"path":"https://krennpa.github.io/SAEforest/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Krennmair P (2022). SAEforest: Mixed Effect Random Forests Small Area Estimation. https://github.com/krennpa/SAEforest, https://krennpa.github.io/SAEforest/.","code":"@Manual{,   title = {SAEforest: Mixed Effect Random Forests for Small Area Estimation},   author = {Patrick Krennmair},   year = {2022},   note = {https://github.com/krennpa/SAEforest, https://krennpa.github.io/SAEforest/}, }"},{"path":"https://krennpa.github.io/SAEforest/index.html","id":"saeforest","dir":"","previous_headings":"","what":"Mixed Effect Random Forests for Small Area Estimation","title":"Mixed Effect Random Forests for Small Area Estimation","text":"package promotes use Mixed Effects Random Forests (MERFs) applications Small Area Estimation (SAE). package effectively combines functions estimation regionally disaggregated linear nonlinear economic inequality indicators using survey sample data. Estimated models increase precision direct estimates survey data, combining unit-level aggregated population level covariate information census register data. Apart point estimates, MSE estimates requested indicators can easily obtained. package provides procedures facilitate analysis model performance MERFs visualizes predictive relations covariates variable importance. Additionally, users can summarize map indicators corresponding measures uncertainty.","code":""},{"path":"https://krennpa.github.io/SAEforest/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Mixed Effect Random Forests for Small Area Estimation","text":"can install development version SAEforest Github :","code":"# install.packages(\"devtools\") devtools::install_github(\"krennpa/SAEforest\")"},{"path":"https://krennpa.github.io/SAEforest/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Mixed Effect Random Forests for Small Area Estimation","text":"basic example demonstrates functionality package: included features inspect model graphically. instance look following output generic function plot, shows -called variable importance plot: inspect model graphically, also map indicators. Take look example Austrian pseudo-data district-level mean income produced function map_indicators: hope like presentation package. interested model-based SAE definitely also check package emdi.","code":"library(SAEforest)  data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[,-c(1,16,17,18)]  #Example 1: #Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                          smp_data = eusilcA_smp, pop_data = eusilcA_pop)  #SAEforest generics: summary(model1) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                        500 #> Number of independent variables:         14 #> Mtry:                                     3 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                     0.62976 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39193.1  39204.2 -19594.5  39189.1     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -2.9730 -0.5194 -0.0759  0.4448 11.8159  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept) 11157235 3340     #>  Residual             30335770 5508     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.2688944  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 4 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                           #>  0 -19545.67 -19573.45 -19593.59 -19594.53 #> Press [enter] to continue"},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":null,"dir":"Reference","previous_headings":"","what":"Main function for unit-level MERF — MERFranger","title":"Main function for unit-level MERF — MERFranger","text":"function enables use Mixed Effects Random Forests (MERFs) effectively combining random forest ranger model capturing random effects lme4. MERF algorithm algorithmic procedure reminiscent EM-algorithm (see Details). function base-function wrapping function (SAEforest_model directly used ordinary user. Recommended exceptions applications exceeding scope existing wrapper functions research. function MERFranger allows model complex patterns structural relations (see Examples). function returns object class MERFranger, can used produce unit-level predictions. contrast wrapping functions, function directly provide SAE estimates domain-specific indicators.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main function for unit-level MERF — MERFranger","text":"","code":"MERFranger(   Y,   X,   random,   data,   importance = \"none\",   initialRandomEffects = 0,   ErrorTolerance = 1e-04,   MaxIterations = 25,   na.rm = TRUE,   ... )"},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main function for unit-level MERF — MERFranger","text":"Y Continuous input value target variable. X Matrix predictive covariates. random Specification random effects terms following syntax lmer. Random effect terms specified vertical bars (|) separating expressions design matrices grouping factors. details see lmer example . data data.frame sample data including specified elements Y X. importance Variable importance mode processed random forest ranger. Must 'none', 'impurity', 'impurity_corrected', 'permutation'. details see ranger. initialRandomEffects Numeric value vector initial estimate random effects. Defaults 0. ErrorTolerance Numeric value monitor MERF algorithm's convergence. Defaults 1e-04. MaxIterations Numeric value specifying maximal amount iterations MERF algorithm. Defaults 25. na.rm Logical. Whether missing values removed. Defaults TRUE. ... Additional parameters directly passed random forest ranger. important parameters instance mtry (number variables possibly split node), num.trees (number trees). details possible parameters see ranger example .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main function for unit-level MERF — MERFranger","text":"object class MERFranger includes following elements: Forest random forest class ranger modelling fixed effects model. EffectModel model random effects class merMod capturing structural components MERFs modeling random components. RandomEffects List element containing values random intercepts EffectModel. RanEffSD Numeric value standard deviation random intercepts. ErrorSD Numeric value standard deviation unit-level errors. VarianceCovariance VarCorr matrix EffectModel. LogLik Vector numerical entries showing loglikelihood MERF algorithm. IterationsUsed Numeric number iterations used convergence MERF algorithm. OOBresiduals Vector OOB-residuals. Random Character specifying random intercept random effects model. ErrorTolerance Numerical value monitor MERF algorithm's convergence. initialRandomEffects Numeric value vector intial specification random effects. MaxIterations Numeric value specifying maximal amount iterations MERF algorithm.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Main function for unit-level MERF — MERFranger","text":"exists generic function predict objects obtained MERFranger. MERF algorithm iteratively optimizes two separate steps: ) random forest function, assuming random effects term correct b) estimates random effects part, assuming OOB-predictions forest correct. Overall convergence algorithm monitored log-likelihood joint model components. details see Krennmair & Schmid (2022) Hajjem et al. (2014). Note MERFranger object composition elements random forest class ranger random effects model class merMod. Thus, generic functions applicable corresponding objects. details generic functions see ranger lmer well examples .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Main function for unit-level MERF — MERFranger","text":"Hajjem, ., Bellavance, F., & Larocque, D. (2014). Mixed-Effects Random Forest Clustered Data. Journal Statistical Computation Simulation, 84 (6), 1313–1328. Krennmair, P., & Schmid, T. (2022). Flexible Domain Prediction Using Mixed Effects Random Forests. Journal Royal Statistical Society: Series C (Applied Statistics) (forthcoming).","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main function for unit-level MERF — MERFranger","text":"","code":"# Load Data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Example 1: # Calculating general model used in wrapper functions  model1 <- MERFranger(Y = income, X = X_covar, random = \"(1|district)\",                      data = eusilcA_smp, num.trees=50)  # get individual predictions:  ind_pred <- predict(model1, eusilcA_pop)"},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest.html","id":null,"dir":"Reference","previous_headings":"","what":"'SAEforest' - Estimating disaggregated indicators using Mixed Effects Random Forests — SAEforest","title":"'SAEforest' - Estimating disaggregated indicators using Mixed Effects Random Forests — SAEforest","text":"package SAEforest promotes use Mixed Effects Random Forests (MERFs) applications Small Area Estimation (SAE). package effectively combines functions estimation regionally disaggregated linear nonlinear economic inequality indicators using survey sample data. Estimated models increase precision direct estimates survey data, combining unit-level aggregated population level covariate information census register data. Apart point estimates, MSE estimates requested indicators can easily obtained. package provides procedures facilitate analysis model performance MERFs visualizes predictive relations covariates variable importance. Additionally, users can summarize map indicators corresponding measures uncertainty. Methodological details functions package found Krennmair & Schmid (2022), Krennmair et al. (2022a) Krennmair et al. (2022b).","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"'SAEforest' - Estimating disaggregated indicators using Mixed Effects Random Forests — SAEforest","text":"package includes main function MERFranger wrapped SAEforest_model improved SAE workflow. function produces object inheriting requested results regionally disaggregated point uncertainty estimates. Additionally, statistical information model fit variable importance accessible generic functions summary (summary.SAEforest) class-specific plot function (plot.SAEforest). full documentation objects class SAEforest see SAEforestObject. overview currently provided functions within package can seen help(package=\"SAEforest\").","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"'SAEforest' - Estimating disaggregated indicators using Mixed Effects Random Forests — SAEforest","text":"Krennmair, P., & Schmid, T. (2022). Flexible Domain Prediction Using Mixed Effects Random Forests. Journal Royal Statistical Society: Series C (Applied Statistics) (forthcoming). Krennmair, P., & Würz, N. & Schmid, T. (2022a). Analysing Opportunity Cost Care Work using Mixed Effects Random Forests Aggregated Census Data. Krennmair, P., & Schmid, T & Tzavidis, Nikos. (2022b). Estimation Poverty Indicators Using Mixed Effects Random Forests. Working Paper.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitted 'SAEforest' object — SAEforestObject","title":"Fitted 'SAEforest' object — SAEforestObject","text":"object class SAEforest always includes point estimates regionally disaggregated economic inequality indicators MERFmodel element including information model fit fixed effects well random effects. Optionally SAEforestObject includes corresponding MSE estimates. case mean estimates aggregated covariate information, SAEforestObject additionally includes element, capturing number variables used weighting process aggregated covariate information. object class SAEforestObject, following generic functions applicable: print, plot, summary summarize_indicators. Additionally selected generic functions lme4 (fixef, getData, ranef, residuals, sigma, VarCorr) directly applicable object class SAEforest.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitted 'SAEforest' object — SAEforestObject","text":"Four components always included SAEforest object. MSE_estimates AdjustedSD NULL except MSE results requested. element NrCovar exists SAEforest objects produced SAEforest_model option aggData = TRUE. MERFmodel included MERFmodel object comprises information model fit, details performed MERF algorithm well details variance components. See exact description components. Indicators data frame first column area-level identifier additional columns indicators interest. Note objects SAEforest_model report \"Mean\". MSE_estimates MSE results requested. data frame first column area-level identifier additional columns MSE estimates indicators interest. Note objects SAEforest_model report MSE values \"Mean\". NrCovar means aggregated covariate information estimated, .e. SAEforest_model option aggData = TRUE. list containing variable names covariates used calculation needed calibration weights point estimates. See Krennmair et al. (2022a) methodological details explanations. Details object MERFmodel: Forest random forest class ranger modelling fixed effects model. EffectModel model random effects class merMod capturing structural components MERFs modeling random components. RandomEffects List element containing values random intercepts EffectModel. RanEffSD Numeric value standard deviation random intercepts. ErrorSD Numeric value standard deviation unit-level errors. VarianceCovariance VarCorr matrix EffectModel. LogLik Vector numerical entries showing loglikelihood MERF algorithm. IterationsUsed Numeric number iteratirons used convergence MERF algorithm. OOBresiduals Vector OOB-residuals. Random Character specifying random intercept random effects model. ErrorTolerance Numerical value monitor MERF algorithm's convergence. initialRandomEffects Numeric value vector intial specification random effects. MaxIterations Numeric value specifying maximal amount iterations MERF algorithm. call summarized function call producing object. data_specs Data characteristics domain-specific sample sizes number --sample areas. data Processed survey sample data.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fitted 'SAEforest' object — SAEforestObject","text":"Note MERFmodel object composition elements random forest class ranger random effects model class merMod. Thus, generic functions applicable corresponding objects. details generic functions see ranger lmer well examples .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fitted 'SAEforest' object — SAEforestObject","text":"Krennmair, P., & Schmid, T. (2022). Flexible Domain Prediction Using Mixed Effects Random Forests. Journal Royal Statistical Society: Series C (Applied Statistics) (forthcoming). Krennmair, P., & Würz, N. & Schmid, T. (2022a). Analysing Opportunity Cost Care Work using Mixed Effects Random Forests Aggregated Census Data. Krennmair, P., & Schmid, T & Tzavidis, Nikos. (2022b). Estimation Poverty Indicators Using Mixed Effects Random Forests. Working Paper.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitted 'SAEforest' object — SAEforestObject","text":"","code":"# Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[,-c(1,16,17,18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                          smp_data = eusilcA_smp, pop_data = eusilcA_pop,                          num.trees=50, mtry = 3)  #SAEforest generics:  summary(model1) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop, num.trees = 50,  #>     mtry = 3) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                         50 #> Number of independent variables:         14 #> Mtry:                                     3 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                     0.61678 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39256.1  39267.3 -19626.1  39252.1     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -4.1150 -0.5281 -0.0382  0.4546 11.7795  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept) 11807468 3436     #>  Residual             31310162 5596     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.2738432  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 9 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                                                         #>  0 -19603.76 -19607.91 -19624.46 -19649.65 -19642.96 -19637.26 -19657.55 #>                      #>  -19624.36 -19626.06 summarize_indicators(model1) #> Warning: For objects of class SAEforest_mean or SAEforest_meanAGG, only results for the Indicator \"Mean\" are reported #> Indicator/s: Mean #>                         district     Mean #> 1                      Amstetten 14208.38 #> 2                          Baden 22694.98 #> 3                        Bludenz 12353.13 #> 4                 Braunau am Inn 12190.93 #> 5                        Bregenz 33178.70 #> 6            Bruck an der Leitha 23362.81 #> 7             Bruck-Mürzzuschlag 23814.41 #> 8               Deutschlandsberg 20889.94 #> 9                       Dornbirn 19649.04 #> 10                      Eferding 15974.29 #> 11            Eisenstadt (Stadt) 36830.44 #> 12           Eisenstadt-Umgebung 25055.79 #> 13                     Feldkirch 16136.08 #> 14                   Feldkirchen 14208.70 #> 15                     Freistadt 16958.73 #> 16                       Gmunden 19699.47 #> 17                         Gmünd 13990.34 #> 18                  Graz (Stadt) 17707.20 #> 19                 Graz-Umgebung 34603.50 #> 20                  Grieskirchen 16439.39 #> 21                   Gänserndorf 19944.29 #> 22                       Güssing 16726.19 #> 23                       Hallein 16445.71 #> 24          Hartberg-Fürstenfeld 13201.89 #> 25                      Hermagor 13163.10 #> 26                    Hollabrunn 16671.26 #> 27                          Horn 15593.01 #> 28                          Imst 14015.55 #> 29              Innsbruck (Land) 26459.57 #> 30             Innsbruck (Stadt) 17373.35 #> 31                   Jennersdorf 13270.98 #> 32        Kirchdorf an der Krems 16312.97 #> 33                     Kitzbühel 12638.88 #> 34             Klagenfurt (Land) 22123.08 #> 35            Klagenfurt (Stadt) 33289.97 #> 36                    Korneuburg 27475.88 #> 37                  Krems (Land) 15532.84 #> 38    Krems an der Donau (Stadt) 17054.30 #> 39                      Kufstein 20653.26 #> 40                       Landeck 13111.14 #> 41                      Leibnitz 15411.42 #> 42                        Leoben 20252.23 #> 43                         Lienz 12756.54 #> 44                        Liezen 12286.10 #> 45                    Lilienfeld 15117.18 #> 46                  Linz (Stadt) 22364.19 #> 47                     Linz-Land 27320.00 #> 48                   Mattersburg 20346.41 #> 49                          Melk 12651.53 #> 50                    Mistelbach 19655.65 #> 51                         Murau 13216.12 #> 52                        Murtal 18607.36 #> 53                       Mödling 40944.31 #> 54                   Neunkirchen 16555.65 #> 55               Neusiedl am See 18822.68 #> 56                Oberpullendorf 17383.02 #> 57                      Oberwart 13230.64 #> 58                          Perg 17385.21 #> 59                        Reutte 18305.91 #> 60              Ried im Innkreis 13929.58 #> 61                      Rohrbach 14810.90 #> 62                  Rust (Stadt) 13759.57 #> 63              Salzburg (Stadt) 19778.01 #> 64             Salzburg-Umgebung 30546.99 #> 65        Sankt Johann im Pongau 14619.30 #> 66           Sankt Pölten (Land) 16932.18 #> 67          Sankt Pölten (Stadt) 16360.62 #> 68        Sankt Veit an der Glan 14931.66 #> 69                      Scheibbs 14276.15 #> 70                        Schwaz 15839.08 #> 71                     Schärding 10839.60 #> 72           Spittal an der Drau 13522.77 #> 73                 Steyr (Stadt) 18513.89 #> 74                    Steyr-Land 25229.50 #> 75              Südoststeiermark 14045.46 #> 76                       Tamsweg 15895.72 #> 77                         Tulln 20125.69 #> 78               Urfahr-Umgebung 41807.18 #> 79               Villach (Stadt) 22380.94 #> 80                  Villach Land 19774.73 #> 81                     Voitsberg 16869.48 #> 82                   Vöcklabruck 18097.68 #> 83                   Völkermarkt 15147.61 #> 84        Waidhofen an der Thaya 13027.79 #> 85 Waidhofen an der Ybbs (Stadt) 17212.47 #> 86                          Weiz 14784.71 #> 87                  Wels (Stadt) 13855.70 #> 88                     Wels-Land 20307.89 #> 89                          Wien 20201.31 #> 90        Wiener Neustadt (Land) 19432.27 #> 91       Wiener Neustadt (Stadt) 17196.77 #> 92                     Wolfsberg 16959.74 #> 93                   Zell am See 10639.47 #> 94                        Zwettl 13568.59 residuals(model1) #>           213           194           258           460           798  #>  -7726.155310   5625.667277    613.313099   -884.588239   4245.253519  #>           447           567           704           680           277  #>   1482.257452   2812.861950  -1035.674362   5286.018270  -5401.359834  #>            65           507           672            41           435  #>  -5104.341952  -1030.656664   6172.651753  -1894.271665  -1563.897181  #>           532           248            75           673           401  #>   -649.875284   8497.215329  -1772.623491  -1403.081041   -605.941596  #>           765           156           436            12           612  #>   7055.622099    945.334655  -3523.738142  -4588.211857  -1816.505091  #>           514           529           142           390           107  #>   -158.349288  -2714.495816   -419.009729   2232.279794  -6044.881163  #>           478          2806          2787          5385          3760  #>    204.196178   3054.962636   1070.278623  -4614.114594   3925.892964  #>          2552          3271          6185          6320          6080  #>  11027.404513   1164.269441  -3481.564734   1482.728027  -5161.518611  #>          5667          2638          4275          6175          6112  #>   -309.512419    172.703607  -1530.056696   -286.507140   1709.215249  #>          5838          5641          3705          3660          3609  #>   2522.896277    -88.083045    926.000657  -7100.620988   6661.533154  #>          2712          6686          5166          4054          4840  #>   2116.700709   2247.486076  -1309.327228  -9798.026038   -169.810191  #>          4133          6653          6871          5143          4922  #>  -1486.253329   4306.594979    -91.137711  -2898.355122  -4669.793623  #>          5927          7005          6332          4727          5439  #>  -3793.868526   2888.331861  -1939.083643    155.973461   -963.993706  #>          3887          6199          6667          3704          3450  #>   4536.643461  -2354.680129   4562.331446   3137.761424  -2742.221872  #>          6292          2636          5399          2838          4376  #>  12713.787729  -1386.464007   5512.249951  -5243.362242   4180.533957  #>          7138          2834          3916          5585          4065  #>  -2680.083644     24.198347   -291.060130 -10439.955463   2806.447847  #>          6249          6821          6958          6029          5513  #>    134.481715  -7129.961885   5096.224076  -5063.806334  -1219.577618  #>          5165          3738          4548          6291          3589  #>  -1300.443122   2723.588259   7405.229712  -5749.340574  -7185.482465  #>          3262          5338          3680          3983          6991  #>  -3450.846403    537.936260   3634.867866  -1540.654703   -117.601814  #>          4670          4466          6163          6026          3544  #>  -1897.292719   3793.316783  -2191.092464   4696.632084    397.450547  #>          2541          5640          4858          2939          4596  #>    797.554945  -4740.056833   1914.273985   6664.876871   -654.881701  #>          3129          2523          5060          6526          6244  #>   1012.782401   2025.707520  -3137.415233  -1050.642036   3078.794869  #>          5489          6008          6890          4207          6582  #>   3850.829202  -4457.929963  -2574.105831    830.253339    687.399377  #>          6993          4421          3548          7136          2817  #>  -3730.498288   -952.949077    276.352685   1214.938784    671.730591  #>          3325          6911          3577          4635          3958  #>   2290.370002   2063.664817    787.519164  -2007.843318  -1127.732034  #>          6484          3012          4848          6601          2860  #>  -2398.373792  -2002.548959  10757.960977  -5554.673315   3684.176502  #>          2556          5897          5781          3899          6099  #>   2336.980826   1460.621899    911.716531   8072.559679   -259.693717  #>          5524          4317          4638          5654          5285  #>  -3912.124085    635.014650   2065.656472   3531.410915  -2599.620796  #>          4961          3657          5045          6192          5889  #>   -208.386214   -386.958453  -6155.956984  -4716.978774  -4045.125106  #>          4199          2883          6294          4443          3747  #>  -2952.583200  -2972.706113   5040.226892  -3736.832510   1393.630006  #>          3755          7139          3358          3394          5210  #>    274.594817    170.380359    774.461705  -1103.964625   7412.436804  #>          2701          3550          5323          4470          5815  #>  -4323.542090   3151.330563   5127.317373    208.943609  -1247.003302  #>          6855          3856          4803          6646          5425  #>   3749.839207  -2199.662366     47.608157  -2803.032048    842.285581  #>          3914          4660          4710          6461          3623  #>  -2019.041735  -1286.110898    192.565530  -4350.825116   6442.155374  #>          2739          5650          3212          6872          6630  #>  -4865.550982   2074.361677   2354.838179   4789.505107   8924.477282  #>          5146          2917          5952          7046          3500  #>   8534.856052  -1776.729697  -3959.441043   -919.047891  -3160.443815  #>          3592          4618          3649          4653          4117  #>  -2927.348420  -2055.733906    372.900911   6869.584684   9480.206065  #>          6910          3695          4312          3533          4547  #>  -4196.359628  -3471.944469  -2160.942101   1660.478614  -3106.673982  #>          4732          2872          4291          6235          6380  #>  -3962.378160  -2701.631509   4127.924714   1302.648358  -3137.900284  #>          2697          4333          3813          6647          6076  #>   3058.248087  11072.863797  -3832.347859  -1183.785312  -5485.728122  #>          2764          7051          4043          4846          3121  #>  -5244.450714   8936.433683    358.317612  -1900.102130  -1036.552135  #>          6528          4380          5982          3719          5784  #>    459.562427  -3911.843828   4657.119592   4210.023433    339.761556  #>          5993          6924          4761          3656          4818  #>    -47.070091    551.243945  -4060.945797  -3035.928722   5325.622686  #>          6541          2779          5230          6481          3411  #>    522.851617  -2998.194103   2575.014239  -5533.673351   -671.914868  #>          6436          3612          4360          5892          6136  #>   2994.412921   7700.994891  -4545.016673   -562.536329   7586.705570  #>          6451          4267          3768          5920          4374  #>  -2302.739344   -801.054549   1479.714720  -8741.167814   1306.840779  #>          7018          5044          7103          3294          5777  #>     42.407040   3851.674491    389.078572  -2355.776751  -3798.776795  #>          3909          5469          5223          6202          4095  #>   2613.124417  -4012.169925   1929.718783    907.424570  -3113.466319  #>          5089          7119          4784          3388          4002  #>   -929.477393    704.629843   1744.212957     95.385384   1761.913902  #>          2721          6960          4869          6338          3674  #>  -7594.803296   7154.667674   2630.902072    940.683843  -5323.806578  #>          4326          4342          4178          6226          6238  #>   3068.722961  -1694.632551   1494.583935   6100.498063  -5405.264202  #>          4677          6264          6651          3893          6279  #>  10671.555901  -4913.109880  -6860.515956    375.564904  11064.464738  #>          5260          5945          4613          3630          5062  #>  18036.826699  22009.017625  13645.070661  11287.649376   8302.935273  #>          2750          2762          3508          3191          3072  #>  -2216.697417   9775.856858  -1394.208477   8724.034195   4384.725544  #>          4527          3514          7026          4507          5437  #>  -8947.019556  -6808.004765  -1501.135249  -6795.625885   6097.272120  #>          5269          7040          5753          3784          2648  #>  -4365.146510  -4397.948176  -2012.516852  -9116.088213   2097.792292  #>          4911          2771          4574          5691          6059  #>  -3286.847284 -14020.812246   -277.915440  -6214.233601  -2367.424253  #>          4908          3019          3844          4056          2715  #>  -5439.816095    592.614905 -10286.602099  -2652.171574  10081.083383  #>          6913          6354          2912          2927          7083  #>   1200.910151  -4908.575391   3423.869351   -543.586017  -3055.514196  #>          5418          4420          5443          6027          2664  #>  -4949.068694   3278.153598   1432.154829  -3111.835127  -5754.998780  #>          5734          4997          2926          3173          2782  #>   -915.391674   -618.843079  -4747.649367    460.899226  -3581.083885  #>          4709          5441          3298          4050          4879  #>  -1653.247811   9503.888552   1031.339515  -3040.561754   6214.633408  #>          7076          4017          6742          2802          4149  #>  -3376.990281   3829.998687   7233.866707   -349.718999   4070.606110  #>          5980          6893          3217          4588          6538  #>  -2783.065170  -1170.930203  -3874.081257    248.356127   4742.294635  #>          5666          3310          2905          4324          3037  #>   4187.798155  -4925.495199   3686.547997  -1413.294005   1291.262921  #>          3843          3185          4666          2947          6721  #>   1835.956398   3877.988863   1007.161019      8.371221     59.166617  #>          6246          2983          4565          5422          5745  #>  -7757.449371   5558.764696  -1607.546172  -4107.651906   2833.222015  #>          6227          4347          6161          6127          3021  #>   -206.676572   1929.972154   3483.924574  -1510.920796  -3624.473422  #>          5180          5375          6650          3228          3569  #>   5656.097419   -437.055214  -4421.973641   3739.449059  -6041.739856  #>          7077          4270          4822          5235          3275  #>  -3655.619060   1608.827994  -4045.224498  -1265.371773    225.506992  #>          4959          2627          5272          5322          4601  #>  -4870.338861   -614.369146   7180.228409    829.353413   7773.382935  #>          5258          4069          5148          3882          3307  #>   -403.368857   -460.156996   -405.572226   3044.187650   1592.472087  #>          5358          2681          5508          5463          6662  #>  -1800.786569    911.468690   2003.760739   1814.857875  -8607.888748  #>          2851          5984          6720          5983          5869  #>  -3532.530044  -1360.245388   -780.295873    884.170982  -2729.801254  #>          3105          5026          4814          3734          3267  #>   2020.205038  -5564.338327    915.736157   7787.655369   6139.045326  #>          3601          5981          5577          3931          4503  #>   2863.201561  -3460.272702   5153.707623   1014.682832   3783.335012  #>          5543          3323          6205          7032          4145  #>  -2781.544140  -2403.792579  -3389.654774    522.497540   -661.627084  #>          4256          2970          4744          4740          3928  #>  -6024.945262  -1403.268082   -127.272018    128.892224   4593.733990  #>          5403          3107          3798          6965          3591  #>    697.863606  -5754.076235  -2767.997189   2166.388050  -3527.884105  #>          5332          2957          4662          4563          6442  #>   4256.902356  -4686.914696  -2777.950204   2579.002147   -479.785582  #>          5574          6896          7133          3197          5130  #>  -1397.089335   -784.033558  -3095.107536    393.326506   2700.845714  #>          4924          5702          6937          6399          6018  #>   5885.220132    410.737393   7070.594165  -3023.494885  -5861.010559  #>          6520          5701          6485          4356          5084  #>   4912.835847    495.904466  -1546.732677  -8301.957610   5132.932104  #>          4413          6881          6446         19888         19002  #>   5094.708564  -2886.761182   2420.300819  32825.310307  21831.703485  #>         18315         20371         20862         21386         21124  #>   6158.818936   4965.180924   9011.937646  11963.821234   7933.477990  #>         21694         21420         22630         20981         18630  #>   9051.393704  -3386.170232   -909.555051     90.220578   2226.609189  #>         18313         18238         21052         22103         19650  #>  10882.833247    932.826091   5026.360398   4279.995407    643.139686  #>         20548         23178         23814         23535         23711  #>   6398.864599   7946.987432   7742.474613  10049.046730   3525.695796  #>         21778         19831         23072         20153         20500  #>   4063.938224   -457.139849  14596.610831   7446.098803   2245.958050  #>         20483         23502         23268         22897         23972  #>   4419.268877   -360.409942  -2620.260572   1424.589064   8494.278447  #>         18689         22742         21776         19453         19908  #>   1455.208487  -1570.008850   3803.200348   -660.690458  -2323.019415  #>         18589         23641         22342         20947         21075  #>  -4360.356510   7435.902083   -809.789500   5091.972018   5464.805095  #>         23365         21917         20956         22397         23123  #>  -1287.406896   2303.500506   -439.115079   5731.560023   3029.078118  #>         20533         19614         18300         18856         21830  #>   7259.882117   1658.558139   4739.609671   -379.629636   1630.441937  #>         19222         22581         19761         19842         23427  #>   3686.648168    904.442748   1309.190030   1950.612281   8657.693253  #>         23480         19824         21803         19318         23274  #>  -6003.571322   -127.902063   6438.458502   1176.494429   2495.873291  #>         21617         20287         21937         22381         19784  #>  -2427.720682  -7020.658831  -5718.823382  -2323.031542   2154.694938  #>         21084         20734         18518         19329         22350  #>  -2698.118923  -2484.903600   -137.145014   1939.028302    949.990477  #>         23104         18411         23216         19359         23117  #>   1801.237019   6875.350963  -7346.249865  15272.380688  -2828.156361  #>         19382         19665         23051         20991         21044  #>  -4529.746509   1418.320373   -566.553532  -2149.743427  -9414.138375  #>         22752         18563         18772         21808         22355  #>   4420.257280   4778.335368  -1826.024866  -1957.985009     78.967459  #>         21231         23666         20912         18510         18671  #>  -2837.255565   -324.119496   4446.083911   -192.259987   -637.881574  #>         23637         19136         19765         22042         18873  #>  -3036.766364   -484.700734  13749.452677  -1342.649392   1669.358803  #>         19928         22478         23450         20441         22540  #>  -6837.318328  -1252.058747    346.757695  -6263.313330  -1222.405286  #>         20618         19316         20353         19845         21205  #>   2092.345292  -1538.440695  -9203.423544  -5074.515653   -324.662594  #>         19859         20591         22968         22184         20426  #>   4269.387269   6708.924707     38.332296    402.952743   7231.539534  #>         23654         19871         23057         20891         22932  #>   6506.174200  -4552.240554   -511.424765    223.146469  -3066.627092  #>         20649         23328         21157         20457         19169  #>   -877.021581  -1242.041289  -3101.326411  -3888.280787   -445.212557  #>         23576         21825         22360         18652         21962  #>  -3425.508259    741.035850  -3061.824024   -867.805216   -780.200053  #>         21684         19402         20539         18653         21049  #>    785.023291   -238.038226   6208.269475  -2095.702970  -2571.413918  #>         19105         21339         19901         23056         23545  #>   1552.192933    453.444008  -1226.095498   -193.147262   2292.915911  #>         21304         22121         23931         19403         20857  #>    326.469875  -1578.485188  -3367.080143   1182.891029  -4146.626492  #>         19726         20770         22683         20207         19143  #>  -1998.619558   5703.088584   4147.997256  -5036.031599  -3995.517724  #>         18528         18927         21095         18296         18626  #>   2691.597688  -1768.738774   1413.443375  -3989.371879     94.932295  #>         22140         22709         22236         22470         22066  #>  -5263.143612  -6654.096761    -47.692546  -2724.632508  -3340.030243  #>         23160         19035         22812         20993         22912  #>  -2888.361319  -2581.960759  -9908.684018  -4335.918049  -2612.217207  #>         23971         22911         18201         22878         18688  #>  -2199.005282  -3518.363617   -134.868014  -3384.079428  -3731.170853  #>         21121         19706         20386         23896         18687  #>   -303.141020  -6869.840016   1994.377690  -5772.011614  -1707.587562  #>         23761         18408         19530         19680         20678  #>  -1122.164344  -9711.310737   -586.391292 -11736.263462  -8679.552077  #>         18505         22555         23045         23454         23852  #>  -5779.912569  -5909.147593  -7101.339007   -678.493152  -2073.967973  #>         21837         20480         23448         21920         22754  #>  -8027.444979   -633.592588  -6706.578111 -10864.007959  -4849.451598  #>         20120         22972         19722         22451         19531  #>  -4099.304568  -7405.150839   -809.924307  -6317.296533  -2327.035418  #>         23991         21023         22857         22590         22513  #>   1108.306643 -10075.893931  -3434.438023 -10573.650269  -1189.740358  #>         20275         19585         21612          2127           843  #>  -2718.739528  -9069.259668  -8400.901379  -1632.427288  13030.520825  #>          1710          1281          1102          1696          1200  #>  -7893.154771  -8026.866167   5449.148119  12998.246300   -903.101811  #>          2002          1446          2137          1301          2411  #>   1240.730888   -700.300658   4814.303229  -1837.213840  -4527.365326  #>          1104          2072          2235          2175          2510  #>  -4745.388052  -5823.056306  -4123.789421   4645.952247   3117.503490  #>          1114          1617          1430          1159          1575  #>   2887.021874  -1871.849252  65912.739125  33001.986967   5168.297285  #>          2022          1240          1768          1254          1510  #>  -4753.602119   6722.768428  -1415.577927   -201.391770   1342.352929  #>          2246          2036          2104          1115          2321  #>  -1288.174688   2656.675993   4041.025053  -4308.128459   -438.237287  #>          1890          2239          1728          1265          1428  #>  -4040.454003   -488.213281  -5288.626175  -2843.327010  -1761.976795  #>          2161          1940          1438          2068          1330  #>    379.959397  -9286.696825  -9195.325707  -7525.143086  -6666.551590  #>          1522          2517          2343          1271          1238  #>  -8751.722804   1153.820067  -1876.572499  -6938.799972  -8070.726829  #>          1400          2232          2214          1563          1079  #>  -4176.405623  -7666.300858  -5139.947407  -2393.717967   1601.297651  #>          2327           806          1992          1553          2305  #>  -3674.478877   1126.382485  -1865.781736   4345.219801   3349.036687  #>           967          2216          1022          1971          2431  #>   7567.200069    840.099783   2390.616333   6541.977279  -1770.841837  #>          1369          1307          1506          1455          1581  #>  -4072.997235     80.203177    632.039937  -9771.587740  -3085.049386  #>          1598          1589          1270          2318          1226  #>    326.321487   4434.020566   2748.666972   2680.664701    153.757839  #>          1972           903          2391           859          1469  #>   5030.516044    807.244720    595.610592  -6265.459931   4102.425951  #>          2003           824          1819          1916          1898  #>  -4842.224098    109.157597   -778.127874  -5466.381811   1032.121032  #>          1148          2167          1242          1206          1936  #>  -1164.835643   3054.101500   2371.420946    316.734601  -3893.052952  #>          2262          1336          1162          2501          2507  #>  -1753.359674  -2025.721955  -1141.890110  -4136.079592   -652.390085  #>          2434          2344          2390          1947          1709  #>   3403.533367  -6734.544570  -4084.806851   6212.956041    993.780429  #>          1706          1143          1141          1754          1138  #>  -8536.183719  -1268.320228  14482.657835  -3382.522074   3186.438276  #>          1646          1843          1291          1250          2356  #>   1567.316181   1943.236377    567.859936  -5196.281468    738.587901  #>          2301          2460          1144          2477          1878  #>   -555.416061  -3415.979168   3885.403259   3359.781017   4088.148524  #>          2043          2306          1930          2331          2264  #>  -7408.180561   2316.716023  -2429.290860  -1251.834474   6530.424556  #>          2187          1033          1567          1376          1039  #>  -2062.599770   3908.230947  -2978.317602  10262.145825   5217.374759  #>           987          1187          1834          2408          2285  #>  -1242.272004   2401.484165  -8778.447869  -2007.717819  -6402.607213  #>          2351          1317          1729           878          1657  #>   7708.470136   2012.871156  -5773.779829   2588.488920   2435.310583  #>           939          1158          1150           812          1525  #>  -3071.002320  -5810.537547    476.120154   5905.523393    274.185272  #>          2174           891          2006          1103          1659  #>   4579.417124    -73.572652   2318.159420  -8304.818422  10184.590625  #>          1486          1602          1462          2265           930  #>  -5562.353310  -3877.061871  -1417.426359   2322.450029   4223.252206  #>          1391          1994          2362          1557          1063  #>   1740.740075   3242.426121   8425.891876  -6498.730831  -5079.476467  #>          1632          1619          1278          1808          1726  #>    644.747616    196.504392   -632.326420   -401.404890    869.749361  #>          2150          1331          2144          1977          1080  #>   1203.701692 -10010.751647  -6653.908783   4479.569065  -2039.001929  #>         10177          9814          9972          9967          8819  #>   -583.953194  -7081.745254  -3945.314892  -4276.393702    437.752640  #>         11461         11711          8986         11599         10250  #>   3218.956273   2616.145055   6120.217846  -2707.832880   3324.321198  #>          9306         11061         11146          9265         11762  #>   3497.378606   4024.659307    385.940760     61.993608   1193.242990  #>         10020          9362          9930         11243         12167  #>   9728.635971  -7146.740777  -2574.020596   -504.858898    651.888582  #>         10982         11544         11657          9132          9628  #>   2321.302865  -3153.510236    998.971364  -6959.645311  11329.994789  #>         11869         10387         10373          8955         10857  #>   1513.930405    459.438209  -2513.583549   -807.048348   9417.028778  #>         11320         10178         11928          9237         10444  #>  -1935.137727 -13555.352920  -2012.820314   -846.190499   -642.060977  #>          9685         11596         10697          9809          9525  #>    509.225468   3573.532279   -609.616786 -14565.977646   6586.517767  #>         12012         11355         10412          9701          9957  #>   2204.314042   5695.438818    384.758345   7107.395526   1744.506959  #>          9945         10244         10891         10396         10480  #>    668.983861  46784.613897  19738.847755  25773.783575  15876.259966  #>         10194          8839         11910          9023          9560  #>  22441.327301   3509.450365   3915.733177   2464.839960   4119.930439  #>          9385          9616         11849         11117         11523  #>   -122.180848   2080.874995  -2346.993121 -14991.625006   1350.661113  #>          8821          9914         10144          9652         10714  #>  -5377.335367   4015.219427  -7712.239943  -3762.268522  -9760.287865  #>          9444         11089         10741         10034          8923  #>  -2002.525635   1748.941855    -29.077330 -14053.559852  -5605.178917  #>         10180         10656         11803          9354          9098  #>   4020.581972  -7139.732837  -2964.144297  -1116.948045  -3997.095430  #>          9155         10551          9821          8933         12046  #> -14586.618843 -10925.568636  -4579.257904   1475.487901  -9020.002746  #>          9179         11064          9263         10816         11854  #>   2888.894219  -8779.009907    605.420487  -5159.983293  -6876.017805  #>          9727          9742          9927         10504         12005  #>   3232.242376  -3273.444942   5282.498156   2452.217772  -4943.065543  #>         11242         10826         11138         11452         10246  #>   -722.442035   1924.294828  -5018.764193   3266.995014   3943.045967  #>          9588          8879         10100         10704         10983  #>   -314.757368  -7194.532058    204.005149  -5190.969118   2051.020576  #>          9365         11344          9310          9710          9050  #>   1356.823335   2183.716698   3057.830098   2021.841797  -1276.480280  #>         10342          9593         10159         11693         10798  #>   2575.818710    827.144536   8555.649950    466.962241   -129.087554  #>          9912          9236          8999          9347         11489  #>  -3444.816458  -7305.961519    548.988048   5305.487749  -3389.341449  #>          8939         10768         11568         11983         11141  #>  -2006.694163   3089.129781    111.843676  -6400.918212   1122.805216  #>         10426         10574         11270          8945         11057  #>   1696.656050    111.611413   1312.189546    -55.550796   1347.806529  #>         10460         11993          9948          8962         11241  #>  -2086.524612  -7214.446568  -5008.180307   8020.471036   1308.660256  #>         10275         10678         10613         10732          9953  #>  -2288.284400   3311.842677  -4368.896660  -2769.731833   -721.567159  #>          9296          9129          8917         10050         11373  #>   2081.627140  -4963.437359   3474.032666    980.427712   3593.143786  #>         10571         11601          8984          9400         11075  #>   -183.723172   1277.039688   4792.348206    527.104205   -271.619222  #>          9268         10132         10490         10895          9554  #>  -4127.166060   4876.838720  -2355.977524  -6849.584489   3245.321807  #>         10397          9623          9718          9174          9925  #>     63.234717   -917.532268   1528.790806    480.291210  -1879.217088  #>          9269         11187         11746          9323         10783  #>  -1686.690913  -1086.209625  -1898.641082    689.448689   4480.289145  #>         10663          9102          9085         11404         12101  #>   -892.417586  -5602.303579   3053.618544   -505.912634   1218.588882  #>         10367         10575         10659          9979         10258  #>  -2478.692071   2529.659655  -4084.641829   -741.049343  -5054.267932  #>         11215         11221          9032         11960         11212  #>   1252.920255     35.942593   4693.503727   2594.278976    498.989969  #>          9576         11499         11000         11391          9559  #>   4025.085599  -1325.912481  -8370.962854  -2290.981973   3398.796931  #>          9187          9455         10938          9811         11982  #>   3809.229770   3125.056724    598.343901    228.624774  -5640.123505  #>         11705         11235         10458         10985         11625  #>   -606.271196   1523.910171   -484.973843   6574.705834  -2489.970039  #>         11441          9071         12182          8820          9311  #>    821.464000  -3704.728784  -3929.791735   3030.343904   4212.458060  #>         11511         11925         10949          8870          8989  #>  -3908.835582   3867.479159   3251.276710  -1662.286253  -1774.239607  #>          8907         11926         10805         11228         11552  #>  -1747.690710   1559.049729  -1449.721108  -2741.666692  -3796.045466  #>         11988         11924         10845         10221         10164  #>  -1066.696206   1944.558834   1405.144811   2890.854687  -2351.841694  #>          8990         10438         12177          8898          9956  #>  -1406.264954   2163.814385  -3408.063880   -587.567548  -3939.548855  #>         11119          9259         11385         10472         11115  #>   1993.602309   4383.044294  -5197.138726    677.132692   2540.468873  #>          9391         10318          9806          9496          9603  #>   5049.768307  -2781.220495  -1054.891012  -3230.276366    907.681338  #>         11976          9290         10781         11247         11660  #>   5654.167383   3171.408264  -2372.885520   5427.965451   1952.175217  #>         11686         11245         12197          9314          9822  #>   -615.030735    323.904347   1929.601427    951.208309   2193.919796  #>         10818         11673         11600          9539         11312  #>   2605.590141   2408.432273  -6249.362516   1510.851087   -264.533103  #>         10152          9543          9725          9441          8997  #>   -619.506394  -4271.464238    640.554831   2863.887889  -3971.003268  #>          9470          9599          9332         10716         12038  #>   2418.962536  -1769.344209  -4243.039303  -3464.362460  -1584.584868  #>         11121         10384         11033          9653         10266  #>  -2508.345601  -1210.701274    952.623598  -4441.538632   3609.676084  #>         12054         10173         11459         11745          9621  #>   -871.007376   4215.792494   -387.285083   3560.472157   1506.429813  #>         11400         11724         10990         11464         11533  #>  -1248.426468   6389.796383   2489.257464   5377.960947   2881.296699  #>         11184         10245          8862         10352         12055  #>  -4694.909658   4227.884487    617.119635    918.715174   4277.371618  #>         11267          9196          9239         12052         10263  #> -23025.482874  -5424.557037   2771.874927   1027.214991  -1386.687440  #>          9080         11977          9650         10875          9799  #>   -769.086994  -4613.516310   1801.017192  -2337.060115   1792.392254  #>          9421          9230         10578          9136          9257  #>   1524.160870  -2446.914518  -3854.631157   3404.512275     22.255540  #>          9991         11820          9776          9304         11760  #>   8574.534618  -2948.685916  -5641.071891   2343.134239  -1033.146006  #>         10959         11806         10035          9955         11313  #>  -3734.946582   3082.902778  -1859.840829   5471.274233  -7318.228291  #>         11343          9973         11702         10327         10635  #>  -2510.572863   5454.799627   2948.234678   4194.424969  -3724.782167  #>         11832         11594         10370         10603          9475  #>  -1414.420915    112.937504  -9918.732119  -3569.890217  -2269.933642  #>         10828         11011          9531         10851          9204  #>   1670.808014   4088.911319  -3824.373387   5882.383288   1058.059564  #>         10225         11195         11517         11013          9022  #>    430.601525   4852.556687  -1748.045578   -802.336455  -2223.880569  #>          8875         11036          9712         12111         10793  #>    115.968811  -2955.191867   -649.710391   3566.653633   7489.188422  #>         11737          9573         10935          9639         11194  #>  -5857.351839  -4389.911922    585.798725  -4054.834284  -2117.170209  #>         10165          9031         11092          9882          9894  #>  -1977.002553   2003.176639  -2023.862068   -158.085833   6673.912886  #>         11018         10282         11741         11363         11575  #>  -2259.246610   6950.215592  -3009.968425    683.567693    133.619276  #>         10273          9772         15687         17545         14717  #>    525.448000   2873.920492  -6406.475069    996.750780   1189.552221  #>         15060         17725         16189         15752         17687  #>   2329.960736  -6619.808786   3171.418017   3068.757131   5044.903664  #>         14326         15530         15393         16553         18141  #>  -3031.821533   3970.497146   2940.888066 -10887.948256  -5610.830011  #>         17346         16330         17591         16567         16093  #>   1433.860975   2226.905921  -2766.191135  -4528.192810    279.351256  #>         14153         14737         15396         15526         17243  #>   3610.867384  -1810.151359   1589.038504   2857.226920   3627.902611  #>         15089         15551         16212         15767         16529  #>  -1995.399499  -7965.613345   -213.570247  -1691.826673   4403.572561  #>         16406         15430         16153         14782         17551  #>   3317.405247    147.847292   1855.038612    439.537123   2721.401295  #>         15569         16666         14279         14838         16030  #>   -497.190571  -2500.830969   1099.554057   3213.219178   6883.071103  #>         17605         17513         16887         14126         17382  #>  -1288.789210  -3265.676659  -5865.719004  -2596.359024   2080.098331  #>         15111         15021         17809         16245         16899  #>  -2005.175005  -5709.158161  -3349.935089    929.611454   7020.030069  #>         17481         17230         15348         18084         16215  #>   3585.569052  -8702.075593    186.944919  -1685.065419    -52.944654  #>         15876         17557         15770         17985         18037  #>   -631.585493   -657.089084  10678.587115   -457.763710  -4880.191659  #>         17894         17070         16275         17300         16101  #>   -778.665884  -1922.856663   -784.597651   1500.778069   1300.428447  #>         16752         15801         16410         15573         16796  #>   2177.044229  -3264.806411   4615.502994  -1362.360706  -6842.696764  #>         16983         15261         17991         17603         15892  #>   2779.662413     94.093566   -839.621235     19.595541   8226.448649  #>         17778         17363         16356         17960         14550  #>    259.893918  -5342.333409   2011.787701   2438.706771  -4095.900986  #>         17458         17071         14251         14296         17433  #>  -3341.262267   2837.359557  -1939.398928  -3461.069010   2740.819836  #>         14463         18023         14212         17879         15595  #>   8297.340618   2214.968306  -6425.350300   6456.273348  -9362.673773  #>         17743         16656         17207         17881         15705  #>   4817.530967  -1037.456196  -1784.915732  -1458.125716   -758.136062  #>         17826         15813         14746         14539         17386  #>   3041.436728   1974.100479   3291.725072    571.006417   2798.689563  #>         18117         16398         15697         16512         16094  #>  -3929.298661  -4492.578170  -6003.144814  -2283.697091   1008.959796  #>         16799         16766         15134         17415         14670  #>  -7500.551963   7945.472807   9786.469031   1752.629833  -1783.918574  #>         16949         17804         15367         14571         14118  #>  -3483.781638   1500.785683  -1054.595259  -7637.724262  -3114.189868  #>         17723         17857         16450         16412         16176  #> -14649.029379  11624.470075   7247.491841  -7636.684217   3352.464236  #>         15839         16283         16542         14294         14761  #>   5193.627278   4430.294472  -1919.588400  -2517.023252  12180.163505  #>         15545         16904         16448         17111         15746  #>  -2532.182939   4005.851376   -659.413313   4434.735687   8608.316476  #>         16896         15187         17412         17594         17038  #>   2397.357411  -3718.771182   4472.557738    706.608164   -339.063141  #>         16313         18107         15541         15211         16982  #>  -5809.558502    604.063978    968.887568  -1048.877871  -3916.198598  #>         16280         15167         16551         16111         17767  #>   2485.308887  -3997.104096  -3357.962417  -6167.886593   5167.369313  #>         16321         14104         14412         14527         17232  #>  -3767.363435  -1284.049735   7046.799654   3509.471375  -1554.203617  #>         16698         15643         17929         16217         15076  #>   4451.101458  -3166.570710  -2882.694040   2503.790540   2219.885533  #>         15219         17720         16106         17099         18073  #>   8529.434922   2075.464524   -166.759521   3859.059008  -4681.856906  #>         16365         15164         17287         15181         15868  #>   8347.131698   3486.579084   5835.006826  -4189.405870  -3027.940567  #>         15046         16779         16797         17485         15124  #>  -1013.842493   5938.488544   1459.081315   3853.718083   3702.635265  #>         14509         16657         17254         17131         15672  #>  -1773.461412   6027.087276  -3505.404456    275.886127   -939.247516  #>         14894         15065         15910         16371         14702  #>   -686.830567  -1575.905199   1571.092446    150.701862  -1831.042466  #>         15623         17352         14547         15288         18120  #>  -1684.871990   3821.939883 -14832.610463   1488.800152  -9690.911230  #>         15378         17127         14768         15954         15271  #>  -6783.682501   1052.457717   2049.970121  -3969.623014  -1727.921081  #>         14866         17209         16080         17941         15395  #>   3955.127976   2283.031932   4102.771179   2613.960503   2188.282424  #>         14956         15009         17827         15809         15090  #>   5171.312785  -5278.915190  -8023.599048  -2377.825077  -1952.441129  #>         15237         14295         17241         16304         16487  #>  -3766.909423  -5945.545571   7543.005841  -3053.341095  -3011.055108  #>         17837         14622         17704         17039         16205  #>  -3917.796782    793.816522   7012.276845   -148.097169   2062.626951  #>         16002         17281         17657         17156         17543  #>  -6968.327515    222.262373  -1719.562394   6487.088261  -3394.423801  #>         17538         17672         14333         16876         17197  #>   2621.485022   1220.726383   4676.131561   2186.898261   -587.202343  #>         16329         14842         15727         16524         16635  #>  -3382.483509    673.447943  -2877.808708  -1290.819045  -2364.110761  #>         14573         14522         15983         15515         16198  #>   -810.071487   1538.215776   7690.913021  -9319.863153  -2202.694566  #>         16174         14798         14677         16823         17866  #>  -3248.398390   -331.654400   3384.878137   1488.620678  -1049.567868  #>         16034         15640         16102         17370         16183  #>  -1358.885510   1988.151501  -1971.125113   5239.753455   1861.782722  #>         15665         14417         16764         14767         15890  #>  -1704.310078  -2281.292046   -540.410558  -1511.370826   4351.740353  #>         14282         14394         17549         17921         14735  #>   3897.232464  -3196.838656    133.756431  -3063.300013  -2010.380694  #>         17912         15554         16496         17624         16862  #>    720.166997  -9730.818057   5474.111095   4262.328567    912.666477  #>         15282         15928         15511         14432         17527  #>  -2892.576991   2996.229759   -829.118131   1703.395684  -3015.385673  #>         17951         14559         16702         15691         14887  #>  -2479.922778   4332.654032  -4100.334801   3629.399374   -769.709770  #>         17566         17599         16746         17121         16372  #>   5671.078313   2111.473664  -1045.977219     50.891830  -2289.366136  #>         16105         15810         16622         15079         16977  #>  -4665.795174  -5935.333666   1777.840720  -4612.559894  -4743.652471  #>         15432         16962         16641         16375         15421  #>    966.850195  -1649.720360   2809.275477   -605.873396    187.800169  #>         15100         16873         17178         17247         18041  #>  -2485.621390  -6185.176881   1590.695163   3494.873904   2120.665162  #>         15581         17629         14731         17356         17546  #>  -3056.985902  11231.947729  -2185.481794  -1786.248717   -126.144591  #>         17421         17635         15295         15674         15109  #>   5897.674737   2519.551529  -6456.348916   2859.679467   3317.665385  #>         17764         14773         15478         14284         16314  #>  46503.105071   1872.125607   4053.697416  26276.740176   2549.714955  #>         16604         14178         16814         15807         14270  #>   -246.876225  -3280.689702   1992.253057  -4247.996071  11536.951887  #>         15016         17216         18108         14499         14951  #> -12163.992813    392.204560  -4963.118450  -2588.066943  -3877.587921  #>         16889         14166         15034         14651         16582  #>  -6452.740613  -1811.989830  -9421.059551    487.751220  -2490.819474  #>         17777         14812         14910         16022         17153  #>  -5559.287553  -4785.447721    727.348650  -5494.537521    664.203848  #>         14633         17378         15206         17668         16173  #>   3809.155069   5027.504463   -382.366467  -2504.505680  -3322.448135  #>         15616         14513         17942         14516         17783  #>   2804.764234   5110.190593  -6283.682977  -1135.272115  -1685.921344  #>         15766         17656         16436         16229         16326  #>   1552.588694  -1060.619777   4878.970371   1401.159499   4596.930299  #>         17604         17418         17797         15897         16433  #>  -5069.652596    477.182264   2590.536590   1375.495400   4400.838988  #>         16562         15180         17745         15977         17148  #>  -2077.943603   -532.354901  -5100.317330   -332.242754  -4008.365660  #>         17899         15014         14836         14387         17313  #>   2786.215504  -6513.543780    254.796626    481.358748  -8343.958629  #>         15260         14248         16339         16359         15495  #>   4971.707522    -47.467159   3370.146951    151.020492  -1723.426018  #>         14156         14526         16624         15960         14456  #>  -3354.568725   3068.248010   7893.997357   -406.633705    498.622982  #>         15047         16112         16568         15538         15648  #>  -6279.396103   3657.809054  -1324.924021   7110.414559  -5363.541808  #>         17371         17196         14930         14708         17358  #>  -1121.069354   4739.248807    877.954478  -2145.359966  -3257.818228  #>         17729         17943         15592         17284         17612  #>  -2990.829792  -2141.782241   -318.980435  -9490.988919  -1934.707829  #>         15591         16926         16488         15520         15695  #>  -4126.754502  17809.031075  -1008.033056  -2317.923676   2687.461498  #>         16906         16133         16680         14854         14198  #>  -2590.903193   -183.658381   2033.022742   -936.252842     12.275529  #>         14436         16050         15188         14784         17262  #>  -3194.490159  -4403.816473   1251.313286   3722.396727   4696.002392  #>         15578         17208         14233         18043          8684  #>    443.088001  -1083.224453  -5618.713994   1424.289621   3956.127535  #>          8490          8215          8173          8806          8698  #>  -9335.089906   -115.573479   1481.950967 -11157.247088  -2317.140692  #>          7207          7801          7951          7369          7959  #>   3174.596066  12303.431295  -7012.299627   2852.408874   3091.039213  #>          7974          7712          8489          8470          8257  #>    166.985113    423.136791     -2.754562    809.770935   1685.226168  #>          8415          8185          7440          7928          8401  #>    330.497340   1096.829963  -1672.350934  58835.405443  37203.172092  #>          8793          7522          7823          7458          8792  #>  17328.409512  20525.553895   5121.627132 -14546.147103  -6002.214162  #>          8182          7506          8172          8305          8241  #>   -798.037703   6948.845905   7359.316039  -5016.204060  -5723.236447  #>          7762          8383          7659          7860          7937  #>    407.235501  -9239.432707  -6991.048911  -3374.567101   5613.364752  #>          7400          7358          7555          8131          7723  #>  -4794.674522   7146.714114  -7169.507415   -537.475303  -8393.607514  #>          7175          7693          8283          7282          8585  #>   1360.971034   1220.021404  12697.729452 -11197.349081   -865.660984  #>          7887          7368          8304          7151          8550  #>  -7798.645912   1349.469429  -4480.919623  -3783.102015  -8783.223940  #>          8743          8442          7415          8484          7608  #>  -7545.457286  -3765.192432    541.479805  -5412.554202  -4460.479524  #>          8524          7563          8503          7541          7347  #>  -6640.872238  -4796.336151  -1700.562927   -823.233942  -4963.458005  #>          8019          8646          7310          7921          7198  #>   3748.121908  -2555.339877  -5483.666905  -9120.831936   3993.033514  #>          7678          8054          7891          7201          8673  #>   6352.505784   5650.948619   4011.331701  -4519.029542  -4887.826255  #>          8030          7319          7834          8269          7656  #>     34.725716  -1520.901706  -3499.147191   -767.397848   2802.022355  #>          7324          8132          8548          8149          8695  #>   4040.228526   2956.828989   6161.057755  -2692.751158  -7509.600357  #>          7852          7225          7241          8794          7390  #>   2390.720547   -919.578522  -1440.344936   2916.137019   1230.635154  #>          8779          8418          7278          7374          8116  #>  -1943.388811  -4425.234737   4502.648887   3499.087721  -1206.202412  #>          8668          7254          7618          7213          7917  #>  -4031.897452   -503.010433  12948.136714  -4171.608846   -241.714675  #>          7750          7216          7696          8652          7565  #>  -3057.061795   -623.963684   -865.505805   2207.081282  -4130.437656  #>          8554          8678          7460          8200          7174  #>  -1730.867358   -707.859147  -1217.572664  -1205.381769   -473.343979  #>          7370          8008          8660          8628          7579  #>   2408.084507   -821.880290  -7897.511948   4429.377485  -1540.720300  #>          7551          7397          8535          8113          7614  #>   1058.589034  -3823.167179   -816.600260    878.673381  -2647.719207  #>          8525          8584          7539          7545          8421  #>  -5464.979575   1486.002765   7124.480188   1228.105064   3344.794732  #>          7807          7277          7236          7802          8244  #>   1389.651629   4290.229249  -4077.280089  -1918.707367   2383.114392  #>          7683          8193          8701          7583          7797  #>    988.696813   -214.741219  -2411.227070   -808.502232   1255.393327  #>          7217          8370          7493          7900          7716  #>  -1850.576928  -2087.121714    385.380512  -2119.142539    784.416774  #>          7269          8500          8683          7352          7455  #>  -3742.031907   1505.735194  -2661.939116   2543.917164   3447.473397  #>          8015          8349          7816          8092          7463  #>    469.626459  -1113.461865  -8965.392150   1662.982465   6822.063627  #>          8192          8296          8681          7387          7655  #>  -3861.407730    711.505614   -727.110515  -8796.147914   3183.783267  #>          7484          8483          8112          8583          7306  #>   4849.649429    857.444633    630.157336   1479.887930  -3432.690488  #>          8186          7361          8188          8776          8765  #>     53.726210   2125.745060   3013.000520     63.640856  -4210.115377  #>          8265          7606         12499         12519         13355  #>    664.370783  -4333.134726  -2634.309409   1360.827595  -3457.759317  #>         13460         12220         13587         12670         14011  #>  -1583.543699    492.832680   6963.247502    -54.726943   2049.163179  #>         12498         13400         13730         12435         12271  #>   4505.982300   2626.449061  -3687.505144  -3103.572715    -72.280272  #>         12204         13659         13451         13097         13072  #>  -2230.156931  -2011.712768  -3334.563392  11240.529693  11938.149362  #>         13364         12485         14070         12355         13525  #>  10379.054683  -1967.965330   5686.620379  -4047.946267  -7374.174494  #>         13592         12819         12929         13781         13706  #>   8494.822155   4577.248368  -6628.783428    -52.043775  -5654.853238  #>         13073         12884         14064         13412         13229  #>   1723.958075   1244.913168   1677.476432   1270.219915  13823.779901  #>         12641         13345         12521         13971         13873  #>   7071.812890  -4234.983392   4910.226418  -2089.991283   -145.097747  #>         14006         13504         13623         12280         13863  #>   -719.267435   -491.273346   -788.615904  -1066.507831  -4850.994902  #>         13784         12847         13134         12292         13107  #>  -3952.954118  -2952.174421  -3000.433218    -88.159139   2476.018301  #>         13663         12541         12544         13972         12323  #>   -975.838081    668.421161   5949.109987  -2823.650542  -3784.010282  #>         12506         13802         13657         12676         13026  #>  -2471.856800  -3977.959508   1596.371693  -5254.188897  -2570.311220  #>         12552         14025         12917         13805         12467  #>  -2769.693114  -3136.318950  -8172.224972   -550.450951  -1376.131052  #>         13727         13960         12440         12668         13669  #>    548.214206   6458.229916   2051.512737   1615.618270  -2198.709844  #>         12744         13932         13304         12860         13410  #>   6150.772725  -3829.297434  -2354.378303   5890.183257   8872.546142  #>         13740         13829         12566         12226         12903  #>   1139.482748  -5667.415485  -2725.091778   6407.352083  -6470.309822  #>         13415         12721         12526         12284         13593  #>   6025.570787   -724.730720  -3769.351168  -3359.631024  -5507.071220  #>         13237         13335         13930         13330         12354  #>    145.967124   -531.526341  -5171.639788   -295.688727    527.403329  #>         13479         13203         13422         13480         12408  #>    135.693400   3977.076749  -4249.010292  -1707.447473   2174.130712  #>         12912         13036         13148         12951         13366  #>  -2340.971085    563.232703  -1929.171105  -1459.855503   6838.594757  #>         13205         14027         13601         12558         12948  #>  -1522.708207   5435.238776   -767.223942   3130.586268   1139.636954  #>         13315         13869         13754         14014         13676  #>   2614.800599 -15716.956665    864.009494   2660.432712  -2677.653209  #>         13081         13114         12629         13098         13370  #>  -1137.584059   -879.983894  10280.751074   8648.786852  -4186.981901  #>         12701         13874         13913         12883         13538  #>  -5598.152959  -1809.797177  -2238.589438  -2276.753092   1052.847301  #>         12852         13372         12208         13537         13747  #>   -755.287157   3107.692676   -582.859345   1424.424489   3433.595545  #>         13417         13096         13895         13003         13691  #>   -173.029021  -4178.926089   4674.824913   1583.005470   4197.571536  #>         12839         13289         13683         13697         12780  #>   -755.361312   2543.750468   -449.458602  -1295.830631   -738.762032  #>         13405         12334         13236         12245         12438  #>  -5050.887132  -1254.752884   -853.009437  -3582.112299  -6982.190477  #>         14081         13300         13210         12719         12745  #>   6775.066491     34.201098  -3286.730595  -1988.873965    554.775123  #>         13214         12770         13862         12812         12663  #>   3564.519734    510.722405  -2927.752918  -2073.168255    486.350237  #>         12980         12889         12484         13590         13047  #>   2389.769538   -442.138329  -2808.141264   3839.706997   1491.828889  #>         13102         12809         13216         12657         13524  #>   -973.614140   2460.909789  12235.401236  -1062.002084  -3471.727615  #>         12873         13981         12601         13542         13644  #>   4242.483439  -8914.231383    382.221806   -549.314340   1211.105400  #>         13263         12611         12970         13363         13746  #>  -1382.857697    357.712379  -3943.314230  -1229.538508  -1004.022791  #>         12619         12845         12844         13273         12764  #>    598.568792  -2492.290635     58.420138   1264.056564  -3710.018951  #>         24339         24478         24485         24843         24682  #>  -2896.375449  -6129.016585  -3701.684587   2823.310649  -1769.390785  #>         24367         24217         24078         24276         24416  #>  -3275.885001  -2349.100797   7910.668375   2418.490042  -5348.077773  #>         24628         24517         24844         24327         24981  #>  -2706.346028    756.264250   3161.158527    571.981761   -713.036568  #>         24631         24716         24761         24354         24240  #>   4142.087591   1486.998037   8009.011257   3089.109973   6691.820211  #>         24647         24757         24231         24899         24398  #>   8040.895942   4838.559776  12669.287928  -1152.161035  26997.708889  #>         24248         24274         24528         24812         24257  #>  -1082.155416  11393.818924  11895.599521  10867.516112   1251.582304  #>         24636         24880         24114         24876         24765  #>   -768.726219   3188.002692   -370.012143   -915.794777  -4674.682801  #>         24611         24376         24629         24476         24709  #> -10064.593185  -8166.608941  -3433.837097    747.204085  -8860.183590  #>         24389         24973         24999         24491         24132  #>   2079.314734  -3097.253803  -5627.357364 -12989.293303  -8887.912645  #>         24686         24352         24034         24625         24130  #>  -2193.675720  -1047.281847   -967.754274  -3085.953407  -5216.260843  #>         24211         24787         24545         24410         24154  #>  -6394.840913  -3840.371222   3250.106395   2880.753541   2755.673709  #>         24298         24856         24346         24074         24355  #>  -4793.375716     42.382642  -2234.715984   5420.780234   5282.336213  #>         24914         24887         24770         24309         24035  #>   2629.000762   2325.185357    457.009779  -5535.384335   1618.672739  #>         24305         24987         24282         24639         24449  #>   3797.087289  -1447.968584  -6313.233416  -2504.628433   4387.903075  #>         24548         24432         24041         24764         24758  #>  -3647.399581  -3697.234674  -1109.449426    812.471336    401.280199  #>         24726         24382         24780         24379         24081  #>   -147.339402   2499.740072   7934.036629  -4756.897430   -534.900475  #>         24549         24359         24729         24604         24392  #>   6472.943048   -170.849861   2908.123676  -1815.692724   2640.084552  #>         24453         24662         24277         24236         24455  #>   -180.356385  -3028.404689  -1166.095755  -2462.501224   5194.081056  #>         24505         24529         24118         24017         24417  #>  -9924.157691   -895.628622      1.297197   4156.115578  -1860.627314  #>         24730         24396         24247         24296         24384  #>    690.669541   1507.594994  -6089.056021  -1735.117938  -4515.638718  sigma(model1) #> [1] 5595.548"},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"function enables use Mixed Effects Random Forests (MERFs) applications Small Area Estimation (SAE). Unit-level survey data target auxiliary covariates required produce reliable estimates various disaggregated economic inequality indicators. Option meanOnly saves computational time users interested estimation domain-specific means using unit-level aggregated auxiliary data. Predefined indicators include mean, median, quantiles (10%, 25%, 75% 90%), head count ratio, poverty gap, Gini-coefficient quintile share ratio. MERF algorithm algorithmic procedure reminiscent EM-algorithm (see Details). Overall, function serves coherent framework estimation point estimates requested uncertainty estimates indicators. Methodological details found Krennmair & Schmid (2022) Krennmair et al. (2022b). following examples showcase potential applications.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"","code":"SAEforest_model(   Y,   X,   dName,   smp_data,   pop_data,   MSE = \"none\",   meanOnly = TRUE,   aggData = FALSE,   smearing = TRUE,   popnsize = NULL,   importance = \"impurity\",   OOsample_obs = 25,   ADDsamp_obs = 0,   w_min = 3,   B = 100,   B_adj = 100,   B_MC = 100,   threshold = NULL,   custom_indicator = NULL,   initialRandomEffects = 0,   ErrorTolerance = 1e-04,   MaxIterations = 25,   na.rm = TRUE,   ... )"},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"Y Continuous input value target variable. X Matrix data.frame predictive covariates. dName Character specifying name domain identifier, random intercepts modeled. smp_data data.frame survey sample data including specified elements Y X. pop_data data.frame unit-level population covariate data X. Please note column names predictive covariates must match column names smp_data. holds especially name domain identifier. MSE Character input specifying type uncertainty estimates. Available options : () \"none\" point estimates requested, (ii) \"nonparametric\" following MSE bootstrap procedure proposed Krennmair & Schmid (2022) Krennmair et al. (2022a) aggData = TRUE. (iii) \"wild\" nonlinear indicators proposed Krennmair et al. (2022b). Defaults \"none\". meanOnly Logical. Calculating domain-level means . Defaults TRUE. aggData Logical input indicating whether aggregated covariate information unit-level covariate information used domain-level means. Defaults FALSE, assuming unit-level covariate data. smearing Logical input indicating whether smearing based approach Monte Carlo (MC) version point estimates obtained estimate (nonlinear) indicators. MC used computational constraints prohibit smearing approach. theoretical details see Krennmair et al (2022b). Defaults TRUE. popnsize data.frame, comprising information population size domains. needed aggData = TRUE MSE requested. Please note name domain identifier must match column name smp_data. importance Variable importance mode processed random forest ranger. Must 'none', 'impurity', 'impurity_corrected' 'permutation'. concept variable importance needed production generic plots plot. estimation domain-level means aggregated covariate  data, variable importance needed rank information process finding suitable calibration weights (Krennmair et al., 2022b). information regarding measures importance see ranger. OOsample_obs Number --sample observations taken closest area potentially unsampled areas. needed aggData = TRUE defaults 25. ADDsamp_obs Number --sample observations taken closest area first iteration calculation calibration weights fails. needed aggData = TRUE defaults 0. w_min Minimal number covariates informative weights calculated. needed aggData = TRUE. Defaults 3. B Number bootstrap replications MSE estimation procedures. Defaults 100. B_adj Number bootstrap replications adjustment residual variance proposed Mendez Lohr (2001). Defaults 100. B_MC Number bootstrap populations MC version point estimates (nonlinear) indicators. Defaults 100. threshold Set custom threshold indicators, head count ratio. threshold can known numeric value function Y. threshold NULL, 60 % median Y taken threshold. Defaults NULL. custom_indicator list additional functions containing indicators calculated. functions must depend target variable Y optionally threshold. Defaults NULL. initialRandomEffects Numeric value vector initial estimates random effects. Defaults 0. ErrorTolerance Numeric value monitor MERF algorithm's convergence. Defaults 1e-04. MaxIterations Numeric value specifying maximal amount iterations MERF algorithm. Defaults 25. na.rm Logical. Whether missing values removed. Defaults TRUE. ... Additional parameters directly passed random forest ranger. important parameters instance mtry (number variables possibly split node), num.trees (number trees). details possible parameters see ranger example .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"object class SAEforest includes point estimates disaggregated indicators well information MERF-model. Optionally corresponding MSE estimates returned. Several generic functions methods returned object class SAEforest. full list explanation components possibilities objects class SAEforest, see SAEforestObject.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"MERFs combine advantages regression forests (implicit model-selection robustness properties) ability model hierarchical dependencies. MERF algorithm iteratively optimizes two separate steps: ) random forest function, assuming random effects term correct b) estimates random effects part, assuming OOB-predictions forest correct. Overall convergence algorithm monitored log-likelihood joint model components. details see Krennmair Schmid (2022). Users interested estimation domain-level means set meanOnly = TRUE. MERF requires covariate micro-data. function, however also allows use aggregated covariate information, setting aggData = TRUE. Aggregated covariate information adaptively incorporated calibration-weights based empirical likelihood estimation area-level means. See methodological details Krennmair et al. (2022a) estimation (nonlinear) poverty indicators /quantiles, need information area-specific cumulative distribution function (CDF) Y. Krennmair et al. (2022b) propose smearing approach originated Duan (1983). Alternatively, Monte-Carlo methods used simulate domain-specific CDF Y. estimation MSE, bootstrap population built based bias-corrected residual variance discussed Krennmair Schmid (2022). bootstrap bias correction follows Mendez Lohr (2011). Note MERFmodel object composition elements random forest class ranger random effects model class merMod. Thus, generic functions applicable corresponding objects. details generic functions see ranger lmer well examples .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"Duan, N. (1983). Smearing Estimate: Nonparametric Retransformation Method. Journal American Statistical Association, 78(383), 605–610. Krennmair, P., & Schmid, T. (2022). Flexible Domain Prediction Using Mixed Effects Random Forests. Journal Royal Statistical Society: Series C (Applied Statistics) (forthcoming). Krennmair, P., & Würz, N. & Schmid, T. (2022a). Analysing Opportunity Cost Care Work using Mixed Effects Random Forests Aggregated Census Data. Krennmair, P., & Schmid, T & Tzavidis, Nikos. (2022b). Estimation Poverty Indicators Using Mixed Effects Random Forests. Working Paper. Mendez, G., & Lohr, S. (2011). Estimating residual variance random forest regression. Computational Statistics & Data Analysis, 55 (11), 2937–2950.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[,-c(1, 16, 17, 18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_pop)  # SAEforest generics: summary(model1) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                        500 #> Number of independent variables:         14 #> Mtry:                                     3 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                      0.6297 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39192.7  39203.8 -19594.3  39188.7     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -2.8523 -0.5400 -0.0705  0.4472 11.9172  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept) 11265768 3356     #>  Residual             30319741 5506     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.2709061  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 5 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                                   #>  0 -19538.31 -19582.77 -19586.1 -19593.2 -19594.34  # Example 2: # Calculating point + MSE estimates for aggregated covariate data and passing # arguments to the random forest. # Note that B is unrealistically low to improve example speed  # remove factor for gender X_covar <- X_covar[,-1] model2 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_popAgg,                           MSE = \"nonparametric\", popnsize = popNsize,B = 5, mtry = 5,                           num.trees = 100, aggData = TRUE) #> Calculation of weights failed for area: Eisenstadt (Stadt) #> Calculation of weights failed for area: Melk #> Calculation of weights failed for area: Rust (Stadt) #> Calculation of weights failed for area: Schärding #> Calculation of weights failed for area: Villach (Stadt) #> Calculation of weights failed for area: Wels (Stadt) #> Calculation of weights failed for area: Wiener Neustadt (Stadt) #> Error SD Bootstrap started: #> Bootstrap with 5 rounds started  # SAEforest generics: summary(model2) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_popAgg, MSE = \"nonparametric\",  #>     aggData = TRUE, popnsize = popNsize, B = 5, mtry = 5, num.trees = 100) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #>  #>                Min. 1st Qu. Median     Mean 3rd Qu. Max. #> Sample_domains   14      17   22.5 27.78571      29  200 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                        100 #> Number of independent variables:         13 #> Mtry:                                     5 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                     0.65397 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39137.1  39148.2 -19566.5  39133.1     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -4.4393 -0.4981 -0.0166  0.4355 12.1617  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept) 10199803 3194     #>  Residual             29534625 5435     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.2566994  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 12 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                                                         #>  0 -19546.27 -19543.81 -19558.19 -19549.38 -19555.75 -19562.11 -19549.44 #>                                                    #>  -19542.29 -19557.55 -19552.84 -19565.58 -19566.54 summarize_indicators(model2, MSE = TRUE, CV = TRUE) #> Warning: For objects of class SAEforest_mean or SAEforest_meanAGG, only results for the Indicator \"Mean\" are reported #> Indicator/s: Mean #>                         district      Mean   Mean_MSE    Mean_CV #> 1                      Amstetten 14038.474   761388.6 0.06215603 #> 2                          Baden 22026.881   438167.1 0.03005155 #> 3                        Bludenz 11672.669   915294.9 0.08196159 #> 4                 Braunau am Inn 12323.510  1000189.5 0.08115340 #> 5                        Bregenz 33540.999  9247614.4 0.09066483 #> 6            Bruck an der Leitha 22877.481  2426382.0 0.06808813 #> 7             Bruck-Mürzzuschlag 24508.780   839137.7 0.03737618 #> 8               Deutschlandsberg 23643.244  2889329.8 0.07189381 #> 9                       Dornbirn 19171.148   289682.4 0.02807456 #> 10                      Eferding 12801.205 19797638.0 0.34758083 #> 11            Eisenstadt (Stadt) 28265.309  2715406.9 0.05829935 #> 12           Eisenstadt-Umgebung 22017.489 27203725.9 0.23688982 #> 13                     Feldkirch 17311.324   731719.5 0.04941309 #> 14                   Feldkirchen 13366.521 21747822.5 0.34889079 #> 15                     Freistadt 16760.155  3057115.1 0.10432247 #> 16                       Gmunden 19209.639   543388.6 0.03837391 #> 17                         Gmünd 12855.927  1932098.7 0.10812130 #> 18                  Graz (Stadt) 17905.763   153599.8 0.02188782 #> 19                 Graz-Umgebung 35562.816  1222469.2 0.03109015 #> 20                  Grieskirchen 15530.058  3889738.5 0.12699515 #> 21                   Gänserndorf 20017.111   621610.9 0.03938746 #> 22                       Güssing 17590.980  4513112.4 0.12076693 #> 23                       Hallein 17199.316  2659448.5 0.09481666 #> 24          Hartberg-Fürstenfeld 12170.911  2815335.5 0.13786118 #> 25                      Hermagor 11612.905 27416590.2 0.45088506 #> 26                    Hollabrunn 16493.671  3151151.2 0.10762602 #> 27                          Horn 12940.798 15866305.6 0.30780584 #> 28                          Imst 13869.744  1007457.8 0.07236774 #> 29              Innsbruck (Land) 27114.721  1401085.2 0.04365431 #> 30             Innsbruck (Stadt) 17383.723   172476.0 0.02389030 #> 31                   Jennersdorf 11727.010 12858880.8 0.30578368 #> 32        Kirchdorf an der Krems 16037.151  1477504.5 0.07579441 #> 33                     Kitzbühel 14037.568  3031001.1 0.12402270 #> 34             Klagenfurt (Land) 21664.289  1081051.2 0.04799309 #> 35            Klagenfurt (Stadt) 32878.171  2361996.3 0.04674465 #> 36                    Korneuburg 25488.387  1425362.5 0.04684037 #> 37                  Krems (Land) 15223.812  5696841.6 0.15678109 #> 38    Krems an der Donau (Stadt) 17840.849 43818856.9 0.37103511 #> 39                      Kufstein 19521.079  1085435.1 0.05337011 #> 40                       Landeck 12516.998  3455609.2 0.14851220 #> 41                      Leibnitz 15665.644   849830.1 0.05884612 #> 42                        Leoben 19057.395   633463.4 0.04176353 #> 43                         Lienz 11170.198   486117.0 0.06241795 #> 44                        Liezen 12131.228   963705.4 0.08092215 #> 45                    Lilienfeld 12520.731  5206038.1 0.18223172 #> 46                  Linz (Stadt) 22254.221   104216.0 0.01450624 #> 47                     Linz-Land 26696.569   371139.1 0.02281986 #> 48                   Mattersburg 19895.318  2900371.7 0.08560043 #> 49                          Melk 12651.423   353530.1 0.04699740 #> 50                    Mistelbach 19977.994   929983.6 0.04827094 #> 51                         Murau 11399.100  4011149.0 0.17569679 #> 52                        Murtal 19005.997  3784180.2 0.10235174 #> 53                       Mödling 41443.799   369113.9 0.01465955 #> 54                   Neunkirchen 15398.402   805611.3 0.05828907 #> 55               Neusiedl am See 18593.315   996575.4 0.05369060 #> 56                Oberpullendorf 16390.178  4322248.4 0.12684437 #> 57                      Oberwart 12343.362   685295.1 0.06706646 #> 58                          Perg 19255.387  1703754.9 0.06778776 #> 59                        Reutte 18007.528  1782951.8 0.07415078 #> 60              Ried im Innkreis 13895.350  1420154.0 0.08576266 #> 61                      Rohrbach 12990.223   835042.7 0.07034573 #> 62                  Rust (Stadt) 15529.543 13926479.5 0.24030454 #> 63              Salzburg (Stadt) 20250.555   464770.2 0.03366528 #> 64             Salzburg-Umgebung 29123.093   778733.8 0.03030100 #> 65        Sankt Johann im Pongau 13181.196  3721610.6 0.14635604 #> 66           Sankt Pölten (Land) 17025.069   557821.2 0.04386909 #> 67          Sankt Pölten (Stadt) 16968.259  2756916.8 0.09785309 #> 68        Sankt Veit an der Glan 14861.342  1590959.1 0.08487338 #> 69                      Scheibbs 12620.827  8223417.5 0.22721571 #> 70                        Schwaz 15474.703   510082.6 0.04615279 #> 71                     Schärding 10757.941   833979.4 0.08488843 #> 72           Spittal an der Drau 13054.907   441948.9 0.05092280 #> 73                 Steyr (Stadt) 19121.895 16386702.4 0.21169707 #> 74                    Steyr-Land 24949.939  1585081.7 0.05046106 #> 75              Südoststeiermark 13903.565  4230988.4 0.14794311 #> 76                       Tamsweg 16042.995  6322918.9 0.15673766 #> 77                         Tulln 20925.637   548763.4 0.03540087 #> 78               Urfahr-Umgebung 38894.053  4755535.0 0.05606818 #> 79               Villach (Stadt) 21939.594  3107738.9 0.08035144 #> 80                  Villach Land 19005.327 10597305.8 0.17128620 #> 81                     Voitsberg 16985.173  3144530.6 0.10440179 #> 82                   Vöcklabruck 18298.747   480530.2 0.03788253 #> 83                   Völkermarkt 15181.050  1456945.4 0.07950965 #> 84        Waidhofen an der Thaya 11279.176  9985304.3 0.28015817 #> 85 Waidhofen an der Ybbs (Stadt) 16425.427  3705231.2 0.11719012 #> 86                          Weiz 15294.560   753448.2 0.05675312 #> 87                  Wels (Stadt) 13919.292  1009923.3 0.07219831 #> 88                     Wels-Land 23680.703 14580600.3 0.16124754 #> 89                          Wien 20757.950   390644.6 0.03010970 #> 90        Wiener Neustadt (Land) 20754.239   810530.9 0.04337885 #> 91       Wiener Neustadt (Stadt) 14135.666  3909895.9 0.13988344 #> 92                     Wolfsberg 17186.457  1581628.3 0.07317552 #> 93                   Zell am See  9803.019   963673.9 0.10013946 #> 94                        Zwettl 10982.225 21967761.5 0.42677855  # Example 3: # Calculating point + MSE estimates and passing arguments to the forest. # Two additional custom indicators and the threshold is defined as a custom function of Y. # Note that B is unrealistically low to improve example speed.  model3 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\", smp_data = eusilcA_smp,                           pop_data = eusilcA_pop, meanOnly = FALSE, MSE = \"nonparametric\",                           B = 5, mtry = 5, num.trees = 100, threshold = function(Y){0.5 *                           median(Y)}, custom_indicator = list(my_max = function(Y,                           threshold){max(Y)}, mean40 = function(Y, threshold){                           mean(Y[Y<=quantile(Y,0.4)])}), smearing = FALSE) #> Error SD Bootstrap started: #> MSE Bootstrap with 5 rounds started:  # SAEforest generics: summary(model3) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop, MSE = \"nonparametric\",  #>     meanOnly = FALSE, smearing = FALSE, B = 5, threshold = function(Y) { #>         0.5 * median(Y) #>     }, custom_indicator = list(my_max = function(Y, threshold) { #>         max(Y) #>     }, mean40 = function(Y, threshold) { #>         mean(Y[Y <= quantile(Y, 0.4)]) #>     }), mtry = 5, num.trees = 100) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                        100 #> Number of independent variables:         13 #> Mtry:                                     5 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                     0.66844 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39083.5  39094.6 -19539.7  39079.5     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -4.0682 -0.5170 -0.0513  0.4268 12.1747  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept)  7689148 2773     #>  Residual             28970242 5382     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.2097457  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 4 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                           #>  0 -19519.14 -19541.96 -19537.78 -19539.73 summarize_indicators(model3, MSE = FALSE, CV = TRUE, indicator = c(\"Gini\", \"my_max\", \"mean40\")) #> Indicator/s: Gini #>  Indicator/s: my_max #>  Indicator/s: mean40 #>                         district      Gini    Gini_CV    my_max my_max_CV #> 1                      Amstetten 0.2496166 0.06139391  53367.94 0.5124650 #> 2                          Baden 0.1821222 0.07004379  69365.94 0.3929977 #> 3                        Bludenz 0.2836343 0.10597374  45119.26 0.2913200 #> 4                 Braunau am Inn 0.2769782 0.07798593  53789.77 0.5638769 #> 5                        Bregenz 0.1623321 0.07778439  82887.97 0.1120534 #> 6            Bruck an der Leitha 0.1786187 0.07669723  69086.14 0.1365179 #> 7             Bruck-Mürzzuschlag 0.1668700 0.09485270  71669.91 0.2235948 #> 8               Deutschlandsberg 0.1897958 0.08023022  57235.93 0.1824685 #> 9                       Dornbirn 0.2181016 0.06908320  56893.75 0.3678049 #> 10                      Eferding 0.2345167 0.18489711  42421.92 0.6557794 #> 11            Eisenstadt (Stadt) 0.1910494 0.17611874  68312.35 0.1181623 #> 12           Eisenstadt-Umgebung 0.2009430 0.12954595  58555.45 0.1984942 #> 13                     Feldkirch 0.2317475 0.10229294  59428.59 0.3881409 #> 14                   Feldkirchen 0.2446526 0.18556621  40754.56 0.2536565 #> 15                     Freistadt 0.2154424 0.12854458  53101.29 0.4965489 #> 16                       Gmunden 0.1999884 0.09455086  61906.52 0.2955842 #> 17                         Gmünd 0.2561330 0.29310131  39789.79 0.5867452 #> 18                  Graz (Stadt) 0.2176966 0.06736820  76946.33 0.1984235 #> 19                 Graz-Umgebung 0.1861077 0.16841540  95132.01 0.2606042 #> 20                  Grieskirchen 0.2167425 0.10161904  52493.09 0.2587489 #> 21                   Gänserndorf 0.1995323 0.10132979  61202.70 0.4011403 #> 22                       Güssing 0.2331344 0.08623459  42441.73 0.3973735 #> 23                       Hallein 0.2258108 0.12961906  51111.93 0.3519029 #> 24          Hartberg-Fürstenfeld 0.2645503 0.07211716  55098.67 0.3520621 #> 25                      Hermagor 0.2523298 0.16283129  33864.60 0.7615479 #> 26                    Hollabrunn 0.2223246 0.11138456  48751.66 0.4628220 #> 27                          Horn 0.2338976 0.19230341  43554.09 0.3160812 #> 28                          Imst 0.2377699 0.08142345  46086.11 0.2619329 #> 29              Innsbruck (Land) 0.2040890 0.08602366  77048.75 0.1486210 #> 30             Innsbruck (Stadt) 0.2065810 0.10692276  60773.36 0.4932663 #> 31                   Jennersdorf 0.2494483 0.17889506  34599.53 0.1609961 #> 32        Kirchdorf an der Krems 0.2325506 0.09950261  50549.39 0.5055384 #> 33                     Kitzbühel 0.2505483 0.11280844  45226.13 0.4784815 #> 34             Klagenfurt (Land) 0.1825540 0.08386088  57705.76 0.3781472 #> 35            Klagenfurt (Stadt) 0.1639245 0.06938104  81294.83 0.3479100 #> 36                    Korneuburg 0.1603203 0.08917155  63771.42 0.3168946 #> 37                  Krems (Land) 0.2391255 0.08436111  50278.43 0.2209006 #> 38    Krems an der Donau (Stadt) 0.2199381 0.11800657  40318.15 0.3457054 #> 39                      Kufstein 0.1847680 0.07407301  58083.20 0.2491800 #> 40                       Landeck 0.2615573 0.07132085  38413.82 0.7690219 #> 41                      Leibnitz 0.2315831 0.11104392  53370.41 0.4808914 #> 42                        Leoben 0.1927015 0.12717968  58604.30 0.2134696 #> 43                         Lienz 0.2608947 0.12025133  45782.32 0.4455413 #> 44                        Liezen 0.2734132 0.13385868  53213.01 0.4873165 #> 45                    Lilienfeld 0.2443897 0.19718093  42680.27 0.7047444 #> 46                  Linz (Stadt) 0.1866490 0.07613662  76815.99 0.1997204 #> 47                     Linz-Land 0.1685493 0.04476869  77998.89 0.2628937 #> 48                   Mattersburg 0.2068680 0.18340054  52645.18 0.2048766 #> 49                          Melk 0.2735880 0.08773104  48230.46 0.2642358 #> 50                    Mistelbach 0.2036992 0.12599481  60321.48 0.1358387 #> 51                         Murau 0.2529370 0.14983048  35311.93 0.3188117 #> 52                        Murtal 0.2150873 0.07773061  53926.56 0.4617912 #> 53                       Mödling 0.1496726 0.19444333  87746.94 0.1476431 #> 54                   Neunkirchen 0.2167925 0.13399309  56766.39 0.3887731 #> 55               Neusiedl am See 0.2056638 0.09013821  54394.24 0.2373192 #> 56                Oberpullendorf 0.2331675 0.21982944  46670.48 0.5692763 #> 57                      Oberwart 0.2583104 0.14040406  47608.62 0.5629113 #> 58                          Perg 0.2127375 0.09274623  53158.31 0.1649124 #> 59                        Reutte 0.1984683 0.10557539  43351.78 0.2284484 #> 60              Ried im Innkreis 0.2474063 0.12518031  50045.91 0.3044791 #> 61                      Rohrbach 0.2188741 0.12589123  48102.63 0.2523869 #> 62                  Rust (Stadt) 0.2697352 0.18642302  23357.17 0.1908323 #> 63              Salzburg (Stadt) 0.1932685 0.07948163  68674.85 0.1591554 #> 64             Salzburg-Umgebung 0.1679929 0.09598427  89310.34 0.1694144 #> 65        Sankt Johann im Pongau 0.2453427 0.09941047  53633.28 0.2670028 #> 66           Sankt Pölten (Land) 0.2298954 0.08762768  62305.47 0.2294852 #> 67          Sankt Pölten (Stadt) 0.2221361 0.16899913  49775.06 0.5028214 #> 68        Sankt Veit an der Glan 0.2455244 0.10072608  51492.05 0.3967974 #> 69                      Scheibbs 0.2480215 0.19712089  42353.38 0.3760305 #> 70                        Schwaz 0.2298244 0.15086416  52413.72 0.2150530 #> 71                     Schärding 0.3029931 0.08659790  43510.19 0.3755736 #> 72           Spittal an der Drau 0.2589875 0.07263732  58545.46 0.2843762 #> 73                 Steyr (Stadt) 0.2144196 0.28573383  47224.17 0.5252292 #> 74                    Steyr-Land 0.1730117 0.09023882  57873.40 0.4890363 #> 75              Südoststeiermark 0.2509470 0.06872722  55264.52 0.4612891 #> 76                       Tamsweg 0.2162900 0.10130196  40879.56 0.1156401 #> 77                         Tulln 0.2054317 0.08278396  61652.68 0.1982365 #> 78               Urfahr-Umgebung 0.1443740 0.15581748  89357.50 0.1001912 #> 79               Villach (Stadt) 0.1941162 0.11158736  60944.94 0.1558012 #> 80                  Villach Land 0.2069803 0.07776880  56018.43 0.2372981 #> 81                     Voitsberg 0.2100369 0.12259307  48686.29 0.5232139 #> 82                   Vöcklabruck 0.2111293 0.05842563  63596.83 0.2556668 #> 83                   Völkermarkt 0.2349521 0.10301081  47016.00 0.2725515 #> 84        Waidhofen an der Thaya 0.2660027 0.15929675  35849.69 0.1811430 #> 85 Waidhofen an der Ybbs (Stadt) 0.2109265 0.26315102  35962.63 0.1605012 #> 86                          Weiz 0.2452848 0.08436544  51603.52 0.3177342 #> 87                  Wels (Stadt) 0.2408120 0.09499697  47470.60 0.2739218 #> 88                     Wels-Land 0.2001741 0.08472676  59415.56 0.2160322 #> 89                          Wien 0.2447866 0.05381822 109676.70 0.2103532 #> 90        Wiener Neustadt (Land) 0.2057335 0.09337493  57415.41 0.2618388 #> 91       Wiener Neustadt (Stadt) 0.2105591 0.09349449  45909.63 0.2722959 #> 92                     Wolfsberg 0.2332638 0.09679308  50785.10 0.2186416 #> 93                   Zell am See 0.2933377 0.02306185  45910.49 0.3219887 #> 94                        Zwettl 0.2677241 0.11152893  45474.82 0.5364367 #>       mean40  mean40_CV #> 1   8104.170 0.02902325 #> 2  15735.431 0.02839009 #> 3   6234.411 0.22953106 #> 4   6253.489 0.25399596 #> 5  23840.219 0.03849579 #> 6  16660.491 0.03372998 #> 7  17345.005 0.09502401 #> 8  14506.407 0.11582412 #> 9  12450.326 0.09412046 #> 10  9565.550 0.35804410 #> 11 27297.832 0.30017683 #> 12 17758.733 0.20886305 #> 13 10075.268 0.13719385 #> 14  8402.480 0.27306219 #> 15 10754.675 0.10974376 #> 16 13368.639 0.04987205 #> 17  7485.412 0.85402883 #> 18 11365.140 0.05354266 #> 19 24264.907 0.05996671 #> 20 10584.374 0.08537967 #> 21 13424.339 0.10829529 #> 22 10275.955 0.14684277 #> 23 10024.918 0.10733773 #> 24  7309.488 0.15066485 #> 25  7087.851 0.31167004 #> 26 10231.910 0.09760702 #> 27  9405.537 0.44537825 #> 28  8610.950 0.15825954 #> 29 17869.057 0.05511827 #> 30 11623.388 0.07832363 #> 31  7667.007 0.23136868 #> 32 10030.946 0.12467688 #> 33  7138.563 0.10963907 #> 34 15789.840 0.09034039 #> 35 24134.944 0.05707198 #> 36 20230.548 0.06131129 #> 37  9220.980 0.12094249 #> 38 10874.673 0.11124036 #> 39 14157.177 0.05572605 #> 40  6690.407 0.22772454 #> 41  9564.511 0.08729996 #> 42 13783.134 0.10627174 #> 43  7211.216 0.14491196 #> 44  6485.282 0.23510147 #> 45  8939.741 0.48175894 #> 46 15460.731 0.06819121 #> 47 19818.833 0.03775992 #> 48 14359.113 0.36398719 #> 49  6209.175 0.11881243 #> 50 13183.924 0.07627689 #> 51  7260.136 0.21362813 #> 52 12128.811 0.12253665 #> 53 30477.641 0.04364185 #> 54 10333.526 0.14205719 #> 55 12630.609 0.06372049 #> 56 10385.815 0.41585492 #> 57  7387.320 0.22284874 #> 58 11466.888 0.14186941 #> 59 12948.996 0.13908392 #> 60  8129.388 0.25564883 #> 61  9546.130 0.12819871 #> 62  6752.316 0.21863140 #> 63 13423.428 0.05639137 #> 64 22100.403 0.04523701 #> 65  8542.659 0.13930779 #> 66 10368.832 0.06807740 #> 67 10210.859 0.17509699 #> 68  8725.549 0.13554502 #> 69  7794.362 0.21527478 #> 70  9618.193 0.09631738 #> 71  4738.325 0.29389391 #> 72  7703.324 0.09920418 #> 73 12093.106 0.43165920 #> 74 17657.622 0.09946456 #> 75  7923.985 0.21775466 #> 76 10633.185 0.12228878 #> 77 13220.184 0.07271324 #> 78 32063.473 0.05584124 #> 79 15122.046 0.09816730 #> 80 12793.717 0.04483305 #> 81 11390.310 0.15038505 #> 82 11800.726 0.06066700 #> 83  9235.364 0.13208011 #> 84  6855.515 0.33219771 #> 85 11547.659 0.45972960 #> 86  8482.244 0.08870874 #> 87  8464.953 0.09782143 #> 88 13509.826 0.08020484 #> 89 12093.349 0.02981109 #> 90 12484.619 0.08173127 #> 91 11126.650 0.11644553 #> 92 10536.540 0.09727307 #> 93  4909.782 0.13866430 #> 94  7230.085 0.23743497 # }"},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_pop.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated EU-SILC data - population data — eusilcA_pop","title":"Simulated EU-SILC data - population data — eusilcA_pop","text":"data set includes synthetic EU-SILC data taken package emdi. Originally, data builds eusilcP package simFrame reduced 17 variables containing regional variables states districts.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated EU-SILC data - population data — eusilcA_pop","text":"","code":"eusilcA_pop"},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_pop.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated EU-SILC data - population data — eusilcA_pop","text":"data frame 25000 observations 17 variables: eqIncome numeric; simplified version equivalized household income. eqsize numeric; equivalized household size according modified OECD scale. gender factor; person's gender (levels: male female). cash numeric; employee cash near cash income (net). self_empl numeric; cash benefits losses self-employment (net). unempl_ben numeric; unemployment benefits (net). age_ben numeric; old-age benefits (net). surv_ben numeric; survivor's benefits (net). sick_ben numeric; sickness benefits (net). dis_ben numeric; disability benefits (net). rent numeric; income rental property land (net). fam_allow numeric; family/children related allowances (net). house_allow numeric; housing allowances (net). cap_inv numeric; interest, dividends, profit capital investments  unincorporated business (net). tax_adj numeric; repayments/receipts tax adjustment (net). state factor; state (nine levels). district factor; districts (94 levels).","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_popAgg.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated EU-SILC data - aggregated population data — eusilcA_popAgg","title":"Simulated EU-SILC data - aggregated population data — eusilcA_popAgg","text":"data set includes synthetic EU-SILC data taken package emdi. Originally, data builds eusilcP package simFrame reduced 15 variables including district identifiers well aggregated household level covariates. Therefore, except variables ratio_n district, variables mean values per district.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_popAgg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated EU-SILC data - aggregated population data — eusilcA_popAgg","text":"","code":"eusilcA_popAgg"},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_popAgg.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated EU-SILC data - aggregated population data — eusilcA_popAgg","text":"data frame 94 observations 15 variables: eqsize numeric; equivalized household size according modified OECD scale. cash numeric; employee cash near cash income (net). self_empl numeric; cash benefits losses self-employment (net). unempl_ben numeric; unemployment benefits (net). age_ben numeric; old-age benefits (net). surv_ben numeric; survivor's benefits (net). sick_ben numeric; sickness benefits (net). dis_ben numeric; disability benefits (net). rent numeric; income rental property land (net). fam_allow numeric; family/children related allowances (net). house_allow numeric; housing allowances (net). cap_inv numeric; interest, dividends, profit capital investments  unincorporated business (net). tax_adj numeric; repayments/receipts tax adjustment (net). ratio_n numeric; ratios population size per area total population size. district factor; Austrian districts (94 levels).","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_smp.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated EU-SILC data - survey sample data — eusilcA_smp","title":"Simulated EU-SILC data - survey sample data — eusilcA_smp","text":"data set includes synthetic EU-SILC data taken package emdi. Originally, data builds eusilcP package simFrame reduced 18 variables containing regional variables states districts.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_smp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated EU-SILC data - survey sample data — eusilcA_smp","text":"","code":"eusilcA_smp"},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_smp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated EU-SILC data - survey sample data — eusilcA_smp","text":"data frame 1945 observations 18 variables: eqIncome numeric; simplified version equivalized household income. eqsize numeric; equivalized household size according modified OECD scale. gender factor; person's gender (levels: male female). cash numeric; employee cash near cash income (net). self_empl numeric; cash benefits losses self-employment (net). unempl_ben numeric; unemployment benefits (net). age_ben numeric; old-age benefits (net). surv_ben numeric; survivor's benefits (net). sick_ben numeric; sickness benefits (net). dis_ben numeric; disability benefits (net). rent numeric; income rental property land (net). fam_allow numeric; family/children related allowances (net). house_allow numeric; housing allowances (net). cap_inv numeric; interest, dividends, profit capital investments  unincorporated business (net). tax_adj numeric; repayments/receipts tax adjustment (net). state factor; state (nine levels). district factor; districts (94 levels). weight numeric; constant weight.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/load_shapeaustria.html","id":null,"dir":"Reference","previous_headings":"","what":"Loading the shape file for Austrian districts — load_shapeaustria","title":"Loading the shape file for Austrian districts — load_shapeaustria","text":"function simplifies loading shape file Austrian districts. originally used examples package emdi.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/load_shapeaustria.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loading the shape file for Austrian districts — load_shapeaustria","text":"","code":"load_shapeaustria()"},{"path":"https://krennpa.github.io/SAEforest/reference/load_shapeaustria.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loading the shape file for Austrian districts — load_shapeaustria","text":"shape file class SpatialPolygonsDataFrame.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/load_shapeaustria.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Loading the shape file for Austrian districts — load_shapeaustria","text":"shape file contains borders 94 Austrian districts. main purpose function visualization estimation results plotting function map_indicators.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualizes disaggregated estimates on a map — map_indicators","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"Function map_indicators visualizes estimates SAEforestObject specified map. function can seen modified wrapper map_plot package emdi.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"","code":"map_indicators(   object,   indicator = \"all\",   MSE = FALSE,   CV = FALSE,   map_obj = NULL,   map_dom_id = NULL,   map_tab = NULL,   color = c(\"white\", \"darkgreen\"),   scale_points = NULL,   guide = \"colourbar\",   return_data = FALSE,   return_plot = FALSE,   gg_theme = theme_minimal() )"},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"object object class SAEforest, containing estimates visualized. indicator Optional character vector specifying indicators mapped: () calculated indicators (\"\"); (ii) default indicators name: \"Mean\", \"Quant10\", \"Quant25\", \"Median\", \"Quant75\", \"Quant90\", \"Gini\", \"Hcr\", \"Pgap\", \"Qsr\" function name/s \"custom_indicator/s\"; (iii) vector names indicators. object estimated option meanOnly = TRUE, indicator arguments ignored \"Mean\" visualized. MSE Logical. TRUE, MSE also visualized. Defaults FALSE. CV Logical. TRUE, CV also visualized. Defaults FALSE. map_obj SpatialPolygonsDataFrame object defined sp package data visualized. map_dom_id Character string containing name variable map_obj indicates domains. map_tab data.frame object two columns matches domain variable population data set (first column) domain variable map_obj (second column). used domain-level identifiers different objects. color vector length 2 defining lowest highest color map. scale_points structure defining lowest, mid highest value colorscale. numeric vector length two given, scale used every plot. Alternatively, list defining colors plot separately may given. guide Character passed scale_colour_gradient ggplot2. Possible values \"none\", \"colourbar\", \"legend\". return_data set TRUE, fortified data frame including map data well chosen indicators returned. Customized maps can easily obtained data frame via package ggplot2. Defaults FALSE. return_plot set TRUE, list individual plots produced ggplot2 returned individual customization processing. gg_theme Specify predefined theme ggplot2. Defaults theme_minimal.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"Creates required plots selected, fortified data.frame list plots.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_pop,                           num.trees = 50)  # Load shape file load_shapeaustria()  # Create map plot for mean indicator - point and MSE estimates but no CV  map_indicators(object = model1, MSE = FALSE, CV = FALSE, map_obj = shape_austria_dis,                indicator = c(\"Mean\"), map_dom_id = \"PB\") #> Warning: For objects of class SAEforest_mean or SAEforest_meanAGG, only results for the Indicator \"Mean\" are reported   # Create a suitable mapping table to use numerical identifiers of the shape # file  # First find the right order dom_ord <- match(shape_austria_dis@data$PB, model1$Indicators$district)  # Create the mapping table based on the order obtained above map_tab <- data.frame(pop_data_id = model1$Indicators$district[dom_ord],                       shape_id = shape_austria_dis@data$BKZ)  # Create map plot for mean indicator - using the numerical domain # identifiers of the shape file. Additionally save the figure in as a list element.  map_obj <- map_indicators(object = model1, MSE = FALSE, CV = FALSE,                           map_obj = shape_austria_dis, indicator = c(\"Mean\"),                           map_dom_id = \"BKZ\", map_tab = map_tab, return_plot = TRUE) #> Warning: For objects of class SAEforest_mean or SAEforest_meanAGG, only results for the Indicator \"Mean\" are reported  # }"},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for a 'SAEforest' object — plot.SAEforest","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"Plots model-specific characteristics fixed effects random forest component MERF SAEforestObject. variable importance plot produced visualize importance individual covariates predictive performance model. variable importance plot, arguments passed internally function vip. requested, plot function additionally provides partial dependence plot (pdp) visualize impact given number influential covariates target variable. pdp plot produced using partial package pdp. plot-engine plots ggplot2.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"","code":"# S3 method for SAEforest plot(   x,   num_features = 6,   col = \"darkgreen\",   fill = \"darkgreen\",   alpha = 0.8,   include_type = TRUE,   horizontal = TRUE,   gg_theme = theme_minimal(),   lsize = 1.5,   lty = \"solid\",   grid_row = 2,   out_list = FALSE,   pdp_plot = TRUE,   ... )"},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"x object class SAEforest including random forest model class ranger. num_features Number features partial dependence plot required. col Parameter specifying color selected plots. argument must specified can processed aes. Defaults character name color \"darkgreen\". fill Parameter specifying fill selected plots. argument must specified can processed aes. Defaults character name color \"darkgreen\". alpha Parameter specifying transparency fill vip plots. argument must number [0,1]. include_type Logical. set TRUE, type importance specified fitting process model included vip plot. Defaults TRUE. horizontal Logical. set TRUE, importance scores appear x-axis. parameter set FALSE, importance scores plot y-axis. Defaults TRUE. gg_theme Specify predefined theme ggplot2. Defaults theme_minimal. lsize Parameter specifying line size pdp plots. argument must specified can processed aes. Defaults 1.5. lty Parameter specifying line size pdp plots. argument must specified can processed aes. Defaults \"solid\". grid_row Parameter specifying amount rows joint pdp plot. Defaults 2. out_list Logical. set TRUE, list individual plots produced ggplot2 returned individual customization processing. Defaults FALSE. pdp_plot Logical. set TRUE, partial dependence plots produced partial package pdp included. Defaults TRUE. ... Optional additional inputs ignored method.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"Plots variable importance /partial dependence covariates ranked corresponding importance. Additionally, list individual plots can returned facilitating individual customization exporting. See following examples details.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"production importance plots, sure specify parameter importance != 'none' producing estimates function SAEforest_model. pdp plots, note covariates type factor character used partial dependence plots. Dummy-variables can used, however, pdp plots always lines connecting two effect points 0 1. informative pdp plots can produced continuous predictors.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_pop,                           num.trees = 50) plot(model1) #> Press [enter] to continue #> Warning: The data contained 3 character or factor variables unsuitable for pdp plots(district, gender, state).   # }"},{"path":"https://krennpa.github.io/SAEforest/reference/popNsize.html","id":null,"dir":"Reference","previous_headings":"","what":"Demographic population-size data — popNsize","title":"Demographic population-size data — popNsize","text":"data contains simulated population data based aggregates eusilcA_pop, based eusilcP package simFrame.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/popNsize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demographic population-size data — popNsize","text":"","code":"popNsize"},{"path":"https://krennpa.github.io/SAEforest/reference/popNsize.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Demographic population-size data — popNsize","text":"data frame 94 Austrian districts corresponding synthetic population numbers: district character; districts (94 levels). N_i numeric; simulated population district.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/print.SAEforest.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints a 'SAEforest' object — print.SAEforest","title":"Prints a 'SAEforest' object — print.SAEforest","text":"Basic information SAEforestObject printed.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/print.SAEforest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints a 'SAEforest' object — print.SAEforest","text":"","code":"# S3 method for SAEforest print(x, ...)"},{"path":"https://krennpa.github.io/SAEforest/reference/print.SAEforest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints a 'SAEforest' object — print.SAEforest","text":"x Object class SAEforest, representing point MSE estimates obtained function SAEforest_model. ... Optional additional inputs ignored method.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/print.SAEforest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prints a 'SAEforest' object — print.SAEforest","text":"Prints basic information survey data characteristics.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":null,"dir":"Reference","previous_headings":"","what":"Presents point, MSE and CV estimates — summarize_indicators","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"Function summarize_indicators reports point mean squared error (MSE) estimates well calculated coefficients variation (CV) fitted SAEforest object.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"","code":"summarize_indicators(object, indicator = \"all\", MSE = FALSE, CV = FALSE)"},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"object Object point /MSE estimates /calculated CV's requested. object must class SAEforest. indicator Optional character vector specifying indicators mapped: () calculated indicators (\"\"); (ii) default indicators name: \"Mean\", \"Quant10\", \"Quant25\", \"Median\", \"Quant75\", \"Quant90\", \"Gini\", \"Hcr\", \"Pgap\", \"Qsr\" function name/s \"custom_indicator/s\"; (iii) vector names indicators. object estimated SAEforest_model indicator arguments ignored \"Mean\" returned. MSE Logical. TRUE, MSE estimates selected indicators per domain added data frame point estimates. Defaults FALSE. CV Logical. TRUE, coefficients variation selected indicators per domain added data frame point estimates. Defaults FALSE.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"return summarize_indicators object class summarize_indicators.SAEforest including domain-specific point /MSE estimates /calculated CV's SAEforest object returned object contains data.frame ind character including names requested indicator(s).","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"Objects class summarize_indicators.SAEforest methods following generic functions: head tail (default documentation, see head),  .matrix (default documentation, see matrix), .data.frame (default documentation, see .data.frame), subset (default documentation, see subset).","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Calculating point + MSE estimates and passing arguments to the forest. # Additionally, two additional indicators and functions as threshold are added. # Note that B and num.trees are low to speed up estimation time and must be changed for # practical applications.  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_pop,                           meanOnly = FALSE, MSE = \"nonparametric\", B = 5, mtry = 5,                           num.trees = 50, smearing = FALSE) #> Error SD Bootstrap started: #> MSE Bootstrap with 5 rounds started:  # Extract indicator and show generics: Gini1 <- summarize_indicators(model1, MSE = TRUE, CV = TRUE, indicator = \"Gini\")  head(Gini1) #>              district      Gini     Gini_MSE    Gini_CV #> 1           Amstetten 0.2506610 0.0004543057 0.08503297 #> 2               Baden 0.1815458 0.0001324130 0.06338390 #> 3             Bludenz 0.2841038 0.0007885591 0.09884166 #> 4      Braunau am Inn 0.2697336 0.0002901931 0.06315512 #> 5             Bregenz 0.1617372 0.0001258838 0.06937054 #> 6 Bruck an der Leitha 0.1778989 0.0002382211 0.08675945 tail(Gini1) #>                   district      Gini     Gini_MSE    Gini_CV #> 89                    Wien 0.2413731 0.0001131947 0.04407824 #> 90  Wiener Neustadt (Land) 0.2006023 0.0002253390 0.07483112 #> 91 Wiener Neustadt (Stadt) 0.2100767 0.0014837030 0.18335616 #> 92               Wolfsberg 0.2311071 0.0009660102 0.13448613 #> 93             Zell am See 0.3003195 0.0004827088 0.07315753 #> 94                  Zwettl 0.2677981 0.0022288514 0.17629216 as.data.frame(Gini1) #>                         district      Gini     Gini_MSE    Gini_CV #> 1                      Amstetten 0.2506610 4.543057e-04 0.08503297 #> 2                          Baden 0.1815458 1.324130e-04 0.06338390 #> 3                        Bludenz 0.2841038 7.885591e-04 0.09884166 #> 4                 Braunau am Inn 0.2697336 2.901931e-04 0.06315512 #> 5                        Bregenz 0.1617372 1.258838e-04 0.06937054 #> 6            Bruck an der Leitha 0.1778989 2.382211e-04 0.08675945 #> 7             Bruck-Mürzzuschlag 0.1682187 1.652236e-04 0.07641205 #> 8               Deutschlandsberg 0.1913224 2.293643e-04 0.07915843 #> 9                       Dornbirn 0.2082983 6.929718e-04 0.12637817 #> 10                      Eferding 0.2329806 6.966463e-04 0.11328867 #> 11            Eisenstadt (Stadt) 0.1875840 8.119365e-04 0.15190262 #> 12           Eisenstadt-Umgebung 0.2004414 5.140637e-04 0.11311524 #> 13                     Feldkirch 0.2262377 5.047038e-04 0.09930092 #> 14                   Feldkirchen 0.2537076 1.579048e-03 0.15662611 #> 15                     Freistadt 0.2099376 8.011244e-04 0.13482167 #> 16                       Gmunden 0.2035652 2.554946e-04 0.07852126 #> 17                         Gmünd 0.2557238 2.125490e-03 0.18028451 #> 18                  Graz (Stadt) 0.2155064 1.494586e-04 0.05672838 #> 19                 Graz-Umgebung 0.1829827 1.316544e-03 0.19829311 #> 20                  Grieskirchen 0.2090666 1.008586e-03 0.15190489 #> 21                   Gänserndorf 0.1994797 1.921915e-04 0.06949737 #> 22                       Güssing 0.2301604 7.912222e-04 0.12221336 #> 23                       Hallein 0.2254833 6.489844e-04 0.11298030 #> 24          Hartberg-Fürstenfeld 0.2631672 7.679258e-04 0.10529988 #> 25                      Hermagor 0.2485312 1.650781e-03 0.16347970 #> 26                    Hollabrunn 0.2197322 4.093010e-04 0.09207203 #> 27                          Horn 0.2289698 3.579521e-04 0.08262932 #> 28                          Imst 0.2449579 7.311943e-04 0.11038880 #> 29              Innsbruck (Land) 0.2019746 4.139933e-04 0.10073955 #> 30             Innsbruck (Stadt) 0.2069875 3.551326e-04 0.09104397 #> 31                   Jennersdorf 0.2459114 5.877856e-04 0.09858954 #> 32        Kirchdorf an der Krems 0.2302639 8.306758e-04 0.12516700 #> 33                     Kitzbühel 0.2523222 1.222655e-03 0.13857873 #> 34             Klagenfurt (Land) 0.1815504 5.944269e-04 0.13429261 #> 35            Klagenfurt (Stadt) 0.1627702 4.077377e-04 0.12405537 #> 36                    Korneuburg 0.1608567 9.234021e-05 0.05973879 #> 37                  Krems (Land) 0.2358282 5.561211e-04 0.09999745 #> 38    Krems an der Donau (Stadt) 0.2181051 7.553568e-04 0.12601150 #> 39                      Kufstein 0.1833995 1.678502e-04 0.07064198 #> 40                       Landeck 0.2602467 1.148258e-03 0.13020708 #> 41                      Leibnitz 0.2350626 3.335657e-04 0.07769751 #> 42                        Leoben 0.1860993 1.033475e-04 0.05462673 #> 43                         Lienz 0.2627103 6.914913e-04 0.10009588 #> 44                        Liezen 0.2587971 9.768290e-04 0.12076743 #> 45                    Lilienfeld 0.2417432 6.898991e-04 0.10865219 #> 46                  Linz (Stadt) 0.1847478 1.815338e-04 0.07292888 #> 47                     Linz-Land 0.1684694 3.443728e-05 0.03483321 #> 48                   Mattersburg 0.2073792 7.126628e-04 0.12872916 #> 49                          Melk 0.2656890 1.255416e-03 0.13335838 #> 50                    Mistelbach 0.2002418 2.197294e-04 0.07402685 #> 51                         Murau 0.2544567 2.923920e-03 0.21250489 #> 52                        Murtal 0.2232718 3.604960e-04 0.08503863 #> 53                       Mödling 0.1454743 7.551740e-04 0.18890225 #> 54                   Neunkirchen 0.2177180 2.832909e-04 0.07730757 #> 55               Neusiedl am See 0.2075293 5.246292e-04 0.11036894 #> 56                Oberpullendorf 0.2225282 5.380646e-04 0.10423948 #> 57                      Oberwart 0.2521503 4.386798e-04 0.08306428 #> 58                          Perg 0.2072744 2.015107e-04 0.06848623 #> 59                        Reutte 0.2070370 3.879181e-04 0.09513098 #> 60              Ried im Innkreis 0.2438417 2.854332e-04 0.06928579 #> 61                      Rohrbach 0.2279989 9.168689e-04 0.13280699 #> 62                  Rust (Stadt) 0.2508950 4.058043e-03 0.25390217 #> 63              Salzburg (Stadt) 0.1919434 1.643715e-04 0.06679440 #> 64             Salzburg-Umgebung 0.1639323 1.139990e-04 0.06513076 #> 65        Sankt Johann im Pongau 0.2402848 4.451068e-04 0.08780229 #> 66           Sankt Pölten (Land) 0.2332269 1.503084e-04 0.05256697 #> 67          Sankt Pölten (Stadt) 0.2199186 3.331637e-04 0.08299787 #> 68        Sankt Veit an der Glan 0.2438201 8.221905e-04 0.11760254 #> 69                      Scheibbs 0.2442704 5.390493e-03 0.30056843 #> 70                        Schwaz 0.2317185 4.676871e-04 0.09332906 #> 71                     Schärding 0.2907355 5.480095e-04 0.08051855 #> 72           Spittal an der Drau 0.2521698 6.586615e-04 0.10177429 #> 73                 Steyr (Stadt) 0.2102186 1.969636e-03 0.21111638 #> 74                    Steyr-Land 0.1731385 6.047411e-04 0.14203360 #> 75              Südoststeiermark 0.2439255 9.648467e-04 0.12734208 #> 76                       Tamsweg 0.2094321 1.302228e-04 0.05448792 #> 77                         Tulln 0.1996404 6.394416e-05 0.04005457 #> 78               Urfahr-Umgebung 0.1420431 7.835259e-04 0.19706365 #> 79               Villach (Stadt) 0.1877881 6.452013e-05 0.04277396 #> 80                  Villach Land 0.2042127 3.694955e-04 0.09412866 #> 81                     Voitsberg 0.2111620 1.451617e-03 0.18043062 #> 82                   Vöcklabruck 0.2094107 5.244822e-04 0.10936199 #> 83                   Völkermarkt 0.2369843 7.105056e-04 0.11247713 #> 84        Waidhofen an der Thaya 0.2672654 3.274056e-03 0.21409191 #> 85 Waidhofen an der Ybbs (Stadt) 0.2213196 3.763664e-03 0.27719509 #> 86                          Weiz 0.2436176 2.927377e-04 0.07023130 #> 87                  Wels (Stadt) 0.2369898 1.084322e-03 0.13894711 #> 88                     Wels-Land 0.1967274 7.877112e-04 0.14266538 #> 89                          Wien 0.2413731 1.131947e-04 0.04407824 #> 90        Wiener Neustadt (Land) 0.2006023 2.253390e-04 0.07483112 #> 91       Wiener Neustadt (Stadt) 0.2100767 1.483703e-03 0.18335616 #> 92                     Wolfsberg 0.2311071 9.660102e-04 0.13448613 #> 93                   Zell am See 0.3003195 4.827088e-04 0.07315753 #> 94                        Zwettl 0.2677981 2.228851e-03 0.17629216 as.matrix(Gini1) #>            Gini     Gini_MSE    Gini_CV #>  [1,] 0.2506610 4.543057e-04 0.08503297 #>  [2,] 0.1815458 1.324130e-04 0.06338390 #>  [3,] 0.2841038 7.885591e-04 0.09884166 #>  [4,] 0.2697336 2.901931e-04 0.06315512 #>  [5,] 0.1617372 1.258838e-04 0.06937054 #>  [6,] 0.1778989 2.382211e-04 0.08675945 #>  [7,] 0.1682187 1.652236e-04 0.07641205 #>  [8,] 0.1913224 2.293643e-04 0.07915843 #>  [9,] 0.2082983 6.929718e-04 0.12637817 #> [10,] 0.2329806 6.966463e-04 0.11328867 #> [11,] 0.1875840 8.119365e-04 0.15190262 #> [12,] 0.2004414 5.140637e-04 0.11311524 #> [13,] 0.2262377 5.047038e-04 0.09930092 #> [14,] 0.2537076 1.579048e-03 0.15662611 #> [15,] 0.2099376 8.011244e-04 0.13482167 #> [16,] 0.2035652 2.554946e-04 0.07852126 #> [17,] 0.2557238 2.125490e-03 0.18028451 #> [18,] 0.2155064 1.494586e-04 0.05672838 #> [19,] 0.1829827 1.316544e-03 0.19829311 #> [20,] 0.2090666 1.008586e-03 0.15190489 #> [21,] 0.1994797 1.921915e-04 0.06949737 #> [22,] 0.2301604 7.912222e-04 0.12221336 #> [23,] 0.2254833 6.489844e-04 0.11298030 #> [24,] 0.2631672 7.679258e-04 0.10529988 #> [25,] 0.2485312 1.650781e-03 0.16347970 #> [26,] 0.2197322 4.093010e-04 0.09207203 #> [27,] 0.2289698 3.579521e-04 0.08262932 #> [28,] 0.2449579 7.311943e-04 0.11038880 #> [29,] 0.2019746 4.139933e-04 0.10073955 #> [30,] 0.2069875 3.551326e-04 0.09104397 #> [31,] 0.2459114 5.877856e-04 0.09858954 #> [32,] 0.2302639 8.306758e-04 0.12516700 #> [33,] 0.2523222 1.222655e-03 0.13857873 #> [34,] 0.1815504 5.944269e-04 0.13429261 #> [35,] 0.1627702 4.077377e-04 0.12405537 #> [36,] 0.1608567 9.234021e-05 0.05973879 #> [37,] 0.2358282 5.561211e-04 0.09999745 #> [38,] 0.2181051 7.553568e-04 0.12601150 #> [39,] 0.1833995 1.678502e-04 0.07064198 #> [40,] 0.2602467 1.148258e-03 0.13020708 #> [41,] 0.2350626 3.335657e-04 0.07769751 #> [42,] 0.1860993 1.033475e-04 0.05462673 #> [43,] 0.2627103 6.914913e-04 0.10009588 #> [44,] 0.2587971 9.768290e-04 0.12076743 #> [45,] 0.2417432 6.898991e-04 0.10865219 #> [46,] 0.1847478 1.815338e-04 0.07292888 #> [47,] 0.1684694 3.443728e-05 0.03483321 #> [48,] 0.2073792 7.126628e-04 0.12872916 #> [49,] 0.2656890 1.255416e-03 0.13335838 #> [50,] 0.2002418 2.197294e-04 0.07402685 #> [51,] 0.2544567 2.923920e-03 0.21250489 #> [52,] 0.2232718 3.604960e-04 0.08503863 #> [53,] 0.1454743 7.551740e-04 0.18890225 #> [54,] 0.2177180 2.832909e-04 0.07730757 #> [55,] 0.2075293 5.246292e-04 0.11036894 #> [56,] 0.2225282 5.380646e-04 0.10423948 #> [57,] 0.2521503 4.386798e-04 0.08306428 #> [58,] 0.2072744 2.015107e-04 0.06848623 #> [59,] 0.2070370 3.879181e-04 0.09513098 #> [60,] 0.2438417 2.854332e-04 0.06928579 #> [61,] 0.2279989 9.168689e-04 0.13280699 #> [62,] 0.2508950 4.058043e-03 0.25390217 #> [63,] 0.1919434 1.643715e-04 0.06679440 #> [64,] 0.1639323 1.139990e-04 0.06513076 #> [65,] 0.2402848 4.451068e-04 0.08780229 #> [66,] 0.2332269 1.503084e-04 0.05256697 #> [67,] 0.2199186 3.331637e-04 0.08299787 #> [68,] 0.2438201 8.221905e-04 0.11760254 #> [69,] 0.2442704 5.390493e-03 0.30056843 #> [70,] 0.2317185 4.676871e-04 0.09332906 #> [71,] 0.2907355 5.480095e-04 0.08051855 #> [72,] 0.2521698 6.586615e-04 0.10177429 #> [73,] 0.2102186 1.969636e-03 0.21111638 #> [74,] 0.1731385 6.047411e-04 0.14203360 #> [75,] 0.2439255 9.648467e-04 0.12734208 #> [76,] 0.2094321 1.302228e-04 0.05448792 #> [77,] 0.1996404 6.394416e-05 0.04005457 #> [78,] 0.1420431 7.835259e-04 0.19706365 #> [79,] 0.1877881 6.452013e-05 0.04277396 #> [80,] 0.2042127 3.694955e-04 0.09412866 #> [81,] 0.2111620 1.451617e-03 0.18043062 #> [82,] 0.2094107 5.244822e-04 0.10936199 #> [83,] 0.2369843 7.105056e-04 0.11247713 #> [84,] 0.2672654 3.274056e-03 0.21409191 #> [85,] 0.2213196 3.763664e-03 0.27719509 #> [86,] 0.2436176 2.927377e-04 0.07023130 #> [87,] 0.2369898 1.084322e-03 0.13894711 #> [88,] 0.1967274 7.877112e-04 0.14266538 #> [89,] 0.2413731 1.131947e-04 0.04407824 #> [90,] 0.2006023 2.253390e-04 0.07483112 #> [91,] 0.2100767 1.483703e-03 0.18335616 #> [92,] 0.2311071 9.660102e-04 0.13448613 #> [93,] 0.3003195 4.827088e-04 0.07315753 #> [94,] 0.2677981 2.228851e-03 0.17629216 subset(Gini1, district == \"Wien\") #>    district      Gini     Gini_MSE    Gini_CV #> 89     Wien 0.2413731 0.0001131947 0.04407824 # }"},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizes an 'SAEforest' object — summary.SAEforest","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"Shows additional information data, SAE model components. Information extracted SAEforest object. returned object suitable printing print.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"","code":"# S3 method for SAEforest summary(object, ...)"},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"object object class SAEforest representing point MSE estimates. Objects differ depending estimation method. ... Optional additional inputs ignored method.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"object class summary.SAEforest including information sample population data, model fit random forest specific metrics.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"","code":"# Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                          smp_data = eusilcA_smp, pop_data = eusilcA_pop,                          num.trees=50, mtry=3)  # SAEforest generics: summary(model1) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop, num.trees = 50,  #>     mtry = 3) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                         50 #> Number of independent variables:         14 #> Mtry:                                     3 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                      0.5977 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39342.9  39354.1 -19669.5  39338.9     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -4.4557 -0.4893 -0.0572  0.4470 11.3610  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept) 14429652 3799     #>  Residual             32568503 5707     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.3070259  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 18 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                                                        #>  0 -19593.66 -19603.83 -19662.29 -19640.94 -19627.34 -19630.9 -19659.51 #>                                                                        #>  -19651.43 -19671.83 -19656.64 -19637.15 -19622.16 -19585.67 -19653.35 #>                                          #>  -19671.68 -19633.28 -19668.55 -19669.47"},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Tuning and cross-validation of MERF parameters — tune_parameters","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"Function tune_parameters allows tune parameters implemented MERF method. Essentially, function can understood modified wrapper train package caret, treating MERFs custom method.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"","code":"tune_parameters(   Y,   X,   data,   dName,   trControl,   tuneGrid,   seed = 11235,   gg_theme = theme_minimal(),   plot_res = TRUE,   return_plot = FALSE,   na.rm = TRUE,   ... )"},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"Y Continuous input value target variable. X Matrix data.frame predictive covariates. data data.frame survey sample data including specified elements Y X. dName Character specifying name domain identifier, random intercepts modeled. trControl Control parameters passed train. important parameters method (\"repeatedcv\" x-fold cross-validation), number (number folds) repeats (number repetitions). details see trainControl example . tuneGrid data.frame possible tuning values. columns must names tuning parameters. tuning function grid must comprise entries following parameters: num.trees, mtry, min.node.size, splitrule. seed Enabling reproducibility cross-validation tuning. Defaults 11235. gg_theme Specify predefined theme ggplot2. Defaults theme_minimal. plot_res Optional logical. TRUE, plot results cross-validation tuning shown. Defaults TRUE. return_plot set TRUE, list comparative plot produced ggplot2 returned individual customization processing. na.rm Logical. Whether missing values removed. Defaults TRUE. ... Additional parameters directly passed random forest ranger /training function train. details possible parameters examples see ranger train.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"Prints requested optimal tuning parameters (requested) additional comparative plot produced ggplot2.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"Tuning can performed following four parameters: num.trees (number trees forest), mtry (number variables split candidates node), min.node.size (minimal individual node size) splitrule (general splitting rule). details see ranger.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\") library(caret) #> Loading required package: ggplot2 #> Loading required package: lattice  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Specific characteristics of Cross-validation fitControl <- trainControl(method = \"repeatedcv\", number = 5,                            repeats = 1)  # Define a tuning-grid merfGrid <- expand.grid(num.trees = 50, mtry = c(3, 7, 9),                         min.node.size = 10, splitrule = \"variance\")  tune_parameters(Y = income, X = X_covar, data = eusilcA_smp,                 dName = \"district\", trControl = fitControl,                 tuneGrid = merfGrid) #> 1945 samples #>   15 predictor #>  #> No pre-processing #> Resampling: Cross-Validated (5 fold, repeated 1 times)  #> Summary of sample sizes: 1557, 1557, 1556, 1556, 1554  #> Resampling results across tuning parameters: #>  #>   mtry  RMSE      Rsquared   MAE      #>   3     5757.157  0.7120835  3830.652 #>   7     5518.994  0.7281565  3588.959 #>   9     5606.048  0.7184037  3655.541 #>  #> Tuning parameter 'num.trees' was held constant at a value of 50 #>  #> Tuning parameter 'min.node.size' was held constant at a value of 10 #>  #> Tuning parameter 'splitrule' was held constant at a value of variance #> RMSE was used to select the optimal model using the smallest value. #> The final values used for the model were num.trees = 50, mtry = #>  7, min.node.size = 10 and splitrule = variance.  # }"},{"path":[]}]
