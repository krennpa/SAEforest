[{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://krennpa.github.io/SAEforest/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Patrick Krennmair. Author, maintainer.","code":""},{"path":"https://krennpa.github.io/SAEforest/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Krennmair P (2022). SAEforest: Mixed Effect Random Forests Small Area Estimation. https://github.com/krennpa/SAEforest, https://krennpa.github.io/SAEforest/.","code":"@Manual{,   title = {SAEforest: Mixed Effect Random Forests for Small Area Estimation},   author = {Patrick Krennmair},   year = {2022},   note = {https://github.com/krennpa/SAEforest, https://krennpa.github.io/SAEforest/}, }"},{"path":"https://krennpa.github.io/SAEforest/index.html","id":"saeforest","dir":"","previous_headings":"","what":"Mixed Effect Random Forests for Small Area Estimation","title":"Mixed Effect Random Forests for Small Area Estimation","text":"package promotes use Mixed Effects Random Forests (MERFs) applications Small Area Estimation (SAE). package effectively combines functions estimation regionally disaggregated linear nonlinear economic inequality indicators using survey sample data. Estimated models increase precision direct estimates survey data, combining unit-level aggregated population level covariate information census register data. Apart point estimates, MSE estimates requested indicators can easily obtained. package provides procedures facilitate analysis model performance MERFs visualizes predictive relations covariates variable importance. Additionally, users can summarize map indicators corresponding measures uncertainty.","code":""},{"path":"https://krennpa.github.io/SAEforest/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Mixed Effect Random Forests for Small Area Estimation","text":"can install development version SAEforest Github :","code":"# install.packages(\"devtools\") devtools::install_github(\"krennpa/SAEforest\")"},{"path":"https://krennpa.github.io/SAEforest/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Mixed Effect Random Forests for Small Area Estimation","text":"basic example demonstrates functionality package: included features inspect model graphically. instance look following output generic function plot, shows -called variable importance plot: inspect model graphically, also map indicators. Take look example Austrian pseudo-data district-level mean income produced function map_indicators: hope like presentation package. interested model-based SAE definitely also check package emdi.","code":"library(SAEforest)  data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[,-c(1,16,17,18)]  #Example 1: #Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                          smp_data = eusilcA_smp, pop_data = eusilcA_pop)  #SAEforest generics: summary(model1) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                        500 #> Number of independent variables:         14 #> Mtry:                                     3 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                     0.62976 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39193.1  39204.2 -19594.5  39189.1     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -2.9730 -0.5194 -0.0759  0.4448 11.8159  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept) 11157235 3340     #>  Residual             30335770 5508     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.2688944  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 4 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                           #>  0 -19545.67 -19573.45 -19593.59 -19594.53 #> Press [enter] to continue"},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":null,"dir":"Reference","previous_headings":"","what":"Main function for unit-level MERF — MERFranger","title":"Main function for unit-level MERF — MERFranger","text":"function enables use Mixed Effects Random Forests (MERFs) effectively combining random forest ranger model capturing random effects lme4. MERF algorithm algorithmic procedure reminiscent EM-algorithm (see Details). function base-function wrapping function (SAEforest_model directly used ordinary user. Recommended exceptions applications exceeding scope existing wrapper functions research. function MERFranger allows model complex patterns structural relations (see Examples). function returns object class MERFranger, can used produce unit-level predictions. contrast wrapping functions, function directly provide SAE estimates domain-specific indicators.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main function for unit-level MERF — MERFranger","text":"","code":"MERFranger(   Y,   X,   random,   data,   importance = \"none\",   initialRandomEffects = 0,   ErrorTolerance = 1e-04,   MaxIterations = 25,   na.rm = TRUE,   ... )"},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main function for unit-level MERF — MERFranger","text":"Y Continuous input value target variable. X Matrix predictive covariates. random Specification random effects terms following syntax lmer. Random effect terms specified vertical bars (|) separating expressions design matrices grouping factors. details see lmer example . data data.frame sample data including specified elements Y X. importance Variable importance mode processed random forest ranger. Must 'none', 'impurity', 'impurity_corrected', 'permutation'. details see ranger. initialRandomEffects Numeric value vector initial estimate random effects. Defaults 0. ErrorTolerance Numeric value monitor MERF algorithm's convergence. Defaults 1e-04. MaxIterations Numeric value specifying maximal amount iterations MERF algorithm. Defaults 25. na.rm Logical. Whether missing values removed. Defaults TRUE. ... Additional parameters directly passed random forest ranger. important parameters instance mtry (number variables possibly split node), num.trees (number trees). details possible parameters see ranger example .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main function for unit-level MERF — MERFranger","text":"object class MERFranger includes following elements: Forest random forest class ranger modelling fixed effects model. EffectModel model random effects class merMod capturing structural components MERFs modeling random components. RandomEffects List element containing values random intercepts EffectModel. RanEffSD Numeric value standard deviation random intercepts. ErrorSD Numeric value standard deviation unit-level errors. VarianceCovariance VarCorr matrix EffectModel. LogLik Vector numerical entries showing loglikelihood MERF algorithm. IterationsUsed Numeric number iterations used convergence MERF algorithm. OOBresiduals Vector OOB-residuals. Random Character specifying random intercept random effects model. ErrorTolerance Numerical value monitor MERF algorithm's convergence. initialRandomEffects Numeric value vector intial specification random effects. MaxIterations Numeric value specifying maximal amount iterations MERF algorithm.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Main function for unit-level MERF — MERFranger","text":"exists generic function predict objects obtained MERFranger. MERF algorithm iteratively optimizes two separate steps: ) random forest function, assuming random effects term correct b) estimates random effects part, assuming OOB-predictions forest correct. Overall convergence algorithm monitored log-likelihood joint model components. details see Krennmair & Schmid (2022) Hajjem et al. (2014). Note MERFranger object composition elements random forest class ranger random effects model class merMod. Thus, generic functions applicable corresponding objects. details generic functions see ranger lmer well examples .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Main function for unit-level MERF — MERFranger","text":"Hajjem, ., Bellavance, F., & Larocque, D. (2014). Mixed-Effects Random Forest Clustered Data. Journal Statistical Computation Simulation, 84 (6), 1313–1328. Krennmair, P., & Schmid, T. (2022). Flexible Domain Prediction Using Mixed Effects Random Forests. Journal Royal Statistical Society: Series C (Applied Statistics) (forthcoming).","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main function for unit-level MERF — MERFranger","text":"","code":"# Load Data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Example 1: # Calculating general model used in wrapper functions  model1 <- MERFranger(Y = income, X = X_covar, random = \"(1|district)\",                      data = eusilcA_smp, num.trees=50)  # get individual predictions:  ind_pred <- predict(model1, eusilcA_pop)"},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest.html","id":null,"dir":"Reference","previous_headings":"","what":"'SAEforest' - Estimating disaggregated indicators using Mixed Effects Random Forests — SAEforest","title":"'SAEforest' - Estimating disaggregated indicators using Mixed Effects Random Forests — SAEforest","text":"package SAEforest promotes use Mixed Effects Random Forests (MERFs) applications Small Area Estimation (SAE). package effectively combines functions estimation regionally disaggregated linear nonlinear economic inequality indicators using survey sample data. Estimated models increase precision direct estimates survey data, combining unit-level aggregated population level covariate information census register data. Apart point estimates, MSE estimates requested indicators can easily obtained. package provides procedures facilitate analysis model performance MERFs visualizes predictive relations covariates variable importance. Additionally, users can summarize map indicators corresponding measures uncertainty. Methodological details functions package found Krennmair & Schmid (2022), Krennmair et al. (2022a) Krennmair et al. (2022b).","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"'SAEforest' - Estimating disaggregated indicators using Mixed Effects Random Forests — SAEforest","text":"package includes main function MERFranger wrapped SAEforest_model improved SAE workflow. function produces object inheriting requested results regionally disaggregated point uncertainty estimates. Additionally, statistical information model fit variable importance accessible generic functions summary (summary.SAEforest) class-specific plot function (plot.SAEforest). full documentation objects class SAEforest see SAEforestObject. overview currently provided functions within package can seen help(package=\"SAEforest\").","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"'SAEforest' - Estimating disaggregated indicators using Mixed Effects Random Forests — SAEforest","text":"Krennmair, P., & Schmid, T. (2022). Flexible Domain Prediction Using Mixed Effects Random Forests. Journal Royal Statistical Society: Series C (Applied Statistics) (forthcoming). Krennmair, P., & Würz, N. & Schmid, T. (2022a). Analysing Opportunity Cost Care Work using Mixed Effects Random Forests Aggregated Census Data. Krennmair, P., & Schmid, T & Tzavidis, Nikos. (2022b). Estimation Poverty Indicators Using Mixed Effects Random Forests. Working Paper.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitted 'SAEforest' object — SAEforestObject","title":"Fitted 'SAEforest' object — SAEforestObject","text":"object class SAEforest always includes point estimates regionally disaggregated economic inequality indicators MERFmodel element including information model fit fixed effects well random effects. Optionally SAEforestObject includes corresponding MSE estimates. case mean estimates aggregated covariate information, SAEforestObject additionally includes element, capturing number variables used weighting process aggregated covariate information. object class SAEforestObject, following generic functions applicable: print, plot, summary summarize_indicators. Additionally selected generic functions lme4 (fixef, getData, ranef, residuals, sigma, VarCorr) directly applicable object class SAEforest.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitted 'SAEforest' object — SAEforestObject","text":"Four components always included SAEforest object. MSE_estimates AdjustedSD NULL except MSE results requested. element NrCovar exists SAEforest objects produced SAEforest_model option aggData = TRUE. MERFmodel included MERFmodel object comprises information model fit, details performed MERF algorithm well details variance components. See exact description components. Indicators data frame first column area-level identifier additional columns indicators interest. Note objects SAEforest_model report \"Mean\". MSE_estimates MSE results requested. data frame first column area-level identifier additional columns MSE estimates indicators interest. Note objects SAEforest_model report MSE values \"Mean\". NrCovar means aggregated covariate information estimated, .e. SAEforest_model option aggData = TRUE. list containing variable names covariates used calculation needed calibration weights point estimates. See Krennmair et al. (2022a) methodological details explanations. Details object MERFmodel: Forest random forest class ranger modelling fixed effects model. EffectModel model random effects class merMod capturing structural components MERFs modeling random components. RandomEffects List element containing values random intercepts EffectModel. RanEffSD Numeric value standard deviation random intercepts. ErrorSD Numeric value standard deviation unit-level errors. VarianceCovariance VarCorr matrix EffectModel. LogLik Vector numerical entries showing loglikelihood MERF algorithm. IterationsUsed Numeric number iteratirons used convergence MERF algorithm. OOBresiduals Vector OOB-residuals. Random Character specifying random intercept random effects model. ErrorTolerance Numerical value monitor MERF algorithm's convergence. initialRandomEffects Numeric value vector intial specification random effects. MaxIterations Numeric value specifying maximal amount iterations MERF algorithm. call summarized function call producing object. data_specs Data characteristics domain-specific sample sizes number --sample areas. data Processed survey sample data.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fitted 'SAEforest' object — SAEforestObject","text":"Note MERFmodel object composition elements random forest class ranger random effects model class merMod. Thus, generic functions applicable corresponding objects. details generic functions see ranger lmer well examples .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fitted 'SAEforest' object — SAEforestObject","text":"Krennmair, P., & Schmid, T. (2022). Flexible Domain Prediction Using Mixed Effects Random Forests. Journal Royal Statistical Society: Series C (Applied Statistics) (forthcoming). Krennmair, P., & Würz, N. & Schmid, T. (2022a). Analysing Opportunity Cost Care Work using Mixed Effects Random Forests Aggregated Census Data. Krennmair, P., & Schmid, T & Tzavidis, Nikos. (2022b). Estimation Poverty Indicators Using Mixed Effects Random Forests. Working Paper.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitted 'SAEforest' object — SAEforestObject","text":"","code":"# Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[,-c(1,16,17,18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                          smp_data = eusilcA_smp, pop_data = eusilcA_pop,                          num.trees=50, mtry = 3)  #SAEforest generics:  summary(model1) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop, num.trees = 50,  #>     mtry = 3) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                         50 #> Number of independent variables:         14 #> Mtry:                                     3 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                     0.59709 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39327.5  39338.7 -19661.8  39323.5     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -3.3492 -0.5046 -0.0461  0.4593 11.3171  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept) 14325662 3785     #>  Residual             32310923 5684     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.3071765  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 18 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                                                        #>  0 -19595.29 -19614.18 -19645.15 -19627.56 -19659.28 -19610.8 -19645.64 #>                                                                                #>  -19628.09 -19636.39 -19660.01 -19630.5 -19681.52 -19651.45 -19657.8 -19635.46 #>                                #>  -19684.44 -19661.56 -19661.77 summarize_indicators(model1) #> Warning: For objects of class SAEforest_mean or SAEforest_meanAGG, only results for the Indicator \"Mean\" are reported #> Indicator/s: Mean #>                         district     Mean #> 1                      Amstetten 14239.17 #> 2                          Baden 22905.25 #> 3                        Bludenz 12105.02 #> 4                 Braunau am Inn 12149.92 #> 5                        Bregenz 33105.82 #> 6            Bruck an der Leitha 23418.20 #> 7             Bruck-Mürzzuschlag 23863.49 #> 8               Deutschlandsberg 20598.32 #> 9                       Dornbirn 19500.92 #> 10                      Eferding 15288.42 #> 11            Eisenstadt (Stadt) 35574.70 #> 12           Eisenstadt-Umgebung 24238.16 #> 13                     Feldkirch 15732.90 #> 14                   Feldkirchen 13472.32 #> 15                     Freistadt 16721.49 #> 16                       Gmunden 20298.43 #> 17                         Gmünd 13276.68 #> 18                  Graz (Stadt) 17744.26 #> 19                 Graz-Umgebung 34623.84 #> 20                  Grieskirchen 16695.92 #> 21                   Gänserndorf 19833.97 #> 22                       Güssing 16070.53 #> 23                       Hallein 15838.36 #> 24          Hartberg-Fürstenfeld 13173.47 #> 25                      Hermagor 12473.55 #> 26                    Hollabrunn 16578.11 #> 27                          Horn 14813.35 #> 28                          Imst 14144.37 #> 29              Innsbruck (Land) 26395.89 #> 30             Innsbruck (Stadt) 17435.63 #> 31                   Jennersdorf 12825.85 #> 32        Kirchdorf an der Krems 15880.01 #> 33                     Kitzbühel 12685.10 #> 34             Klagenfurt (Land) 22341.01 #> 35            Klagenfurt (Stadt) 32908.84 #> 36                    Korneuburg 27526.37 #> 37                  Krems (Land) 15265.48 #> 38    Krems an der Donau (Stadt) 16346.25 #> 39                      Kufstein 20395.17 #> 40                       Landeck 12520.68 #> 41                      Leibnitz 15485.99 #> 42                        Leoben 20013.53 #> 43                         Lienz 12642.80 #> 44                        Liezen 12143.18 #> 45                    Lilienfeld 14680.49 #> 46                  Linz (Stadt) 22369.48 #> 47                     Linz-Land 27350.08 #> 48                   Mattersburg 19676.38 #> 49                          Melk 12162.89 #> 50                    Mistelbach 19884.45 #> 51                         Murau 12614.49 #> 52                        Murtal 19091.09 #> 53                       Mödling 41138.40 #> 54                   Neunkirchen 16487.02 #> 55               Neusiedl am See 18405.74 #> 56                Oberpullendorf 16675.95 #> 57                      Oberwart 13185.07 #> 58                          Perg 17620.36 #> 59                        Reutte 17595.72 #> 60              Ried im Innkreis 13999.99 #> 61                      Rohrbach 14943.06 #> 62                  Rust (Stadt) 13211.02 #> 63              Salzburg (Stadt) 19966.62 #> 64             Salzburg-Umgebung 30405.89 #> 65        Sankt Johann im Pongau 14399.42 #> 66           Sankt Pölten (Land) 16573.76 #> 67          Sankt Pölten (Stadt) 16182.11 #> 68        Sankt Veit an der Glan 14494.71 #> 69                      Scheibbs 13609.98 #> 70                        Schwaz 15491.26 #> 71                     Schärding 10900.66 #> 72           Spittal an der Drau 13240.13 #> 73                 Steyr (Stadt) 17889.88 #> 74                    Steyr-Land 25284.63 #> 75              Südoststeiermark 13595.65 #> 76                       Tamsweg 15381.77 #> 77                         Tulln 19602.60 #> 78               Urfahr-Umgebung 42402.39 #> 79               Villach (Stadt) 22364.18 #> 80                  Villach Land 19733.83 #> 81                     Voitsberg 16858.17 #> 82                   Vöcklabruck 18011.02 #> 83                   Völkermarkt 15396.25 #> 84        Waidhofen an der Thaya 12525.32 #> 85 Waidhofen an der Ybbs (Stadt) 16701.65 #> 86                          Weiz 14900.06 #> 87                  Wels (Stadt) 14297.39 #> 88                     Wels-Land 20168.06 #> 89                          Wien 20275.94 #> 90        Wiener Neustadt (Land) 19737.02 #> 91       Wiener Neustadt (Stadt) 16586.03 #> 92                     Wolfsberg 16861.89 #> 93                   Zell am See 10460.25 #> 94                        Zwettl 12937.44 residuals(model1) #>           213           194           258           460           798  #>  -7008.668439   5429.251009   2568.688379    -17.487364   4430.535172  #>           447           567           704           680           277  #>   1121.277575   2353.442589   -935.410606   3891.456631  -4866.141894  #>            65           507           672            41           435  #>  -7121.504809   -877.920848   5783.397233  -2016.499524   -916.516629  #>           532           248            75           673           401  #>   -469.824134   9123.418640  -1945.983867  -1737.601133    770.333474  #>           765           156           436            12           612  #>   8726.623941   1311.360401  -4319.821037  -3951.376184  -4046.098515  #>           514           529           142           390           107  #>   -634.925880  -1471.170883  -2083.491785   2785.034698  -5993.296895  #>           478          2806          2787          5385          3760  #>   1510.674024   4201.142069   1659.391862  -4582.798684   5125.941819  #>          2552          3271          6185          6320          6080  #>  12993.595468   2070.574579  -2434.946643   2359.897921  -3972.152633  #>          5667          2638          4275          6175          6112  #>   -470.739225   -612.232264  -2645.282960   -860.150467   3809.822593  #>          5838          5641          3705          3660          3609  #>   5490.315328   -285.538909   1150.821885  -7393.770725    899.544726  #>          2712          6686          5166          4054          4840  #>   2118.447804   1436.134233  -1271.556885  -9681.540917    157.662969  #>          4133          6653          6871          5143          4922  #>  -2434.300241   5715.572451   -706.698717  -1761.784747  -5419.239587  #>          5927          7005          6332          4727          5439  #>  -4462.049036   1965.232389  -1801.184525  -1753.553099  -3444.738974  #>          3887          6199          6667          3704          3450  #>   2921.567727  -3954.549680   5641.451108   2491.818226  -2583.244597  #>          6292          2636          5399          2838          4376  #>  11982.571828  -2357.952024   8192.494752  -4574.356018   5571.877878  #>          7138          2834          3916          5585          4065  #>  -3097.463124  -1119.176529   1128.207223  -9774.047850   5769.510927  #>          6249          6821          6958          6029          5513  #>  -1434.848824  -6733.406799   5002.134814  -7134.974619  -2586.582546  #>          5165          3738          4548          6291          3589  #>  -1733.031293   3527.841093   7845.514267  -3651.375672  -9028.341536  #>          3262          5338          3680          3983          6991  #>  -5446.616122    326.775231   3758.123493   -803.991911   -427.932037  #>          4670          4466          6163          6026          3544  #>  -1319.242145   4585.931373  -2803.279980   4593.035530   1392.791450  #>          2541          5640          4858          2939          4596  #>   1592.246702  -4933.074289   2991.449070   7929.550792    629.288557  #>          3129          2523          5060          6526          6244  #>   1266.220692   2631.734192  -3330.318014    602.670231   1260.648511  #>          5489          6008          6890          4207          6582  #>   5307.922440  -3634.705180  -2888.632420    635.995463    430.011119  #>          6993          4421          3548          7136          2817  #>  -2149.166898  -1738.430812   1431.923571   1889.934614   1363.951048  #>          3325          6911          3577          4635          3958  #>   1671.774712  -1212.572696   2472.683248  -2634.924364  -1677.351421  #>          6484          3012          4848          6601          2860  #>  -3080.497333  -2161.194044   9772.328382  -2865.188947   1412.466100  #>          2556          5897          5781          3899          6099  #>   1275.819670  -3433.656395   1048.255400   8581.410240   -726.522909  #>          5524          4317          4638          5654          5285  #>  -2904.271553  -1746.892789   2256.737566   3005.304058   -444.260408  #>          4961          3657          5045          6192          5889  #>    -50.636850   1404.722770  -5951.250605  -3814.488733  -4545.113656  #>          4199          2883          6294          4443          3747  #>   -226.705741  -1939.266786   3715.851358  -4725.346645   2750.259493  #>          3755          7139          3358          3394          5210  #>    310.241284   1166.666739   3355.827633  -1993.706053   4739.105639  #>          2701          3550          5323          4470          5815  #>  -3606.547322   4847.628158   2800.161031   -244.313464  -1917.322627  #>          6855          3856          4803          6646          5425  #>   5480.892571  -2161.044059    -87.427749  -3158.962833   -297.868728  #>          3914          4660          4710          6461          3623  #>  -2415.192514   -853.929855    965.205927  -4355.557917   7142.386944  #>          2739          5650          3212          6872          6630  #>  -5993.621225   1064.239046   2842.288474   6449.839242   3682.778054  #>          5146          2917          5952          7046          3500  #>   3851.081088   -825.234136  -1183.868052   -768.860915  -2576.787519  #>          3592          4618          3649          4653          4117  #>    184.677540   -345.481890   1112.860834   8489.960655   8527.382188  #>          6910          3695          4312          3533          4547  #>  -4173.786172  -4195.614837  -1379.362929    -90.454904  -2075.740183  #>          4732          2872          4291          6235          6380  #>  -4335.936736  -3297.079259   5084.176611  -1029.180983  -4130.054746  #>          2697          4333          3813          6647          6076  #>   3454.914432  11551.074000  -4364.142787   1597.289670  -4939.983980  #>          2764          7051          4043          4846          3121  #>  -2623.790632   4064.234466    181.679488  -2204.702321   -978.475974  #>          6528          4380          5982          3719          5784  #>    944.424825  -4062.916667   5016.956740   3570.480960   1427.473654  #>          5993          6924          4761          3656          4818  #>   -905.775928   1666.556921  -2703.988324  -1968.004658   4141.896655  #>          6541          2779          5230          6481          3411  #>    201.595302  -2027.716038   3311.092448  -6644.672335   1132.307294  #>          6436          3612          4360          5892          6136  #>   3331.418224   7593.594621  -4108.816493  -3313.644329   8402.461455  #>          6451          4267          3768          5920          4374  #>   -770.940414   -267.820162   1085.637913  -8057.917957   1019.869886  #>          7018          5044          7103          3294          5777  #>    655.018518   3015.527376    445.624071  -3934.609112  -5140.151815  #>          3909          5469          5223          6202          4095  #>   3580.307322  -3504.831326   1616.361643    675.393144  -2774.155299  #>          5089          7119          4784          3388          4002  #>   -578.804065    553.786240    950.707528   -231.705982    369.414878  #>          2721          6960          4869          6338          3674  #>  -6720.129098   5174.372163   2781.673562   -986.124963  -7189.530497  #>          4326          4342          4178          6226          6238  #>   1495.134984  -2289.234524   1244.189680   6571.980543  -5488.684239  #>          4677          6264          6651          3893          6279  #>  12304.290226   1866.491803  -4443.140240    337.300674  12093.274027  #>          5260          5945          4613          3630          5062  #>  19183.459197  24606.358008  12801.850603  13837.008374   4525.945416  #>          2750          2762          3508          3191          3072  #>  -3765.749034  14460.341035   -359.305367  10010.116638   6775.789603  #>          4527          3514          7026          4507          5437  #>  -6109.977041  -9583.550367  -3888.365758  -9005.624979   7396.536117  #>          5269          7040          5753          3784          2648  #>  -7897.262856  -5568.882026  -2653.733984  -9932.057814   3907.210501  #>          4911          2771          4574          5691          6059  #>  -5915.523465  -7866.349248    685.014243  -8512.508961  -1516.767797  #>          4908          3019          3844          4056          2715  #>  -6706.585660    -62.843663 -11243.841071  -5484.788755   7738.177401  #>          6913          6354          2912          2927          7083  #>   2418.231598  -5914.245528   2702.513654  -1396.465037  -3063.723080  #>          5418          4420          5443          6027          2664  #>  -3535.019374   3016.135208   1136.232131  -3974.014362  -6573.799943  #>          5734          4997          2926          3173          2782  #>  -1264.884794  -1182.618039  -4503.276790   -419.263567  -3448.656330  #>          4709          5441          3298          4050          4879  #>  -1012.659239  11579.937643      1.106247  -2355.207989   8960.119888  #>          7076          4017          6742          2802          4149  #>  -4693.917143   5168.525068   5543.143512    -39.808614   4762.368649  #>          5980          6893          3217          4588          6538  #>  -2523.135154   -995.657018  -6023.889776    177.804216   4939.321419  #>          5666          3310          2905          4324          3037  #>   1836.093687  -6459.425905   2800.291733  -2118.081524   1036.150488  #>          3843          3185          4666          2947          6721  #>   2077.789595   3697.688422   1300.025279   2591.750181    305.589740  #>          6246          2983          4565          5422          5745  #>  -6663.425459   6545.480147   -351.787943  -3941.911333   4474.145976  #>          6227          4347          6161          6127          3021  #>   -722.461015   2428.281580   3192.197390  -1363.506165  -3687.929249  #>          5180          5375          6650          3228          3569  #>   5770.242552   -332.365711  -1746.960178   4029.199437  -9878.828637  #>          7077          4270          4822          5235          3275  #>  -2471.558361   2999.203508  -2411.027184  -1861.661725  -1450.462370  #>          4959          2627          5272          5322          4601  #>  -9000.305013   1794.452024   8082.242364    -38.013201   5163.511359  #>          5258          4069          5148          3882          3307  #>    750.525576   -991.410973    816.545401   2897.150919   1741.766092  #>          5358          2681          5508          5463          6662  #>   -138.464157   -134.580603   4219.706540   2141.904624  -8608.222925  #>          2851          5984          6720          5983          5869  #>  -4425.124887  -1285.494295   -855.573077    229.668875  -2408.189594  #>          3105          5026          4814          3734          3267  #>   3420.203779  -5355.658226   -599.528509   7490.153061   6982.691853  #>          3601          5981          5577          3931          4503  #>   1747.510121  -4151.783098   5839.617913   2384.281525   4275.319142  #>          5543          3323          6205          7032          4145  #>   -461.747728   -397.141241  -3192.581604  -1454.178761  -1096.967481  #>          4256          2970          4744          4740          3928  #>  -6690.968031  -3156.807290    650.580480   1943.524517   6220.859515  #>          5403          3107          3798          6965          3591  #>    158.116164  -8892.118745  -4909.575921   3710.036786  -3812.168090  #>          5332          2957          4662          4563          6442  #>   3869.243561  -5795.825430  -2461.366457   3460.364438   -113.550653  #>          5574          6896          7133          3197          5130  #>    336.587874  -1117.807222  -2797.545924    627.143731    769.153604  #>          4924          5702          6937          6399          6018  #>   3273.398987   1232.503269   8119.089116   -885.976060  -5893.320199  #>          6520          5701          6485          4356          5084  #>   5548.181844   -531.126369  -1522.509244  -8797.146490   5961.205535  #>          4413          6881          6446         19888         19002  #>   3539.751369  -1993.175001   3314.782269  33577.539417  24265.262469  #>         18315         20371         20862         21386         21124  #>   7769.541636   6500.925940  10386.319293   9397.721925   6748.679568  #>         21694         21420         22630         20981         18630  #>  10149.911239  -3670.593216  -1232.640660   -931.447141   5159.803633  #>         18313         18238         21052         22103         19650  #>  13462.768710   6321.365234   4707.197007   5414.322958  -1309.101259  #>         20548         23178         23814         23535         23711  #>  12745.990671   7549.518036   5649.532107   8419.818449   3629.285475  #>         21778         19831         23072         20153         20500  #>   2912.814014    -78.747270  13428.524582   7466.667411   2494.604676  #>         20483         23502         23268         22897         23972  #>   4330.341407     68.908727  -1993.660067    487.270674   6159.317584  #>         18689         22742         21776         19453         19908  #>   1791.799301  -1730.034765   4079.765942  -2076.731615  -2242.882994  #>         18589         23641         22342         20947         21075  #>  -5306.382348   3851.905673   1014.173339   4729.308110   3163.018746  #>         23365         21917         20956         22397         23123  #>  -1031.178498   1840.249805   -816.100081   4478.657486   3466.731485  #>         20533         19614         18300         18856         21830  #>   8215.130529   2641.094977   3674.538413    -81.648713   1232.178278  #>         19222         22581         19761         19842         23427  #>   3905.750462    133.094610   2270.626067   1973.694707   8746.273490  #>         23480         19824         21803         19318         23274  #>  -5336.369419     85.899475   5732.871034   1642.664863   1576.474244  #>         21617         20287         21937         22381         19784  #>  -1965.995606  -5912.966475  -3037.551795  -2291.468955   1659.991074  #>         21084         20734         18518         19329         22350  #>  -2869.924795  -2152.533505   -514.296503   2948.754386    960.005642  #>         23104         18411         23216         19359         23117  #>   1906.411869   5762.600043  -7113.081952  16863.230089  -4414.232778  #>         19382         19665         23051         20991         21044  #>  -5240.252168   1160.079220   -844.845677   -480.321750  -8684.838156  #>         22752         18563         18772         21808         22355  #>   3364.643501   7790.254140  -2532.955013    653.562178    126.965068  #>         21231         23666         20912         18510         18671  #>  -3703.907773   -201.080464   5935.872726  -2137.363770  -1357.192001  #>         23637         19136         19765         22042         18873  #>   -653.073052   -605.576839  10542.918876   -966.749211    925.832948  #>         19928         22478         23450         20441         22540  #>  -4684.839767  -1170.998640    510.513703  -4382.924650    258.787047  #>         20618         19316         20353         19845         21205  #>   2336.722453   -585.395503  -9005.275255  -5426.144921   -545.882080  #>         19859         20591         22968         22184         20426  #>   3681.525048   6386.077918   2143.938097  -2176.472658   6168.128156  #>         23654         19871         23057         20891         22932  #>   6159.270845  -5000.069514    671.330021   1210.510944  -2971.563750  #>         20649         23328         21157         20457         19169  #>    302.565302  -3341.673533  -4256.474079  -5092.756899   -993.072254  #>         23576         21825         22360         18652         21962  #>  -3115.043546   3598.435350  -2808.008440  -1642.331277   -458.602405  #>         21684         19402         20539         18653         21049  #>   1522.626637  -1725.071431   6196.545507  -1862.531012  -2839.151320  #>         19105         21339         19901         23056         23545  #>  -2206.904830  -1944.165941  -1704.864217    812.106372   -388.949114  #>         21304         22121         23931         19403         20857  #>   -479.749950   -777.237617  -2843.626595   -471.609044  -4024.271133  #>         19726         20770         22683         20207         19143  #>  -1101.261029   7931.083539   3396.887767  -3212.366235  -3936.083519  #>         18528         18927         21095         18296         18626  #>   2656.388994  -1626.622883    685.733787  -4291.616023    316.079454  #>         22140         22709         22236         22470         22066  #>  -3876.235605  -6107.836465   -131.499956  -2694.367567  -4203.914757  #>         23160         19035         22812         20993         22912  #>  -3703.961110  -1429.290818 -10239.779345  -3084.061601  -1946.450074  #>         23971         22911         18201         22878         18688  #>  -2148.915712  -4535.024304   -937.130660  -5884.120942  -3287.726114  #>         21121         19706         20386         23896         18687  #>   -462.373055  -7099.045332    766.533345  -4745.632461  -2763.337420  #>         23761         18408         19530         19680         20678  #>  -1763.654096 -11017.912713  -2041.072005 -12530.012825  -7142.719847  #>         18505         22555         23045         23454         23852  #>  -6316.604238  -5557.912092  -5171.841496    308.512218  -3642.059238  #>         21837         20480         23448         21920         22754  #>  -7634.824607  -1417.231151  -8171.579819 -10535.568891  -5456.301621  #>         20120         22972         19722         22451         19531  #>  -1826.238987  -8158.453188  -1338.417045  -6324.356113  -1293.378323  #>         23991         21023         22857         22590         22513  #>   1062.085410  -9648.056074  -2564.944815 -12012.028269  -1527.534255  #>         20275         19585         21612          2127           843  #>  -1688.283197 -13695.080155  -7770.834370    188.172937  14261.366817  #>          1710          1281          1102          1696          1200  #>  -9323.955999  -7809.575985   4280.664633  13525.035774  -1347.324346  #>          2002          1446          2137          1301          2411  #>    849.691561  -1127.374985   5508.321582  -1950.895178  -6023.387364  #>          1104          2072          2235          2175          2510  #>  -5417.832023  -4151.134622  -4206.470189   6187.297692   2661.719696  #>          1114          1617          1430          1159          1575  #>   3342.512481  -2273.287325  64329.731371  17318.927805  11624.473138  #>          2022          1240          1768          1254          1510  #>  -6066.902774   5839.750307  -1656.547860  -1485.937285    289.175206  #>          2246          2036          2104          1115          2321  #>  -1075.822936   6172.831469   3354.823241  -3452.254488   1186.413208  #>          1890          2239          1728          1265          1428  #>  -5020.613422   -260.508850  -5140.847285  -2147.396325   -945.990607  #>          2161          1940          1438          2068          1330  #>    217.116847  -8191.922137  -6407.799620  -7645.697959  -5709.317210  #>          1522          2517          2343          1271          1238  #>  -8460.362500    901.451893  -1437.933973  -6255.040469  -7022.854347  #>          1400          2232          2214          1563          1079  #>  -3185.099788  -8804.450703  -7535.924242  -1213.958967   2026.178883  #>          2327           806          1992          1553          2305  #>  -2621.621095   1812.244709    -50.799499   1525.320367   2793.967456  #>           967          2216          1022          1971          2431  #>   4596.273970    560.581801   2990.354301   6856.784320  -2426.222009  #>          1369          1307          1506          1455          1581  #>  -4254.563700  -1869.914145   2315.628683  -5050.198362  -2847.765001  #>          1598          1589          1270          2318          1226  #>   -300.851397   3788.064920   2199.592391  -2549.999250    112.411993  #>          1972           903          2391           859          1469  #>   6511.454523    674.649773    770.717631  -6477.921565   4031.020401  #>          2003           824          1819          1916          1898  #>  -4880.675971    305.800490   -492.231765  -4456.794717   1661.245905  #>          1148          2167          1242          1206          1936  #>    478.941663   3475.787340   2891.847739    359.063747  -2677.589406  #>          2262          1336          1162          2501          2507  #>  -1929.137200   -879.030983  -1600.927067  -4289.264901    194.986688  #>          2434          2344          2390          1947          1709  #>   2830.366237  -6272.713956  -4900.230563   8540.041748   2763.627494  #>          1706          1143          1141          1754          1138  #>  -9105.850568   -288.001596  18149.499731  -3500.842192   3244.884328  #>          1646          1843          1291          1250          2356  #>   -319.884686    632.091048  -3052.835677  -8496.404728   2085.863494  #>          2301          2460          1144          2477          1878  #>   1723.927818  -4501.402129   4336.990962   4079.508040   3421.904950  #>          2043          2306          1930          2331          2264  #>  -8456.399641   1872.356136  -1983.986358   -510.856082   6716.808342  #>          2187          1033          1567          1376          1039  #>  -2664.930470   4079.743344  -2338.091841   6411.922838   8067.372717  #>           987          1187          1834          2408          2285  #>  -1515.591805   1648.377716  -7191.783599  -2868.447834  -4276.014651  #>          2351          1317          1729           878          1657  #>   9502.160987   -973.544240  -3052.254930   1167.052020   1902.713024  #>           939          1158          1150           812          1525  #>  -3749.805276  -4540.020173    232.271438   4639.294083   2024.659725  #>          2174           891          2006          1103          1659  #>   5311.832858   -135.112983   1170.551675  -6900.123489  10278.115312  #>          1486          1602          1462          2265           930  #>  -6033.361937  -2063.263225  -1863.953110   2082.507216   5191.795428  #>          1391          1994          2362          1557          1063  #>   1487.722320   3076.595907   7897.026852  -5988.210019  -4439.314808  #>          1632          1619          1278          1808          1726  #>    277.496249    191.621068   -649.473310    298.845508   -220.388954  #>          2150          1331          2144          1977          1080  #>   -356.341392  -7882.218978  -6878.341317   5518.879316  -1816.313599  #>         10177          9814          9972          9967          8819  #>  -1555.527748  -6603.018725  -4130.065770  -1418.141710    448.933736  #>         11461         11711          8986         11599         10250  #>   5084.281330   1909.781116   7599.828897  -2314.933622   1713.289593  #>          9306         11061         11146          9265         11762  #>    688.162028   2644.123014   2165.240437     73.127386   1146.486247  #>         10020          9362          9930         11243         12167  #>   8137.829177  -5766.730274  -3507.776653   -921.829624   -609.383018  #>         10982         11544         11657          9132          9628  #>   -683.509487   3292.476296   1887.730361  -7436.268230   9754.465783  #>         11869         10387         10373          8955         10857  #>   1576.465619   1258.732964  -3160.123640  -1522.012488  11384.517254  #>         11320         10178         11928          9237         10444  #>  -2354.771478 -19037.864764  -2044.937009     27.213494   1156.678120  #>          9685         11596         10697          9809          9525  #>   1400.163100   2610.694665   -532.356484 -13602.357140   6919.462691  #>         12012         11355         10412          9701          9957  #>   5942.526944   5622.167812  -2334.051455   6994.245962   1054.850479  #>          9945         10244         10891         10396         10480  #>    711.890921  51373.410098  18960.053159  26752.609647  16667.869286  #>         10194          8839         11910          9023          9560  #>  21705.558251   1938.837691   2518.786839   2631.646920   5531.373866  #>          9385          9616         11849         11117         11523  #>    727.803829   9119.676526  -1926.166780 -15905.095462   3133.741857  #>          8821          9914         10144          9652         10714  #>  -7318.589923   1752.720472  -8397.484702  -6559.733923 -11829.854409  #>          9444         11089         10741         10034          8923  #>  -5901.073136    782.991277    874.981768 -11893.283936  -8272.880170  #>         10180         10656         11803          9354          9098  #>   2490.393000  -8395.156998   -326.833407    180.076034  -3455.506519  #>          9155         10551          9821          8933         12046  #> -15030.886317 -14600.248241  -3335.385006   1214.257950 -10110.249305  #>          9179         11064          9263         10816         11854  #>   3698.367166  -8799.533692   -541.053577  -2929.623452  -7917.781455  #>          9727          9742          9927         10504         12005  #>   5334.190869  -2714.994835   5961.197665   3252.112510  -4441.415752  #>         11242         10826         11138         11452         10246  #>   -399.103505    631.603219  -5161.864156   3618.519356   4795.553405  #>          9588          8879         10100         10704         10983  #>   -632.086606  -7862.997594   -403.910208  -4151.753654   1844.366560  #>          9365         11344          9310          9710          9050  #>   1638.984369   1590.921213   2902.128498   1288.222546  -1600.921438  #>         10342          9593         10159         11693         10798  #>   1110.059742   1040.260216  10420.762176    634.314234  -2058.838680  #>          9912          9236          8999          9347         11489  #>  -6079.087632  -6788.761958    816.280484   5386.490868  -4578.885341  #>          8939         10768         11568         11983         11141  #>   -226.347726   6458.723031    835.791401  -5664.500431   4023.082281  #>         10426         10574         11270          8945         11057  #>   -930.292074    122.636998   3746.285484   -183.909839   -824.453209  #>         10460         11993          9948          8962         11241  #>  -3310.321959  -7031.499410  -5473.063748   8473.655998   1724.246607  #>         10275         10678         10613         10732          9953  #>  -2438.826558   3842.626354  -3977.729773  -2451.173146  -1541.200356  #>          9296          9129          8917         10050         11373  #>   2145.759117  -4787.245372   2060.614934   -282.326187   1355.343904  #>         10571         11601          8984          9400         11075  #>   1487.990304    478.196783   1225.823271    489.783576   -232.214280  #>          9268         10132         10490         10895          9554  #>  -2080.442141   4480.625560    597.154453  -6503.726715    250.103564  #>         10397          9623          9718          9174          9925  #>   2457.860147  -1143.501695    976.363781   1923.637971   -666.506490  #>          9269         11187         11746          9323         10783  #>  -1350.006699  -1406.789620  -2744.063713   1004.585753   5098.875251  #>         10663          9102          9085         11404         12101  #>   -895.096840  -4375.440768   4824.074166  -2362.639199   1270.870617  #>         10367         10575         10659          9979         10258  #>  -1893.410666   2626.143459  -4911.020009   -565.486803  -1461.691233  #>         11215         11221          9032         11960         11212  #>   1148.633334   1675.213491   5774.122410   2303.461214  -1843.129008  #>          9576         11499         11000         11391          9559  #>   2143.110875  -1750.647322  -8001.382389  -3342.930499   3063.805373  #>          9187          9455         10938          9811         11982  #>   3638.584267   2147.495485   -407.608927    892.535211  -3324.975664  #>         11705         11235         10458         10985         11625  #>  -1669.403568   2081.418832  -1034.565567   5693.093366  -1145.689522  #>         11441          9071         12182          8820          9311  #>    470.880142  -1079.141071  -4037.232658   3321.564013   -989.482477  #>         11511         11925         10949          8870          8989  #>  -3559.593727   4446.639530   2839.443344    299.932458  -2312.109259  #>          8907         11926         10805         11228         11552  #>  -1081.174949    968.885265     37.700235  -2008.243244  -2559.538198  #>         11988         11924         10845         10221         10164  #>     23.787401    657.959226    615.419821   2742.041676  -1942.649112  #>          8990         10438         12177          8898          9956  #>  -2273.263529   3168.269166  -3252.741506    215.971187  -2216.387250  #>         11119          9259         11385         10472         11115  #>   1944.120911   2277.356327  -8519.735990   -373.292843   2105.861735  #>          9391         10318          9806          9496          9603  #>   6095.858168   -741.824920  -1951.613032  -3057.289439   1989.085336  #>         11976          9290         10781         11247         11660  #>   3749.429430   4736.174565   -852.337838   4765.921543   2524.994213  #>         11686         11245         12197          9314          9822  #>  -3292.979381  -2489.017672   1398.610781    722.715440   1447.374102  #>         10818         11673         11600          9539         11312  #>   1959.740759   3155.838130  -7445.573752   2794.945209    150.794847  #>         10152          9543          9725          9441          8997  #>  -2643.300362  -3250.896966   1343.766903   3357.491908  -2389.841813  #>          9470          9599          9332         10716         12038  #>   3354.347301  -1093.008928  -3413.684476  -1350.406648   -182.114637  #>         11121         10384         11033          9653         10266  #>  -2287.984257  -1766.394156  -1757.627743  -3624.241670   2651.222277  #>         12054         10173         11459         11745          9621  #>  -1404.429559   4252.251331      5.816596   3678.257666    982.785508  #>         11400         11724         10990         11464         11533  #>   -811.533883   5531.742153   1845.333758   3677.672728   4540.776138  #>         11184         10245          8862         10352         12055  #>  -7706.728322   2751.253360    783.070729   1231.204766   4916.407466  #>         11267          9196          9239         12052         10263  #> -10104.673812  -7386.701556   2892.118055    673.486616    130.817320  #>          9080         11977          9650         10875          9799  #>  -1840.242828  -3305.913606   1992.632931  -3693.927079   3747.500895  #>          9421          9230         10578          9136          9257  #>   1896.701598  -1467.531736  -6127.815510   2952.568974   1844.379626  #>          9991         11820          9776          9304         11760  #>   6726.995868  -2599.389408  -3238.250729   2635.277536  -4472.532744  #>         10959         11806         10035          9955         11313  #>  -3654.182472   3025.587498  -1805.780122   6327.079411  -6347.328885  #>         11343          9973         11702         10327         10635  #>  -4286.706059   5465.740351   2457.131901   3173.244215  -4126.644573  #>         11832         11594         10370         10603          9475  #>  -1749.005180   -842.891236 -10630.278483   -590.155603  -1780.754151  #>         10828         11011          9531         10851          9204  #>    523.923802   3606.656254  -2935.002000   6106.852022   2347.533769  #>         10225         11195         11517         11013          9022  #>   1253.839585   4823.112412   -309.444354   -925.513693  -5093.786300  #>          8875         11036          9712         12111         10793  #>   -603.372030  -1908.419973   -884.353263   3593.591465   5137.834419  #>         11737          9573         10935          9639         11194  #>   -466.816522  -3422.491847    657.148468  -3529.888446  -2416.776007  #>         10165          9031         11092          9882          9894  #>   -605.430621   3655.384490  -2220.394394    628.586888   6271.907646  #>         11018         10282         11741         11363         11575  #>  -5043.415641   6850.581772  -2899.562339    117.508280   -414.408554  #>         10273          9772         15687         17545         14717  #>  -1268.429422   4554.707530  -7347.563537   2163.283460   3192.793867  #>         15060         17725         16189         15752         17687  #>   2238.725539  -3649.706590   3174.517342   3280.061395   3523.581494  #>         14326         15530         15393         16553         18141  #>  -3069.224972   3664.588606   2124.940843 -11183.430313  -5948.398596  #>         17346         16330         17591         16567         16093  #>    231.874423   1632.227847  -1310.099318  -2988.098674    212.536606  #>         14153         14737         15396         15526         17243  #>   4252.922163    927.587843   -301.621874   2781.061468   3825.954926  #>         15089         15551         16212         15767         16529  #>  -2423.335552  -7374.453539  -1099.957651  -3088.640514   5811.648126  #>         16406         15430         16153         14782         17551  #>   1613.019959   -190.172217   2352.278324    592.884007   4508.300072  #>         15569         16666         14279         14838         16030  #>  -1748.184347  -2968.711742   1143.758576   2224.489635   4444.869913  #>         17605         17513         16887         14126         17382  #>   -334.479939  -3961.528843  -6270.626369    408.080182   2900.863458  #>         15111         15021         17809         16245         16899  #>  -2995.682371  -6092.212851  -3077.393003   2859.812070   6464.012979  #>         17481         17230         15348         18084         16215  #>   1610.974386 -10426.251818   2617.765994  -2672.331903   -376.549453  #>         15876         17557         15770         17985         18037  #>   -812.045886  -1830.364680  10940.795024   1338.697761  -7245.600432  #>         17894         17070         16275         17300         16101  #>   -809.637156   -242.770032   -624.850341   1135.266312    188.163488  #>         16752         15801         16410         15573         16796  #>   -369.131281  -4813.855475   5541.414833  -1871.537103  -5178.435803  #>         16983         15261         17991         17603         15892  #>   3709.840800   1443.052529   1016.487513   2780.804422   8850.970271  #>         17778         17363         16356         17960         14550  #>    852.467447  -5379.157973   3468.132420   1443.614261  -3885.444991  #>         17458         17071         14251         14296         17433  #>  -2833.739709   5919.342100  -1226.466286  -3084.268998   2738.885990  #>         14463         18023         14212         17879         15595  #>   6608.715442   2254.138935  -5163.636687   6285.804016  -7139.089587  #>         17743         16656         17207         17881         15705  #>   3076.102669     -6.398212  -1116.173778    858.020609  -3766.974373  #>         17826         15813         14746         14539         17386  #>   3022.736867  -1741.928065   3991.782623    478.589438   1215.439080  #>         18117         16398         15697         16512         16094  #>  -2361.065368  -5810.540832  -4790.104696  -2848.677735    -38.033188  #>         16799         16766         15134         17415         14670  #>  -7745.475705   9549.821199   8966.508205   2231.580848  -1577.488339  #>         16949         17804         15367         14571         14118  #>  -3553.331676   1727.521755   -451.154706  -6504.885172  -3513.122359  #>         17723         17857         16450         16412         16176  #>  -8923.289631  16957.031021   5753.935179  -7305.251237   3824.548766  #>         15839         16283         16542         14294         14761  #>   2861.262736   4119.719605  -1189.247358  -3536.845396  12487.000795  #>         15545         16904         16448         17111         15746  #>  -1938.124073   4502.638653  -2660.150375   4072.859434   7269.601342  #>         16896         15187         17412         17594         17038  #>   2683.912362  -5082.551947   5910.140137    623.097200   1903.515613  #>         16313         18107         15541         15211         16982  #>  -5618.300470   5998.139234   1106.517054  -3238.316288  -4934.620805  #>         16280         15167         16551         16111         17767  #>    -19.759435  -3771.697168  -2543.174709  -6398.470434   6634.380669  #>         16321         14104         14412         14527         17232  #>  -6223.833249  -2808.818222   7190.298801    344.449753   -869.024471  #>         16698         15643         17929         16217         15076  #>   1574.632744  -4687.942127  -2786.856207   3425.443942   1475.114107  #>         15219         17720         16106         17099         18073  #>   9353.044656   3206.480464    542.481966   6251.745616  -5076.355396  #>         16365         15164         17287         15181         15868  #>   9504.792754   3844.315559   7939.465339  -4280.926748  -3894.542592  #>         15046         16779         16797         17485         15124  #>  -1094.805012   6767.626562   1154.930301   3861.807047   2389.243644  #>         14509         16657         17254         17131         15672  #>  -2929.468506   5432.619538  -1649.106862  -1682.970015  -1094.537655  #>         14894         15065         15910         16371         14702  #>    842.146632  -2355.894427   1416.240321    250.863990   -261.815141  #>         15623         17352         14547         15288         18120  #>  -1167.968249   1015.426182 -13537.884669     95.178247 -12087.932324  #>         15378         17127         14768         15954         15271  #>  -7026.067242   1408.973984   4715.599031  -5756.847578  -2466.945731  #>         14866         17209         16080         17941         15395  #>   4919.322267   1710.150832   3384.279974    541.655231    806.943831  #>         14956         15009         17827         15809         15090  #>   5850.217497  -3710.711808  -5586.974344  -3650.029166  -1849.953442  #>         15237         14295         17241         16304         16487  #>  -3387.995538  -5924.565789   5595.043960  -1615.697090  -3132.548886  #>         17837         14622         17704         17039         16205  #>  -4419.145477    609.995955   6753.212979   -148.888945    630.134915  #>         16002         17281         17657         17156         17543  #>  -4804.249999   -222.725038  -2159.240072   8459.698434  -3207.540669  #>         17538         17672         14333         16876         17197  #>   1052.457462   1232.314327   5129.242807   1949.765885    481.270810  #>         16329         14842         15727         16524         16635  #>   -426.328679    754.408392  -3078.784487  -1883.402702  -1662.032004  #>         14573         14522         15983         15515         16198  #>   -951.999801   -753.380806   6469.813298  -8363.125326  -2149.798562  #>         16174         14798         14677         16823         17866  #>  -2657.653379  -1385.461860   3749.777325   1726.036300  -1542.719860  #>         16034         15640         16102         17370         16183  #>   3148.316255   1053.854237  -1347.376579   4239.075376   2095.598149  #>         15665         14417         16764         14767         15890  #>  -1463.769621  -3900.768990    254.842941  -1856.777112   5201.834703  #>         14282         14394         17549         17921         14735  #>   3558.720463  -2812.729933    881.882122  -3381.939593  -1879.736335  #>         17912         15554         16496         17624         16862  #>   1763.392649  -6223.705376   4844.338151   3981.033676  -1310.263836  #>         15282         15928         15511         14432         17527  #>   -834.463459   2180.260201   -394.171267   1786.316932  -3751.329157  #>         17951         14559         16702         15691         14887  #>  -4363.618368   4076.591116  -3258.734354   4335.197167   -117.826928  #>         17566         17599         16746         17121         16372  #>   4710.471096   2438.916864  -2632.416619    667.502315  -2035.338335  #>         16105         15810         16622         15079         16977  #>  -1317.814544  -5883.596193    582.937214  -6089.106371  -3653.857829  #>         15432         16962         16641         16375         15421  #>   1212.571475  -2285.051574   3560.978864   -106.913191    261.432990  #>         15100         16873         17178         17247         18041  #>  -2050.851186 -10676.372829    392.829881   4371.490050   5449.580590  #>         15581         17629         14731         17356         17546  #>  -2251.040735  10010.357891  -3244.013750   -534.220689  -1047.364675  #>         17421         17635         15295         15674         15109  #>   5188.468548   4227.899941  -6386.285374   3128.714336   3420.987302  #>         17764         14773         15478         14284         16314  #>  54513.732975   2854.965613   6521.117481  28165.384590    817.370871  #>         16604         14178         16814         15807         14270  #>   2554.008227  -2238.642633  -6265.602931   1730.655055  12051.082924  #>         15016         17216         18108         14499         14951  #> -14402.493979  -1568.739489  -2033.496901  -4058.010918  -4731.821101  #>         16889         14166         15034         14651         16582  #>  -8503.447627  -1532.500290 -10156.922804  -1238.903869  -3708.261650  #>         17777         14812         14910         16022         17153  #>  -6796.940092  -6480.034445    165.481089  -7113.035484   -264.281325  #>         14633         17378         15206         17668         16173  #>   1570.337712   2775.894982      2.443254  -2899.852677  -4405.104939  #>         15616         14513         17942         14516         17783  #>   -525.130269   3271.394976  -6337.116836   1731.101624    930.745051  #>         15766         17656         16436         16229         16326  #>   2217.246860    256.446029   5924.508635   1647.557620   2762.924677  #>         17604         17418         17797         15897         16433  #>  -4916.453246   -320.561806    997.672589    134.822804   3248.600048  #>         16562         15180         17745         15977         17148  #>  -3190.351506   -365.357388  -3817.925608   -907.941525  -2054.320814  #>         17899         15014         14836         14387         17313  #>   2152.408977  -5557.393662    733.285112   2721.745823  -7812.480833  #>         15260         14248         16339         16359         15495  #>   6105.491318    141.057561   3723.553224    419.290625   -519.494154  #>         14156         14526         16624         15960         14456  #>   -455.964819   2361.634836   6624.550095   -707.143966    965.217871  #>         15047         16112         16568         15538         15648  #>  -5019.121130   3040.248513    594.728635   6421.375646  -6585.291781  #>         17371         17196         14930         14708         17358  #>   -958.084418   4208.650522   1004.167434  -2921.008711  -3122.755391  #>         17729         17943         15592         17284         17612  #>  -3332.173647  -2415.478018    190.395053  -7230.368776  -2786.526949  #>         15591         16926         16488         15520         15695  #>  -3064.713299  17799.858040  -3322.489926   2851.916686   3384.136528  #>         16906         16133         16680         14854         14198  #>  -3179.394229    494.547341   2443.472896   -685.783700   1133.288765  #>         14436         16050         15188         14784         17262  #>  -4387.028939  -3940.159386    388.552614   3457.894195   5590.411711  #>         15578         17208         14233         18043          8684  #>    308.923154  -1069.363307  -5570.510146    109.115922   4107.176473  #>          8490          8215          8173          8806          8698  #>  -5905.764997  -1992.718666    637.068435 -11665.349305  -1662.793323  #>          7207          7801          7951          7369          7959  #>   2401.174123  13421.465757  -5923.727419   2790.722630   2414.911498  #>          7974          7712          8489          8470          8257  #>  -2342.958285    959.513650  -1347.915939   2956.116951   3286.368974  #>          8415          8185          7440          7928          8401  #>   1139.393165     46.832766  -3538.650061  58450.604014  35211.221180  #>          8793          7522          7823          7458          8792  #>  19791.336534  14486.399095   3284.490367 -11113.456209  -6654.345918  #>          8182          7506          8172          8305          8241  #>  -2626.090720   6913.384577  11903.037512   2361.821997  -5590.328361  #>          7762          8383          7659          7860          7937  #>  -1985.098474  -8189.621921  -6975.335615  -6792.046023   6835.802119  #>          7400          7358          7555          8131          7723  #>  -5882.560274   8862.134620  -8186.188605   -937.619772  -9520.283275  #>          7175          7693          8283          7282          8585  #>   1053.446193   1090.524011  10558.693551  -6212.893139    513.564805  #>          7887          7368          8304          7151          8550  #>  -6777.688425    448.095724  -5245.321422  -3754.776320  -8979.721171  #>          8743          8442          7415          8484          7608  #>  -7876.990686  -5043.016523   -475.183534  -5408.033413  -4352.402149  #>          8524          7563          8503          7541          7347  #>  -7083.032961  -4964.071010  -1135.015410  -3310.612247  -4937.793632  #>          8019          8646          7310          7921          7198  #>   2776.083992   -397.711596  -5274.108156  -9758.481761   7281.883054  #>          7678          8054          7891          7201          8673  #>   7071.812926   6949.645968   3710.739549  -3592.982239  -5287.255522  #>          8030          7319          7834          8269          7656  #>   -988.005872  -1945.775414  -2172.557949   -948.470217   3445.348527  #>          7324          8132          8548          8149          8695  #>    917.946740   5302.305727   4407.927139  -3605.885618 -13028.183351  #>          7852          7225          7241          8794          7390  #>   1490.968948  -1066.514378   1518.702269   4740.506978   2162.705035  #>          8779          8418          7278          7374          8116  #>  -3237.134968  -2525.262663   2367.244493   2187.207703  -1344.420273  #>          8668          7254          7618          7213          7917  #>    794.207273  -1168.300429  14566.626903  -3781.040183   -538.996250  #>          7750          7216          7696          8652          7565  #>  -3976.022622  -1438.162485  -1410.607830   1441.513702  -4310.327310  #>          8554          8678          7460          8200          7174  #>  -1881.404753  -1557.532426  -2782.736877   2420.583275  -1498.159412  #>          7370          8008          8660          8628          7579  #>   2744.517218  -2089.763331  -6782.078387   4262.818342  -1295.808260  #>          7551          7397          8535          8113          7614  #>   1918.297959  -2522.330008    627.994054   1610.977470  -2465.694163  #>          8525          8584          7539          7545          8421  #>  -5584.383966   2832.633677   7307.284043    825.922222   3333.179840  #>          7807          7277          7236          7802          8244  #>    876.884138   3697.937694  -2628.027952  -4463.413808   1909.625779  #>          7683          8193          8701          7583          7797  #>  -1952.310383   1195.499412  -3300.414173    895.494400   1415.693852  #>          7217          8370          7493          7900          7716  #>  -2410.385411  -3367.737147   1559.658488  -2394.829475    479.693593  #>          7269          8500          8683          7352          7455  #>  -1019.791634   1469.884370  -2915.013517   2084.890163   3729.771921  #>          8015          8349          7816          8092          7463  #>    583.783095   -828.341636  -9106.586337    908.808043   5996.315011  #>          8192          8296          8681          7387          7655  #>  -3343.007556    981.497097   -324.620299  -8215.822859   3395.487654  #>          7484          8483          8112          8583          7306  #>   2984.792770   1200.583027  -2216.451774   2600.383541  -3532.947584  #>          8186          7361          8188          8776          8765  #>    543.327818   1423.324595   3444.372312   -144.049723  -2746.468255  #>          8265          7606         12499         12519         13355  #>    985.696848  -3582.294768  -4397.506227   1595.881332  -5058.336740  #>         13460         12220         13587         12670         14011  #>   -613.610087   -924.431973   7582.271872  -1464.146559   1115.650022  #>         12498         13400         13730         12435         12271  #>   5615.648928   2322.870901   -627.310572   -494.311957    562.975238  #>         12204         13659         13451         13097         13072  #>  -1737.702714  -2129.442483  -3425.944507  14075.725746  13715.522221  #>         13364         12485         14070         12355         13525  #>  13865.200366  -1612.512413   4939.263981  -4706.372219  -7519.710849  #>         13592         12819         12929         13781         13706  #>   9817.201663   3917.111720  -5909.240117  -1775.553533  -4674.031179  #>         13073         12884         14064         13412         13229  #>    348.136137  -1389.316131  -1130.472415   2992.125652  12517.353140  #>         12641         13345         12521         13971         13873  #>   3046.460980  -2595.664683   8321.055862  -1487.334973    264.311871  #>         14006         13504         13623         12280         13863  #>  -2376.876414  -1697.026551  -1057.199092   -708.548890  -4574.069316  #>         13784         12847         13134         12292         13107  #>  -4006.637403  -2962.026540  -2372.469964   -945.856368   2750.127566  #>         13663         12541         12544         13972         12323  #>   2224.326455  -3113.890078   5950.101896  -1957.649062  -4444.659143  #>         12506         13802         13657         12676         13026  #>  -2193.155667  -3732.606222    188.425409  -4969.000979  -2646.743972  #>         12552         14025         12917         13805         12467  #>  -3053.433690  -2703.972698  -7439.263669   1079.546770  -1742.364713  #>         13727         13960         12440         12668         13669  #>    951.768408   6924.536393   -285.721812   1396.517658   -185.119735  #>         12744         13932         13304         12860         13410  #>   5061.526281  -4862.729029  -2752.130243   6335.048577   8401.163046  #>         13740         13829         12566         12226         12903  #>   1465.002665  -6507.378447  -2595.366569   4553.268611  -5817.202960  #>         13415         12721         12526         12284         13593  #>   5653.142929  -1547.483754  -3992.479339  -4272.795243  -6321.648390  #>         13237         13335         13930         13330         12354  #>   -204.756330    233.515912  -4594.324353    698.266215    797.913207  #>         13479         13203         13422         13480         12408  #>    599.976015   5572.690480  -1802.939900  -3170.947031   3860.312143  #>         12912         13036         13148         12951         13366  #>  -1919.978629    642.658322  -1783.168516  -3334.067851   6932.803062  #>         13205         14027         13601         12558         12948  #>  -1633.361498   6344.346241  -1137.756872   1514.372549    308.813220  #>         13315         13869         13754         14014         13676  #>   2274.076534 -11181.450045   2592.034919   2704.033233  -2827.042168  #>         13081         13114         12629         13098         13370  #>   -625.326412  -1935.254532  10879.279743  10274.007098  -3825.909406  #>         12701         13874         13913         12883         13538  #>  -6212.859128  -1856.178673   -526.181014  -2974.314403   1473.880009  #>         12852         13372         12208         13537         13747  #>  -1342.104237   1813.015270     19.243995   2048.749579   4322.007100  #>         13417         13096         13895         13003         13691  #>    440.963545  -4952.334133   2542.997881   2572.226558   4428.828459  #>         12839         13289         13683         13697         12780  #>  -1129.630473   3049.730962  -2081.038869   -990.282901   -730.277245  #>         13405         12334         13236         12245         12438  #>  -5410.001207  -1911.490445  -1144.805569  -3563.705494  -6573.089152  #>         14081         13300         13210         12719         12745  #>   5888.847294   1840.750854  -2545.652912  -1357.936357    271.613655  #>         13214         12770         13862         12812         12663  #>    319.054294   1643.954351  -3639.434680   -515.589733  -1014.782053  #>         12980         12889         12484         13590         13047  #>   2404.946642   1635.641724  -2402.738273   2335.765787   2573.501760  #>         13102         12809         13216         12657         13524  #>   -536.002668   2860.416259  13051.891997     -3.636166  -3443.785622  #>         12873         13981         12601         13542         13644  #>   4434.878049  -7160.678225   1202.131980    589.397037    287.428861  #>         13263         12611         12970         13363         13746  #>  -1461.135258     50.810728  -3615.963524  -2421.371787  -3290.056846  #>         12619         12845         12844         13273         12764  #>   1409.542628  -2326.505084  -1361.780697    203.397955  -3237.308325  #>         24339         24478         24485         24843         24682  #>  -3104.130524  -2843.071824  -4870.019858   3240.689932  -2310.150974  #>         24367         24217         24078         24276         24416  #>  -2611.020120  -1770.956570   6192.416850   2326.749660  -1791.975265  #>         24628         24517         24844         24327         24981  #>  -2195.075258  -4834.966475   3092.423905    898.066045    558.258190  #>         24631         24716         24761         24354         24240  #>   4003.531735   1885.542193   8898.827699   5998.215055  -1979.242161  #>         24647         24757         24231         24899         24398  #>   8505.342201   2778.778476   9484.622544    305.962685  28115.904269  #>         24248         24274         24528         24812         24257  #>  -1466.907236   9974.730607   7227.000281  10731.913987    906.456911  #>         24636         24880         24114         24876         24765  #>  -1173.728346   2829.867921   -322.757715  -7373.226555  -3362.209702  #>         24611         24376         24629         24476         24709  #> -11145.111244  -9848.941864  -3529.749505   1370.554059  -1359.327794  #>         24389         24973         24999         24491         24132  #>   3550.873093  -1597.232211  -5890.482614  -9552.636709  -8985.473287  #>         24686         24352         24034         24625         24130  #>  -2959.178306  -1028.564032   2842.035245  -1915.492869  -3283.513703  #>         24211         24787         24545         24410         24154  #>  -5992.729770  -3784.835031   1826.734318   3668.022059   4430.939182  #>         24298         24856         24346         24074         24355  #>  -3881.915558     71.078222  -5414.445282   5899.442538   5541.670293  #>         24914         24887         24770         24309         24035  #>   3533.973612   1939.921448  -3330.102421  -5477.500744   1249.349718  #>         24305         24987         24282         24639         24449  #>   4165.945472  -3235.389302  -4219.559068  -2326.114085   4719.130999  #>         24548         24432         24041         24764         24758  #>   -850.363660  -2965.516861   -626.200872   -353.551321    379.377007  #>         24726         24382         24780         24379         24081  #>   1456.686010   1699.872537   8181.063574  -4315.545430  -1159.567171  #>         24549         24359         24729         24604         24392  #>   8978.120003   1208.273117   4567.933604  -2912.318913   4064.259338  #>         24453         24662         24277         24236         24455  #>  -1049.566799    688.481855  -1854.669903  -1802.949221   4207.200075  #>         24505         24529         24118         24017         24417  #>  -7848.057216 -13669.346627    944.492097   4571.110898  -1470.467362  #>         24730         24396         24247         24296         24384  #>   -252.255675   1437.537037  -3905.998559   -761.050730  -4173.899808  sigma(model1) #> [1] 5684.27"},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"function enables use Mixed Effects Random Forests (MERFs) applications Small Area Estimation (SAE). Unit-level survey data target auxiliary covariates required produce reliable estimates various disaggregated economic inequality indicators. Option meanOnly saves computational time users interested estimation domain-specific means using unit-level aggregated auxiliary data. Predefined indicators include mean, median, quantiles (10%, 25%, 75% 90%), head count ratio, poverty gap, Gini-coefficient quintile share ratio. MERF algorithm algorithmic procedure reminiscent EM-algorithm (see Details). Overall, function serves coherent framework estimation point estimates requested uncertainty estimates indicators. Methodological details found Krennmair & Schmid (2022) Krennmair et al. (2022b). following examples showcase potential applications.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"","code":"SAEforest_model(   Y,   X,   dName,   smp_data,   pop_data,   MSE = \"none\",   meanOnly = TRUE,   aggData = FALSE,   smearing = TRUE,   popnsize = NULL,   importance = \"impurity\",   OOsample_obs = 25,   ADDsamp_obs = 0,   w_min = 3,   B = 100,   B_adj = 100,   B_MC = 100,   threshold = NULL,   custom_indicator = NULL,   initialRandomEffects = 0,   ErrorTolerance = 1e-04,   MaxIterations = 25,   na.rm = TRUE,   ... )"},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"Y Continuous input value target variable. X Matrix data.frame predictive covariates. dName Character specifying name domain identifier, random intercepts modeled. smp_data data.frame survey sample data including specified elements Y X. pop_data data.frame unit-level population covariate data X. Please note column names predictive covariates must match column names smp_data. holds especially name domain identifier. MSE Character input specifying type uncertainty estimates. Available options : () \"none\" point estimates requested, (ii) \"nonparametric\" following MSE bootstrap procedure proposed Krennmair & Schmid (2022) Krennmair et al. (2022a) aggData = TRUE. (iii) \"wild\" nonlinear indicators proposed Krennmair et al. (2022b). Defaults \"none\". meanOnly Logical. Calculating domain-level means . Defaults TRUE. aggData Logical input indicating whether aggregated covariate information unit-level covariate information used domain-level means. Defaults FALSE, assuming unit-level covariate data. smearing Logical input indicating whether smearing based approach Monte Carlo (MC) version point estimates obtained estimate (nonlinear) indicators. MC used computational constraints prohibit smearing approach. theoretical details see Krennmair et al (2022b). Defaults TRUE. popnsize data.frame, comprising information population size domains. needed aggData = TRUE MSE requested. Please note name domain identifier must match column name smp_data. importance Variable importance mode processed random forest ranger. Must 'none', 'impurity', 'impurity_corrected' 'permutation'. concept variable importance needed production generic plots plot. estimation domain-level means aggregated covariate  data, variable importance needed rank information process finding suitable calibration weights (Krennmair et al., 2022b). information regarding measures importance see ranger. OOsample_obs Number --sample observations taken closest area potentially unsampled areas. needed aggData = TRUE defaults 25. ADDsamp_obs Number --sample observations taken closest area first iteration calculation calibration weights fails. needed aggData = TRUE defaults 0. w_min Minimal number covariates informative weights calculated. needed aggData = TRUE. Defaults 3. B Number bootstrap replications MSE estimation procedures. Defaults 100. B_adj Number bootstrap replications adjustment residual variance proposed Mendez Lohr (2001). Defaults 100. B_MC Number bootstrap populations MC version point estimates (nonlinear) indicators. Defaults 100. threshold Set custom threshold indicators, head count ratio. threshold can known numeric value function Y. threshold NULL, 60 % median Y taken threshold. Defaults NULL. custom_indicator list additional functions containing indicators calculated. functions must depend target variable Y optionally threshold. Defaults NULL. initialRandomEffects Numeric value vector initial estimates random effects. Defaults 0. ErrorTolerance Numeric value monitor MERF algorithm's convergence. Defaults 1e-04. MaxIterations Numeric value specifying maximal amount iterations MERF algorithm. Defaults 25. na.rm Logical. Whether missing values removed. Defaults TRUE. ... Additional parameters directly passed random forest ranger. important parameters instance mtry (number variables possibly split node), num.trees (number trees). details possible parameters see ranger example .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"object class SAEforest includes point estimates disaggregated indicators well information MERF-model. Optionally corresponding MSE estimates returned. Several generic functions methods returned object class SAEforest. full list explanation components possibilities objects class SAEforest, see SAEforestObject.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"MERFs combine advantages regression forests (implicit model-selection robustness properties) ability model hierarchical dependencies. MERF algorithm iteratively optimizes two separate steps: ) random forest function, assuming random effects term correct b) estimates random effects part, assuming OOB-predictions forest correct. Overall convergence algorithm monitored log-likelihood joint model components. details see Krennmair Schmid (2022). Users interested estimation domain-level means set meanOnly = TRUE. MERF requires covariate micro-data. function, however also allows use aggregated covariate information, setting aggData = TRUE. Aggregated covariate information adaptively incorporated calibration-weights based empirical likelihood estimation area-level means. See methodological details Krennmair et al. (2022a) estimation (nonlinear) poverty indicators /quantiles, need information area-specific cumulative distribution function (CDF) Y. Krennmair et al. (2022b) propose smearing approach originated Duan (1983). Alternatively, Monte-Carlo methods used simulate domain-specific CDF Y. estimation MSE, bootstrap population built based bias-corrected residual variance discussed Krennmair Schmid (2022). bootstrap bias correction follows Mendez Lohr (2011). Note MERFmodel object composition elements random forest class ranger random effects model class merMod. Thus, generic functions applicable corresponding objects. details generic functions see ranger lmer well examples .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"Duan, N. (1983). Smearing Estimate: Nonparametric Retransformation Method. Journal American Statistical Association, 78(383), 605–610. Krennmair, P., & Schmid, T. (2022). Flexible Domain Prediction Using Mixed Effects Random Forests. Journal Royal Statistical Society: Series C (Applied Statistics) (forthcoming). Krennmair, P., & Würz, N. & Schmid, T. (2022a). Analysing Opportunity Cost Care Work using Mixed Effects Random Forests Aggregated Census Data. Krennmair, P., & Schmid, T & Tzavidis, Nikos. (2022b). Estimation Poverty Indicators Using Mixed Effects Random Forests. Working Paper. Mendez, G., & Lohr, S. (2011). Estimating residual variance random forest regression. Computational Statistics & Data Analysis, 55 (11), 2937–2950.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[,-c(1, 16, 17, 18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_pop)  # SAEforest generics: summary(model1) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                        500 #> Number of independent variables:         14 #> Mtry:                                     3 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                     0.62041 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39227.0  39238.2 -19611.5  39223.0     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -2.8818 -0.5264 -0.0603  0.4352 11.8525  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept) 12594647 3549     #>  Residual             30763621 5546     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.2904785  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 10 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                                                       #>  0 -19523.2 -19568.4 -19592.05 -19602.64 -19589.11 -19598.88 -19611.78 #>                                #>  -19603.29 -19612.73 -19611.52  # Example 2: # Calculating point + MSE estimates for aggregated covariate data and passing # arguments to the random forest. # Note that B is unrealistically low to improve example speed  # remove factor for gender X_covar <- X_covar[,-1] model2 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_popAgg,                           MSE = \"nonparametric\", popnsize = popNsize,B = 5, mtry = 5,                           num.trees = 100, aggData = TRUE) #> Calculation of weights failed for area: Eisenstadt (Stadt) #> Calculation of weights failed for area: Melk #> Calculation of weights failed for area: Rust (Stadt) #> Calculation of weights failed for area: Schärding #> Calculation of weights failed for area: Villach (Stadt) #> Calculation of weights failed for area: Wels (Stadt) #> Calculation of weights failed for area: Wiener Neustadt (Stadt) #> Error SD Bootstrap started: #> Bootstrap with 5 rounds started  # SAEforest generics: summary(model2) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_popAgg, MSE = \"nonparametric\",  #>     aggData = TRUE, popnsize = popNsize, B = 5, mtry = 5, num.trees = 100) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #>  #>                Min. 1st Qu. Median     Mean 3rd Qu. Max. #> Sample_domains   14      17   22.5 27.78571      29  200 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                        100 #> Number of independent variables:         13 #> Mtry:                                     5 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                     0.65608 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39129.4  39140.5 -19562.7  39125.4     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -4.2203 -0.5099 -0.0409  0.4155 12.1010  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept)  8447011 2906     #>  Residual             29595632 5440     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.2220406  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 5 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                                    #>  0 -19527.9 -19525.41 -19536.88 -19563.47 -19562.69 summarize_indicators(model2, MSE = TRUE, CV = TRUE) #> Warning: For objects of class SAEforest_mean or SAEforest_meanAGG, only results for the Indicator \"Mean\" are reported #> Indicator/s: Mean #>                         district      Mean   Mean_MSE    Mean_CV #> 1                      Amstetten 14153.288   463578.7 0.04810657 #> 2                          Baden 21805.591   258126.3 0.02329959 #> 3                        Bludenz 11906.394   661733.0 0.06832209 #> 4                 Braunau am Inn 12814.693   816657.9 0.07051993 #> 5                        Bregenz 33698.995  7223356.8 0.07975402 #> 6            Bruck an der Leitha 22991.716  1735551.5 0.05729904 #> 7             Bruck-Mürzzuschlag 24860.350   957270.5 0.03935592 #> 8               Deutschlandsberg 23785.282  1983429.9 0.05921069 #> 9                       Dornbirn 19164.019   532192.7 0.03806693 #> 10                      Eferding 13659.162 16769909.7 0.29980668 #> 11            Eisenstadt (Stadt) 29608.069  4430198.2 0.07108885 #> 12           Eisenstadt-Umgebung 23110.247 22973516.3 0.20740019 #> 13                     Feldkirch 17657.821   529488.0 0.04120889 #> 14                   Feldkirchen 14376.373 17567118.9 0.29154187 #> 15                     Freistadt 16922.241  3215447.4 0.10596510 #> 16                       Gmunden 19030.034   281146.9 0.02786295 #> 17                         Gmünd 13552.186  1714141.5 0.09660820 #> 18                  Graz (Stadt) 17916.416   134545.6 0.02047310 #> 19                 Graz-Umgebung 35416.931  1041875.4 0.02882020 #> 20                  Grieskirchen 15629.886  2948423.4 0.10985988 #> 21                   Gänserndorf 20185.350   533606.4 0.03618881 #> 22                       Güssing 18275.257  4475267.2 0.11575666 #> 23                       Hallein 17269.699  2394250.5 0.08959835 #> 24          Hartberg-Fürstenfeld 12239.296  3876452.7 0.16086473 #> 25                      Hermagor 12367.253 21536978.3 0.37524866 #> 26                    Hollabrunn 16252.265  1732016.0 0.08097707 #> 27                          Horn 13700.019 11418631.0 0.24665269 #> 28                          Imst 14210.966  1719744.1 0.09228015 #> 29              Innsbruck (Land) 26959.000  1309937.9 0.04245429 #> 30             Innsbruck (Stadt) 17488.166   149167.6 0.02208478 #> 31                   Jennersdorf 12415.503 10654836.0 0.26291120 #> 32        Kirchdorf an der Krems 16191.971  1415948.1 0.07348927 #> 33                     Kitzbühel 13930.121  2031444.6 0.10231696 #> 34             Klagenfurt (Land) 21673.606  1087431.3 0.04811381 #> 35            Klagenfurt (Stadt) 33054.259  2596825.1 0.04875217 #> 36                    Korneuburg 25865.681  2412093.0 0.06004448 #> 37                  Krems (Land) 15075.867  5135499.1 0.15031733 #> 38    Krems an der Donau (Stadt) 18601.421 39296497.3 0.33700070 #> 39                      Kufstein 19728.278  1000276.4 0.05069566 #> 40                       Landeck 13182.990  2958269.2 0.13046828 #> 41                      Leibnitz 15395.573   959281.0 0.06361757 #> 42                        Leoben 19045.793   369061.0 0.03189701 #> 43                         Lienz 11400.154   430833.0 0.05757630 #> 44                        Liezen 12286.255  1178838.2 0.08837055 #> 45                    Lilienfeld 13301.533  5049607.9 0.16893792 #> 46                  Linz (Stadt) 22363.154   143861.5 0.01696052 #> 47                     Linz-Land 26754.773   405713.1 0.02380719 #> 48                   Mattersburg 20595.336  2621891.9 0.07862099 #> 49                          Melk 12967.553   442660.8 0.05130710 #> 50                    Mistelbach 20115.887   980697.1 0.04922982 #> 51                         Murau 12069.161  4185325.9 0.16950698 #> 52                        Murtal 19179.026  2566777.3 0.08353482 #> 53                       Mödling 41399.246   862865.7 0.02243774 #> 54                   Neunkirchen 15352.054   639222.5 0.05207863 #> 55               Neusiedl am See 18634.918   617594.0 0.04217199 #> 56                Oberpullendorf 17351.933  3245501.0 0.10382286 #> 57                      Oberwart 12253.589   726793.0 0.06957321 #> 58                          Perg 19173.632  1103029.0 0.05477584 #> 59                        Reutte 18675.541   860577.7 0.04967317 #> 60              Ried im Innkreis 13945.013  1644464.9 0.09195882 #> 61                      Rohrbach 13005.926   491439.6 0.05390062 #> 62                  Rust (Stadt) 16300.101  9924437.5 0.19326921 #> 63              Salzburg (Stadt) 20327.806   441754.4 0.03269640 #> 64             Salzburg-Umgebung 29103.602   744519.6 0.02964772 #> 65        Sankt Johann im Pongau 13034.444  2496730.3 0.12122531 #> 66           Sankt Pölten (Land) 17109.056   671323.8 0.04788947 #> 67          Sankt Pölten (Stadt) 17168.734  2646274.6 0.09474999 #> 68        Sankt Veit an der Glan 14887.620  1795806.5 0.09001284 #> 69                      Scheibbs 13424.130  6465492.4 0.18941513 #> 70                        Schwaz 15286.422   601985.3 0.05075596 #> 71                     Schärding 11162.269   651040.9 0.07228558 #> 72           Spittal an der Drau 13134.610   342666.7 0.04456755 #> 73                 Steyr (Stadt) 20295.137 14397523.4 0.18696138 #> 74                    Steyr-Land 25253.106  1217257.0 0.04368942 #> 75              Südoststeiermark 13817.204  3315731.0 0.13178606 #> 76                       Tamsweg 16833.388  5053906.2 0.13354943 #> 77                         Tulln 20998.002   548202.3 0.03526082 #> 78               Urfahr-Umgebung 38841.147  5403933.1 0.05984983 #> 79               Villach (Stadt) 22231.548  2169073.6 0.06624719 #> 80                  Villach Land 18928.555 12697732.6 0.18825461 #> 81                     Voitsberg 17167.095  2106566.1 0.08454555 #> 82                   Vöcklabruck 18208.977   423629.3 0.03574435 #> 83                   Völkermarkt 15316.629  2555153.3 0.10436270 #> 84        Waidhofen an der Thaya 12053.663  8201998.8 0.23759693 #> 85 Waidhofen an der Ybbs (Stadt) 17320.124  2545560.2 0.09211719 #> 86                          Weiz 15266.080   845748.2 0.06024111 #> 87                  Wels (Stadt) 13816.455  1042290.7 0.07389207 #> 88                     Wels-Land 23763.911 13028530.1 0.15189021 #> 89                          Wien 20702.800   467770.1 0.03303598 #> 90        Wiener Neustadt (Land) 20646.361   667884.6 0.03958286 #> 91       Wiener Neustadt (Stadt) 15107.090  3782888.0 0.12874516 #> 92                     Wolfsberg 16842.447  2956297.5 0.10208663 #> 93                   Zell am See  9930.149   936655.1 0.09746172 #> 94                        Zwettl 11753.982 17188541.9 0.35272360  # Example 3: # Calculating point + MSE estimates and passing arguments to the forest. # Two additional custom indicators and the threshold is defined as a custom function of Y. # Note that B is unrealistically low to improve example speed.  model3 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\", smp_data = eusilcA_smp,                           pop_data = eusilcA_pop, meanOnly = FALSE, MSE = \"nonparametric\",                           B = 5, mtry = 5, num.trees = 100, threshold = function(Y){0.5 *                           median(Y)}, custom_indicator = list(my_max = function(Y,                           threshold){max(Y)}, mean40 = function(Y, threshold){                           mean(Y[Y<=quantile(Y,0.4)])}), smearing = FALSE) #> Error SD Bootstrap started: #> MSE Bootstrap with 5 rounds started:  # SAEforest generics: summary(model3) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop, MSE = \"nonparametric\",  #>     meanOnly = FALSE, smearing = FALSE, B = 5, threshold = function(Y) { #>         0.5 * median(Y) #>     }, custom_indicator = list(my_max = function(Y, threshold) { #>         max(Y) #>     }, mean40 = function(Y, threshold) { #>         mean(Y[Y <= quantile(Y, 0.4)]) #>     }), mtry = 5, num.trees = 100) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                        100 #> Number of independent variables:         13 #> Mtry:                                     5 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                     0.66844 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39083.5  39094.6 -19539.7  39079.5     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -4.0682 -0.5170 -0.0513  0.4268 12.1747  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept)  7689148 2773     #>  Residual             28970242 5382     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.2097457  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 4 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                           #>  0 -19519.14 -19541.96 -19537.78 -19539.73 summarize_indicators(model3, MSE = FALSE, CV = TRUE, indicator = c(\"Gini\", \"my_max\", \"mean40\")) #> Indicator/s: Gini #>  Indicator/s: my_max #>  Indicator/s: mean40 #>                         district      Gini    Gini_CV    my_max my_max_CV #> 1                      Amstetten 0.2496166 0.06139391  53367.94 0.5124650 #> 2                          Baden 0.1821222 0.07004379  69365.94 0.3929977 #> 3                        Bludenz 0.2836343 0.10597374  45119.26 0.2913200 #> 4                 Braunau am Inn 0.2769782 0.07798593  53789.77 0.5638769 #> 5                        Bregenz 0.1623321 0.07778439  82887.97 0.1120534 #> 6            Bruck an der Leitha 0.1786187 0.07669723  69086.14 0.1365179 #> 7             Bruck-Mürzzuschlag 0.1668700 0.09485270  71669.91 0.2235948 #> 8               Deutschlandsberg 0.1897958 0.08023022  57235.93 0.1824685 #> 9                       Dornbirn 0.2181016 0.06908320  56893.75 0.3678049 #> 10                      Eferding 0.2345167 0.18489711  42421.92 0.6557794 #> 11            Eisenstadt (Stadt) 0.1910494 0.17611874  68312.35 0.1181623 #> 12           Eisenstadt-Umgebung 0.2009430 0.12954595  58555.45 0.1984942 #> 13                     Feldkirch 0.2317475 0.10229294  59428.59 0.3881409 #> 14                   Feldkirchen 0.2446526 0.18556621  40754.56 0.2536565 #> 15                     Freistadt 0.2154424 0.12854458  53101.29 0.4965489 #> 16                       Gmunden 0.1999884 0.09455086  61906.52 0.2955842 #> 17                         Gmünd 0.2561330 0.29310131  39789.79 0.5867452 #> 18                  Graz (Stadt) 0.2176966 0.06736820  76946.33 0.1984235 #> 19                 Graz-Umgebung 0.1861077 0.16841540  95132.01 0.2606042 #> 20                  Grieskirchen 0.2167425 0.10161904  52493.09 0.2587489 #> 21                   Gänserndorf 0.1995323 0.10132979  61202.70 0.4011403 #> 22                       Güssing 0.2331344 0.08623459  42441.73 0.3973735 #> 23                       Hallein 0.2258108 0.12961906  51111.93 0.3519029 #> 24          Hartberg-Fürstenfeld 0.2645503 0.07211716  55098.67 0.3520621 #> 25                      Hermagor 0.2523298 0.16283129  33864.60 0.7615479 #> 26                    Hollabrunn 0.2223246 0.11138456  48751.66 0.4628220 #> 27                          Horn 0.2338976 0.19230341  43554.09 0.3160812 #> 28                          Imst 0.2377699 0.08142345  46086.11 0.2619329 #> 29              Innsbruck (Land) 0.2040890 0.08602366  77048.75 0.1486210 #> 30             Innsbruck (Stadt) 0.2065810 0.10692276  60773.36 0.4932663 #> 31                   Jennersdorf 0.2494483 0.17889506  34599.53 0.1609961 #> 32        Kirchdorf an der Krems 0.2325506 0.09950261  50549.39 0.5055384 #> 33                     Kitzbühel 0.2505483 0.11280844  45226.13 0.4784815 #> 34             Klagenfurt (Land) 0.1825540 0.08386088  57705.76 0.3781472 #> 35            Klagenfurt (Stadt) 0.1639245 0.06938104  81294.83 0.3479100 #> 36                    Korneuburg 0.1603203 0.08917155  63771.42 0.3168946 #> 37                  Krems (Land) 0.2391255 0.08436111  50278.43 0.2209006 #> 38    Krems an der Donau (Stadt) 0.2199381 0.11800657  40318.15 0.3457054 #> 39                      Kufstein 0.1847680 0.07407301  58083.20 0.2491800 #> 40                       Landeck 0.2615573 0.07132085  38413.82 0.7690219 #> 41                      Leibnitz 0.2315831 0.11104392  53370.41 0.4808914 #> 42                        Leoben 0.1927015 0.12717968  58604.30 0.2134696 #> 43                         Lienz 0.2608947 0.12025133  45782.32 0.4455413 #> 44                        Liezen 0.2734132 0.13385868  53213.01 0.4873165 #> 45                    Lilienfeld 0.2443897 0.19718093  42680.27 0.7047444 #> 46                  Linz (Stadt) 0.1866490 0.07613662  76815.99 0.1997204 #> 47                     Linz-Land 0.1685493 0.04476869  77998.89 0.2628937 #> 48                   Mattersburg 0.2068680 0.18340054  52645.18 0.2048766 #> 49                          Melk 0.2735880 0.08773104  48230.46 0.2642358 #> 50                    Mistelbach 0.2036992 0.12599481  60321.48 0.1358387 #> 51                         Murau 0.2529370 0.14983048  35311.93 0.3188117 #> 52                        Murtal 0.2150873 0.07773061  53926.56 0.4617912 #> 53                       Mödling 0.1496726 0.19444333  87746.94 0.1476431 #> 54                   Neunkirchen 0.2167925 0.13399309  56766.39 0.3887731 #> 55               Neusiedl am See 0.2056638 0.09013821  54394.24 0.2373192 #> 56                Oberpullendorf 0.2331675 0.21982944  46670.48 0.5692763 #> 57                      Oberwart 0.2583104 0.14040406  47608.62 0.5629113 #> 58                          Perg 0.2127375 0.09274623  53158.31 0.1649124 #> 59                        Reutte 0.1984683 0.10557539  43351.78 0.2284484 #> 60              Ried im Innkreis 0.2474063 0.12518031  50045.91 0.3044791 #> 61                      Rohrbach 0.2188741 0.12589123  48102.63 0.2523869 #> 62                  Rust (Stadt) 0.2697352 0.18642302  23357.17 0.1908323 #> 63              Salzburg (Stadt) 0.1932685 0.07948163  68674.85 0.1591554 #> 64             Salzburg-Umgebung 0.1679929 0.09598427  89310.34 0.1694144 #> 65        Sankt Johann im Pongau 0.2453427 0.09941047  53633.28 0.2670028 #> 66           Sankt Pölten (Land) 0.2298954 0.08762768  62305.47 0.2294852 #> 67          Sankt Pölten (Stadt) 0.2221361 0.16899913  49775.06 0.5028214 #> 68        Sankt Veit an der Glan 0.2455244 0.10072608  51492.05 0.3967974 #> 69                      Scheibbs 0.2480215 0.19712089  42353.38 0.3760305 #> 70                        Schwaz 0.2298244 0.15086416  52413.72 0.2150530 #> 71                     Schärding 0.3029931 0.08659790  43510.19 0.3755736 #> 72           Spittal an der Drau 0.2589875 0.07263732  58545.46 0.2843762 #> 73                 Steyr (Stadt) 0.2144196 0.28573383  47224.17 0.5252292 #> 74                    Steyr-Land 0.1730117 0.09023882  57873.40 0.4890363 #> 75              Südoststeiermark 0.2509470 0.06872722  55264.52 0.4612891 #> 76                       Tamsweg 0.2162900 0.10130196  40879.56 0.1156401 #> 77                         Tulln 0.2054317 0.08278396  61652.68 0.1982365 #> 78               Urfahr-Umgebung 0.1443740 0.15581748  89357.50 0.1001912 #> 79               Villach (Stadt) 0.1941162 0.11158736  60944.94 0.1558012 #> 80                  Villach Land 0.2069803 0.07776880  56018.43 0.2372981 #> 81                     Voitsberg 0.2100369 0.12259307  48686.29 0.5232139 #> 82                   Vöcklabruck 0.2111293 0.05842563  63596.83 0.2556668 #> 83                   Völkermarkt 0.2349521 0.10301081  47016.00 0.2725515 #> 84        Waidhofen an der Thaya 0.2660027 0.15929675  35849.69 0.1811430 #> 85 Waidhofen an der Ybbs (Stadt) 0.2109265 0.26315102  35962.63 0.1605012 #> 86                          Weiz 0.2452848 0.08436544  51603.52 0.3177342 #> 87                  Wels (Stadt) 0.2408120 0.09499697  47470.60 0.2739218 #> 88                     Wels-Land 0.2001741 0.08472676  59415.56 0.2160322 #> 89                          Wien 0.2447866 0.05381822 109676.70 0.2103532 #> 90        Wiener Neustadt (Land) 0.2057335 0.09337493  57415.41 0.2618388 #> 91       Wiener Neustadt (Stadt) 0.2105591 0.09349449  45909.63 0.2722959 #> 92                     Wolfsberg 0.2332638 0.09679308  50785.10 0.2186416 #> 93                   Zell am See 0.2933377 0.02306185  45910.49 0.3219887 #> 94                        Zwettl 0.2677241 0.11152893  45474.82 0.5364367 #>       mean40  mean40_CV #> 1   8104.170 0.02902325 #> 2  15735.431 0.02839009 #> 3   6234.411 0.22953106 #> 4   6253.489 0.25399596 #> 5  23840.219 0.03849579 #> 6  16660.491 0.03372998 #> 7  17345.005 0.09502401 #> 8  14506.407 0.11582412 #> 9  12450.326 0.09412046 #> 10  9565.550 0.35804410 #> 11 27297.832 0.30017683 #> 12 17758.733 0.20886305 #> 13 10075.268 0.13719385 #> 14  8402.480 0.27306219 #> 15 10754.675 0.10974376 #> 16 13368.639 0.04987205 #> 17  7485.412 0.85402883 #> 18 11365.140 0.05354266 #> 19 24264.907 0.05996671 #> 20 10584.374 0.08537967 #> 21 13424.339 0.10829529 #> 22 10275.955 0.14684277 #> 23 10024.918 0.10733773 #> 24  7309.488 0.15066485 #> 25  7087.851 0.31167004 #> 26 10231.910 0.09760702 #> 27  9405.537 0.44537825 #> 28  8610.950 0.15825954 #> 29 17869.057 0.05511827 #> 30 11623.388 0.07832363 #> 31  7667.007 0.23136868 #> 32 10030.946 0.12467688 #> 33  7138.563 0.10963907 #> 34 15789.840 0.09034039 #> 35 24134.944 0.05707198 #> 36 20230.548 0.06131129 #> 37  9220.980 0.12094249 #> 38 10874.673 0.11124036 #> 39 14157.177 0.05572605 #> 40  6690.407 0.22772454 #> 41  9564.511 0.08729996 #> 42 13783.134 0.10627174 #> 43  7211.216 0.14491196 #> 44  6485.282 0.23510147 #> 45  8939.741 0.48175894 #> 46 15460.731 0.06819121 #> 47 19818.833 0.03775992 #> 48 14359.113 0.36398719 #> 49  6209.175 0.11881243 #> 50 13183.924 0.07627689 #> 51  7260.136 0.21362813 #> 52 12128.811 0.12253665 #> 53 30477.641 0.04364185 #> 54 10333.526 0.14205719 #> 55 12630.609 0.06372049 #> 56 10385.815 0.41585492 #> 57  7387.320 0.22284874 #> 58 11466.888 0.14186941 #> 59 12948.996 0.13908392 #> 60  8129.388 0.25564883 #> 61  9546.130 0.12819871 #> 62  6752.316 0.21863140 #> 63 13423.428 0.05639137 #> 64 22100.403 0.04523701 #> 65  8542.659 0.13930779 #> 66 10368.832 0.06807740 #> 67 10210.859 0.17509699 #> 68  8725.549 0.13554502 #> 69  7794.362 0.21527478 #> 70  9618.193 0.09631738 #> 71  4738.325 0.29389391 #> 72  7703.324 0.09920418 #> 73 12093.106 0.43165920 #> 74 17657.622 0.09946456 #> 75  7923.985 0.21775466 #> 76 10633.185 0.12228878 #> 77 13220.184 0.07271324 #> 78 32063.473 0.05584124 #> 79 15122.046 0.09816730 #> 80 12793.717 0.04483305 #> 81 11390.310 0.15038505 #> 82 11800.726 0.06066700 #> 83  9235.364 0.13208011 #> 84  6855.515 0.33219771 #> 85 11547.659 0.45972960 #> 86  8482.244 0.08870874 #> 87  8464.953 0.09782143 #> 88 13509.826 0.08020484 #> 89 12093.349 0.02981109 #> 90 12484.619 0.08173127 #> 91 11126.650 0.11644553 #> 92 10536.540 0.09727307 #> 93  4909.782 0.13866430 #> 94  7230.085 0.23743497 # }"},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_pop.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated EU-SILC data - population data — eusilcA_pop","title":"Simulated EU-SILC data - population data — eusilcA_pop","text":"data set includes synthetic EU-SILC data taken package emdi. Originally, data builds eusilcP package simFrame reduced 17 variables containing regional variables states districts.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated EU-SILC data - population data — eusilcA_pop","text":"","code":"eusilcA_pop"},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_pop.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated EU-SILC data - population data — eusilcA_pop","text":"data frame 25000 observations 17 variables: eqIncome numeric; simplified version equivalized household income. eqsize numeric; equivalized household size according modified OECD scale. gender factor; person's gender (levels: male female). cash numeric; employee cash near cash income (net). self_empl numeric; cash benefits losses self-employment (net). unempl_ben numeric; unemployment benefits (net). age_ben numeric; old-age benefits (net). surv_ben numeric; survivor's benefits (net). sick_ben numeric; sickness benefits (net). dis_ben numeric; disability benefits (net). rent numeric; income rental property land (net). fam_allow numeric; family/children related allowances (net). house_allow numeric; housing allowances (net). cap_inv numeric; interest, dividends, profit capital investments  unincorporated business (net). tax_adj numeric; repayments/receipts tax adjustment (net). state factor; state (nine levels). district factor; districts (94 levels).","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_popAgg.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated EU-SILC data - aggregated population data — eusilcA_popAgg","title":"Simulated EU-SILC data - aggregated population data — eusilcA_popAgg","text":"data set includes synthetic EU-SILC data taken package emdi. Originally, data builds eusilcP package simFrame reduced 15 variables including district identifiers well aggregated household level covariates. Therefore, except variables ratio_n district, variables mean values per district.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_popAgg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated EU-SILC data - aggregated population data — eusilcA_popAgg","text":"","code":"eusilcA_popAgg"},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_popAgg.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated EU-SILC data - aggregated population data — eusilcA_popAgg","text":"data frame 94 observations 15 variables: eqsize numeric; equivalized household size according modified OECD scale. cash numeric; employee cash near cash income (net). self_empl numeric; cash benefits losses self-employment (net). unempl_ben numeric; unemployment benefits (net). age_ben numeric; old-age benefits (net). surv_ben numeric; survivor's benefits (net). sick_ben numeric; sickness benefits (net). dis_ben numeric; disability benefits (net). rent numeric; income rental property land (net). fam_allow numeric; family/children related allowances (net). house_allow numeric; housing allowances (net). cap_inv numeric; interest, dividends, profit capital investments  unincorporated business (net). tax_adj numeric; repayments/receipts tax adjustment (net). ratio_n numeric; ratios population size per area total population size. district factor; Austrian districts (94 levels).","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_smp.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated EU-SILC data - survey sample data — eusilcA_smp","title":"Simulated EU-SILC data - survey sample data — eusilcA_smp","text":"data set includes synthetic EU-SILC data taken package emdi. Originally, data builds eusilcP package simFrame reduced 18 variables containing regional variables states districts.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_smp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated EU-SILC data - survey sample data — eusilcA_smp","text":"","code":"eusilcA_smp"},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_smp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated EU-SILC data - survey sample data — eusilcA_smp","text":"data frame 1945 observations 18 variables: eqIncome numeric; simplified version equivalized household income. eqsize numeric; equivalized household size according modified OECD scale. gender factor; person's gender (levels: male female). cash numeric; employee cash near cash income (net). self_empl numeric; cash benefits losses self-employment (net). unempl_ben numeric; unemployment benefits (net). age_ben numeric; old-age benefits (net). surv_ben numeric; survivor's benefits (net). sick_ben numeric; sickness benefits (net). dis_ben numeric; disability benefits (net). rent numeric; income rental property land (net). fam_allow numeric; family/children related allowances (net). house_allow numeric; housing allowances (net). cap_inv numeric; interest, dividends, profit capital investments  unincorporated business (net). tax_adj numeric; repayments/receipts tax adjustment (net). state factor; state (nine levels). district factor; districts (94 levels). weight numeric; constant weight.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/load_shapeaustria.html","id":null,"dir":"Reference","previous_headings":"","what":"Loading the shape file for Austrian districts — load_shapeaustria","title":"Loading the shape file for Austrian districts — load_shapeaustria","text":"function simplifies loading shape file Austrian districts. originally used examples package emdi.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/load_shapeaustria.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loading the shape file for Austrian districts — load_shapeaustria","text":"","code":"load_shapeaustria()"},{"path":"https://krennpa.github.io/SAEforest/reference/load_shapeaustria.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loading the shape file for Austrian districts — load_shapeaustria","text":"shape file class SpatialPolygonsDataFrame.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/load_shapeaustria.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Loading the shape file for Austrian districts — load_shapeaustria","text":"shape file contains borders 94 Austrian districts. main purpose function visualization estimation results plotting function map_indicators.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualizes disaggregated estimates on a map — map_indicators","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"Function map_indicators visualizes estimates SAEforestObject specified map. function can seen modified wrapper map_plot package emdi.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"","code":"map_indicators(   object,   indicator = \"all\",   MSE = FALSE,   CV = FALSE,   map_obj = NULL,   map_dom_id = NULL,   map_tab = NULL,   color = c(\"white\", \"darkgreen\"),   scale_points = NULL,   guide = \"colourbar\",   return_data = FALSE,   return_plot = FALSE,   gg_theme = theme_minimal() )"},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"object object class SAEforest, containing estimates visualized. indicator Optional character vector specifying indicators mapped: () calculated indicators (\"\"); (ii) default indicators name: \"Mean\", \"Quant10\", \"Quant25\", \"Median\", \"Quant75\", \"Quant90\", \"Gini\", \"Hcr\", \"Pgap\", \"Qsr\" function name/s \"custom_indicator/s\"; (iii) vector names indicators. object estimated option meanOnly = TRUE, indicator arguments ignored \"Mean\" visualized. MSE Logical. TRUE, MSE also visualized. Defaults FALSE. CV Logical. TRUE, CV also visualized. Defaults FALSE. map_obj SpatialPolygonsDataFrame object defined sp package data visualized. map_dom_id Character string containing name variable map_obj indicates domains. map_tab data.frame object two columns matches domain variable population data set (first column) domain variable map_obj (second column). used domain-level identifiers different objects. color vector length 2 defining lowest highest color map. scale_points structure defining lowest, mid highest value colorscale. numeric vector length two given, scale used every plot. Alternatively, list defining colors plot separately may given. guide Character passed scale_colour_gradient ggplot2. Possible values \"none\", \"colourbar\", \"legend\". return_data set TRUE, fortified data frame including map data well chosen indicators returned. Customized maps can easily obtained data frame via package ggplot2. Defaults FALSE. return_plot set TRUE, list individual plots produced ggplot2 returned individual customization processing. gg_theme Specify predefined theme ggplot2. Defaults theme_minimal.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"Creates required plots selected, fortified data.frame list plots.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_pop,                           num.trees = 50)  # Load shape file load_shapeaustria()  # Create map plot for mean indicator - point and MSE estimates but no CV  map_indicators(object = model1, MSE = FALSE, CV = FALSE, map_obj = shape_austria_dis,                indicator = c(\"Mean\"), map_dom_id = \"PB\") #> Warning: For objects of class SAEforest_mean or SAEforest_meanAGG, only results for the Indicator \"Mean\" are reported   # Create a suitable mapping table to use numerical identifiers of the shape # file  # First find the right order dom_ord <- match(shape_austria_dis@data$PB, model1$Indicators$district)  # Create the mapping table based on the order obtained above map_tab <- data.frame(pop_data_id = model1$Indicators$district[dom_ord],                       shape_id = shape_austria_dis@data$BKZ)  # Create map plot for mean indicator - using the numerical domain # identifiers of the shape file. Additionally save the figure in as a list element.  map_obj <- map_indicators(object = model1, MSE = FALSE, CV = FALSE,                           map_obj = shape_austria_dis, indicator = c(\"Mean\"),                           map_dom_id = \"BKZ\", map_tab = map_tab, return_plot = TRUE) #> Warning: For objects of class SAEforest_mean or SAEforest_meanAGG, only results for the Indicator \"Mean\" are reported  # }"},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for a 'SAEforest' object — plot.SAEforest","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"Plots model-specific characteristics fixed effects random forest component MERF SAEforestObject. variable importance plot produced visualize importance individual covariates predictive performance model. variable importance plot, arguments passed internally function vip. requested, plot function additionally provides partial dependence plot (pdp) visualize impact given number influential covariates target variable. pdp plot produced using partial package pdp. plot-engine plots ggplot2.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"","code":"# S3 method for SAEforest plot(   x,   num_features = 6,   col = \"darkgreen\",   fill = \"darkgreen\",   alpha = 0.8,   include_type = TRUE,   horizontal = TRUE,   gg_theme = theme_minimal(),   lsize = 1.5,   lty = \"solid\",   grid_row = 2,   out_list = FALSE,   pdp_plot = TRUE,   ... )"},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"x object class SAEforest including random forest model class ranger. num_features Number features partial dependence plot required. col Parameter specifying color selected plots. argument must specified can processed aes. Defaults character name color \"darkgreen\". fill Parameter specifying fill selected plots. argument must specified can processed aes. Defaults character name color \"darkgreen\". alpha Parameter specifying transparency fill vip plots. argument must number [0,1]. include_type Logical. set TRUE, type importance specified fitting process model included vip plot. Defaults TRUE. horizontal Logical. set TRUE, importance scores appear x-axis. parameter set FALSE, importance scores plot y-axis. Defaults TRUE. gg_theme Specify predefined theme ggplot2. Defaults theme_minimal. lsize Parameter specifying line size pdp plots. argument must specified can processed aes. Defaults 1.5. lty Parameter specifying line size pdp plots. argument must specified can processed aes. Defaults \"solid\". grid_row Parameter specifying amount rows joint pdp plot. Defaults 2. out_list Logical. set TRUE, list individual plots produced ggplot2 returned individual customization processing. Defaults FALSE. pdp_plot Logical. set TRUE, partial dependence plots produced partial package pdp included. Defaults TRUE. ... Optional additional inputs ignored method.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"Plots variable importance /partial dependence covariates ranked corresponding importance. Additionally, list individual plots can returned facilitating individual customization exporting. See following examples details.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"production importance plots, sure specify parameter importance != 'none' producing estimates function SAEforest_model. pdp plots, note covariates type factor character used partial dependence plots. Dummy-variables can used, however, pdp plots always lines connecting two effect points 0 1. informative pdp plots can produced continuous predictors.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_pop,                           num.trees = 50) plot(model1) #> Press [enter] to continue #> Warning: The data contained 3 character or factor variables unsuitable for pdp plots(district, gender, state).   # }"},{"path":"https://krennpa.github.io/SAEforest/reference/popNsize.html","id":null,"dir":"Reference","previous_headings":"","what":"Demographic population-size data — popNsize","title":"Demographic population-size data — popNsize","text":"data contains simulated population data based aggregates eusilcA_pop, based eusilcP package simFrame.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/popNsize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demographic population-size data — popNsize","text":"","code":"popNsize"},{"path":"https://krennpa.github.io/SAEforest/reference/popNsize.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Demographic population-size data — popNsize","text":"data frame 94 Austrian districts corresponding synthetic population numbers: district character; districts (94 levels). N_i numeric; simulated population district.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/print.SAEforest.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints a 'SAEforest' object — print.SAEforest","title":"Prints a 'SAEforest' object — print.SAEforest","text":"Basic information SAEforestObject printed.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/print.SAEforest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints a 'SAEforest' object — print.SAEforest","text":"","code":"# S3 method for SAEforest print(x, ...)"},{"path":"https://krennpa.github.io/SAEforest/reference/print.SAEforest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints a 'SAEforest' object — print.SAEforest","text":"x Object class SAEforest, representing point MSE estimates obtained function SAEforest_model. ... Optional additional inputs ignored method.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/print.SAEforest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prints a 'SAEforest' object — print.SAEforest","text":"Prints basic information survey data characteristics.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":null,"dir":"Reference","previous_headings":"","what":"Presents point, MSE and CV estimates — summarize_indicators","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"Function summarize_indicators reports point mean squared error (MSE) estimates well calculated coefficients variation (CV) fitted SAEforest object.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"","code":"summarize_indicators(object, indicator = \"all\", MSE = FALSE, CV = FALSE)"},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"object Object point /MSE estimates /calculated CV's requested. object must class SAEforest. indicator Optional character vector specifying indicators mapped: () calculated indicators (\"\"); (ii) default indicators name: \"Mean\", \"Quant10\", \"Quant25\", \"Median\", \"Quant75\", \"Quant90\", \"Gini\", \"Hcr\", \"Pgap\", \"Qsr\" function name/s \"custom_indicator/s\"; (iii) vector names indicators. object estimated SAEforest_model indicator arguments ignored \"Mean\" returned. MSE Logical. TRUE, MSE estimates selected indicators per domain added data frame point estimates. Defaults FALSE. CV Logical. TRUE, coefficients variation selected indicators per domain added data frame point estimates. Defaults FALSE.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"return summarize_indicators object class summarize_indicators.SAEforest including domain-specific point /MSE estimates /calculated CV's SAEforest object returned object contains data.frame ind character including names requested indicator(s).","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"Objects class summarize_indicators.SAEforest methods following generic functions: head tail (default documentation, see head),  .matrix (default documentation, see matrix), .data.frame (default documentation, see .data.frame), subset (default documentation, see subset).","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Calculating point + MSE estimates and passing arguments to the forest. # Additionally, two additional indicators and functions as threshold are added. # Note that B and num.trees are low to speed up estimation time and must be changed for # practical applications.  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_pop,                           meanOnly = FALSE, MSE = \"nonparametric\", B = 5, mtry = 5,                           num.trees = 50, smearing = FALSE) #> Error SD Bootstrap started: #> MSE Bootstrap with 5 rounds started:  # Extract indicator and show generics: Gini1 <- summarize_indicators(model1, MSE = TRUE, CV = TRUE, indicator = \"Gini\")  head(Gini1) #>              district      Gini     Gini_MSE    Gini_CV #> 1           Amstetten 0.2506610 0.0004543057 0.08503297 #> 2               Baden 0.1815458 0.0001324130 0.06338390 #> 3             Bludenz 0.2841038 0.0007885591 0.09884166 #> 4      Braunau am Inn 0.2697336 0.0002901931 0.06315512 #> 5             Bregenz 0.1617372 0.0001258838 0.06937054 #> 6 Bruck an der Leitha 0.1778989 0.0002382211 0.08675945 tail(Gini1) #>                   district      Gini     Gini_MSE    Gini_CV #> 89                    Wien 0.2413731 0.0001131947 0.04407824 #> 90  Wiener Neustadt (Land) 0.2006023 0.0002253390 0.07483112 #> 91 Wiener Neustadt (Stadt) 0.2100767 0.0014837030 0.18335616 #> 92               Wolfsberg 0.2311071 0.0009660102 0.13448613 #> 93             Zell am See 0.3003195 0.0004827088 0.07315753 #> 94                  Zwettl 0.2677981 0.0022288514 0.17629216 as.data.frame(Gini1) #>                         district      Gini     Gini_MSE    Gini_CV #> 1                      Amstetten 0.2506610 4.543057e-04 0.08503297 #> 2                          Baden 0.1815458 1.324130e-04 0.06338390 #> 3                        Bludenz 0.2841038 7.885591e-04 0.09884166 #> 4                 Braunau am Inn 0.2697336 2.901931e-04 0.06315512 #> 5                        Bregenz 0.1617372 1.258838e-04 0.06937054 #> 6            Bruck an der Leitha 0.1778989 2.382211e-04 0.08675945 #> 7             Bruck-Mürzzuschlag 0.1682187 1.652236e-04 0.07641205 #> 8               Deutschlandsberg 0.1913224 2.293643e-04 0.07915843 #> 9                       Dornbirn 0.2082983 6.929718e-04 0.12637817 #> 10                      Eferding 0.2329806 6.966463e-04 0.11328867 #> 11            Eisenstadt (Stadt) 0.1875840 8.119365e-04 0.15190262 #> 12           Eisenstadt-Umgebung 0.2004414 5.140637e-04 0.11311524 #> 13                     Feldkirch 0.2262377 5.047038e-04 0.09930092 #> 14                   Feldkirchen 0.2537076 1.579048e-03 0.15662611 #> 15                     Freistadt 0.2099376 8.011244e-04 0.13482167 #> 16                       Gmunden 0.2035652 2.554946e-04 0.07852126 #> 17                         Gmünd 0.2557238 2.125490e-03 0.18028451 #> 18                  Graz (Stadt) 0.2155064 1.494586e-04 0.05672838 #> 19                 Graz-Umgebung 0.1829827 1.316544e-03 0.19829311 #> 20                  Grieskirchen 0.2090666 1.008586e-03 0.15190489 #> 21                   Gänserndorf 0.1994797 1.921915e-04 0.06949737 #> 22                       Güssing 0.2301604 7.912222e-04 0.12221336 #> 23                       Hallein 0.2254833 6.489844e-04 0.11298030 #> 24          Hartberg-Fürstenfeld 0.2631672 7.679258e-04 0.10529988 #> 25                      Hermagor 0.2485312 1.650781e-03 0.16347970 #> 26                    Hollabrunn 0.2197322 4.093010e-04 0.09207203 #> 27                          Horn 0.2289698 3.579521e-04 0.08262932 #> 28                          Imst 0.2449579 7.311943e-04 0.11038880 #> 29              Innsbruck (Land) 0.2019746 4.139933e-04 0.10073955 #> 30             Innsbruck (Stadt) 0.2069875 3.551326e-04 0.09104397 #> 31                   Jennersdorf 0.2459114 5.877856e-04 0.09858954 #> 32        Kirchdorf an der Krems 0.2302639 8.306758e-04 0.12516700 #> 33                     Kitzbühel 0.2523222 1.222655e-03 0.13857873 #> 34             Klagenfurt (Land) 0.1815504 5.944269e-04 0.13429261 #> 35            Klagenfurt (Stadt) 0.1627702 4.077377e-04 0.12405537 #> 36                    Korneuburg 0.1608567 9.234021e-05 0.05973879 #> 37                  Krems (Land) 0.2358282 5.561211e-04 0.09999745 #> 38    Krems an der Donau (Stadt) 0.2181051 7.553568e-04 0.12601150 #> 39                      Kufstein 0.1833995 1.678502e-04 0.07064198 #> 40                       Landeck 0.2602467 1.148258e-03 0.13020708 #> 41                      Leibnitz 0.2350626 3.335657e-04 0.07769751 #> 42                        Leoben 0.1860993 1.033475e-04 0.05462673 #> 43                         Lienz 0.2627103 6.914913e-04 0.10009588 #> 44                        Liezen 0.2587971 9.768290e-04 0.12076743 #> 45                    Lilienfeld 0.2417432 6.898991e-04 0.10865219 #> 46                  Linz (Stadt) 0.1847478 1.815338e-04 0.07292888 #> 47                     Linz-Land 0.1684694 3.443728e-05 0.03483321 #> 48                   Mattersburg 0.2073792 7.126628e-04 0.12872916 #> 49                          Melk 0.2656890 1.255416e-03 0.13335838 #> 50                    Mistelbach 0.2002418 2.197294e-04 0.07402685 #> 51                         Murau 0.2544567 2.923920e-03 0.21250489 #> 52                        Murtal 0.2232718 3.604960e-04 0.08503863 #> 53                       Mödling 0.1454743 7.551740e-04 0.18890225 #> 54                   Neunkirchen 0.2177180 2.832909e-04 0.07730757 #> 55               Neusiedl am See 0.2075293 5.246292e-04 0.11036894 #> 56                Oberpullendorf 0.2225282 5.380646e-04 0.10423948 #> 57                      Oberwart 0.2521503 4.386798e-04 0.08306428 #> 58                          Perg 0.2072744 2.015107e-04 0.06848623 #> 59                        Reutte 0.2070370 3.879181e-04 0.09513098 #> 60              Ried im Innkreis 0.2438417 2.854332e-04 0.06928579 #> 61                      Rohrbach 0.2279989 9.168689e-04 0.13280699 #> 62                  Rust (Stadt) 0.2508950 4.058043e-03 0.25390217 #> 63              Salzburg (Stadt) 0.1919434 1.643715e-04 0.06679440 #> 64             Salzburg-Umgebung 0.1639323 1.139990e-04 0.06513076 #> 65        Sankt Johann im Pongau 0.2402848 4.451068e-04 0.08780229 #> 66           Sankt Pölten (Land) 0.2332269 1.503084e-04 0.05256697 #> 67          Sankt Pölten (Stadt) 0.2199186 3.331637e-04 0.08299787 #> 68        Sankt Veit an der Glan 0.2438201 8.221905e-04 0.11760254 #> 69                      Scheibbs 0.2442704 5.390493e-03 0.30056843 #> 70                        Schwaz 0.2317185 4.676871e-04 0.09332906 #> 71                     Schärding 0.2907355 5.480095e-04 0.08051855 #> 72           Spittal an der Drau 0.2521698 6.586615e-04 0.10177429 #> 73                 Steyr (Stadt) 0.2102186 1.969636e-03 0.21111638 #> 74                    Steyr-Land 0.1731385 6.047411e-04 0.14203360 #> 75              Südoststeiermark 0.2439255 9.648467e-04 0.12734208 #> 76                       Tamsweg 0.2094321 1.302228e-04 0.05448792 #> 77                         Tulln 0.1996404 6.394416e-05 0.04005457 #> 78               Urfahr-Umgebung 0.1420431 7.835259e-04 0.19706365 #> 79               Villach (Stadt) 0.1877881 6.452013e-05 0.04277396 #> 80                  Villach Land 0.2042127 3.694955e-04 0.09412866 #> 81                     Voitsberg 0.2111620 1.451617e-03 0.18043062 #> 82                   Vöcklabruck 0.2094107 5.244822e-04 0.10936199 #> 83                   Völkermarkt 0.2369843 7.105056e-04 0.11247713 #> 84        Waidhofen an der Thaya 0.2672654 3.274056e-03 0.21409191 #> 85 Waidhofen an der Ybbs (Stadt) 0.2213196 3.763664e-03 0.27719509 #> 86                          Weiz 0.2436176 2.927377e-04 0.07023130 #> 87                  Wels (Stadt) 0.2369898 1.084322e-03 0.13894711 #> 88                     Wels-Land 0.1967274 7.877112e-04 0.14266538 #> 89                          Wien 0.2413731 1.131947e-04 0.04407824 #> 90        Wiener Neustadt (Land) 0.2006023 2.253390e-04 0.07483112 #> 91       Wiener Neustadt (Stadt) 0.2100767 1.483703e-03 0.18335616 #> 92                     Wolfsberg 0.2311071 9.660102e-04 0.13448613 #> 93                   Zell am See 0.3003195 4.827088e-04 0.07315753 #> 94                        Zwettl 0.2677981 2.228851e-03 0.17629216 as.matrix(Gini1) #>            Gini     Gini_MSE    Gini_CV #>  [1,] 0.2506610 4.543057e-04 0.08503297 #>  [2,] 0.1815458 1.324130e-04 0.06338390 #>  [3,] 0.2841038 7.885591e-04 0.09884166 #>  [4,] 0.2697336 2.901931e-04 0.06315512 #>  [5,] 0.1617372 1.258838e-04 0.06937054 #>  [6,] 0.1778989 2.382211e-04 0.08675945 #>  [7,] 0.1682187 1.652236e-04 0.07641205 #>  [8,] 0.1913224 2.293643e-04 0.07915843 #>  [9,] 0.2082983 6.929718e-04 0.12637817 #> [10,] 0.2329806 6.966463e-04 0.11328867 #> [11,] 0.1875840 8.119365e-04 0.15190262 #> [12,] 0.2004414 5.140637e-04 0.11311524 #> [13,] 0.2262377 5.047038e-04 0.09930092 #> [14,] 0.2537076 1.579048e-03 0.15662611 #> [15,] 0.2099376 8.011244e-04 0.13482167 #> [16,] 0.2035652 2.554946e-04 0.07852126 #> [17,] 0.2557238 2.125490e-03 0.18028451 #> [18,] 0.2155064 1.494586e-04 0.05672838 #> [19,] 0.1829827 1.316544e-03 0.19829311 #> [20,] 0.2090666 1.008586e-03 0.15190489 #> [21,] 0.1994797 1.921915e-04 0.06949737 #> [22,] 0.2301604 7.912222e-04 0.12221336 #> [23,] 0.2254833 6.489844e-04 0.11298030 #> [24,] 0.2631672 7.679258e-04 0.10529988 #> [25,] 0.2485312 1.650781e-03 0.16347970 #> [26,] 0.2197322 4.093010e-04 0.09207203 #> [27,] 0.2289698 3.579521e-04 0.08262932 #> [28,] 0.2449579 7.311943e-04 0.11038880 #> [29,] 0.2019746 4.139933e-04 0.10073955 #> [30,] 0.2069875 3.551326e-04 0.09104397 #> [31,] 0.2459114 5.877856e-04 0.09858954 #> [32,] 0.2302639 8.306758e-04 0.12516700 #> [33,] 0.2523222 1.222655e-03 0.13857873 #> [34,] 0.1815504 5.944269e-04 0.13429261 #> [35,] 0.1627702 4.077377e-04 0.12405537 #> [36,] 0.1608567 9.234021e-05 0.05973879 #> [37,] 0.2358282 5.561211e-04 0.09999745 #> [38,] 0.2181051 7.553568e-04 0.12601150 #> [39,] 0.1833995 1.678502e-04 0.07064198 #> [40,] 0.2602467 1.148258e-03 0.13020708 #> [41,] 0.2350626 3.335657e-04 0.07769751 #> [42,] 0.1860993 1.033475e-04 0.05462673 #> [43,] 0.2627103 6.914913e-04 0.10009588 #> [44,] 0.2587971 9.768290e-04 0.12076743 #> [45,] 0.2417432 6.898991e-04 0.10865219 #> [46,] 0.1847478 1.815338e-04 0.07292888 #> [47,] 0.1684694 3.443728e-05 0.03483321 #> [48,] 0.2073792 7.126628e-04 0.12872916 #> [49,] 0.2656890 1.255416e-03 0.13335838 #> [50,] 0.2002418 2.197294e-04 0.07402685 #> [51,] 0.2544567 2.923920e-03 0.21250489 #> [52,] 0.2232718 3.604960e-04 0.08503863 #> [53,] 0.1454743 7.551740e-04 0.18890225 #> [54,] 0.2177180 2.832909e-04 0.07730757 #> [55,] 0.2075293 5.246292e-04 0.11036894 #> [56,] 0.2225282 5.380646e-04 0.10423948 #> [57,] 0.2521503 4.386798e-04 0.08306428 #> [58,] 0.2072744 2.015107e-04 0.06848623 #> [59,] 0.2070370 3.879181e-04 0.09513098 #> [60,] 0.2438417 2.854332e-04 0.06928579 #> [61,] 0.2279989 9.168689e-04 0.13280699 #> [62,] 0.2508950 4.058043e-03 0.25390217 #> [63,] 0.1919434 1.643715e-04 0.06679440 #> [64,] 0.1639323 1.139990e-04 0.06513076 #> [65,] 0.2402848 4.451068e-04 0.08780229 #> [66,] 0.2332269 1.503084e-04 0.05256697 #> [67,] 0.2199186 3.331637e-04 0.08299787 #> [68,] 0.2438201 8.221905e-04 0.11760254 #> [69,] 0.2442704 5.390493e-03 0.30056843 #> [70,] 0.2317185 4.676871e-04 0.09332906 #> [71,] 0.2907355 5.480095e-04 0.08051855 #> [72,] 0.2521698 6.586615e-04 0.10177429 #> [73,] 0.2102186 1.969636e-03 0.21111638 #> [74,] 0.1731385 6.047411e-04 0.14203360 #> [75,] 0.2439255 9.648467e-04 0.12734208 #> [76,] 0.2094321 1.302228e-04 0.05448792 #> [77,] 0.1996404 6.394416e-05 0.04005457 #> [78,] 0.1420431 7.835259e-04 0.19706365 #> [79,] 0.1877881 6.452013e-05 0.04277396 #> [80,] 0.2042127 3.694955e-04 0.09412866 #> [81,] 0.2111620 1.451617e-03 0.18043062 #> [82,] 0.2094107 5.244822e-04 0.10936199 #> [83,] 0.2369843 7.105056e-04 0.11247713 #> [84,] 0.2672654 3.274056e-03 0.21409191 #> [85,] 0.2213196 3.763664e-03 0.27719509 #> [86,] 0.2436176 2.927377e-04 0.07023130 #> [87,] 0.2369898 1.084322e-03 0.13894711 #> [88,] 0.1967274 7.877112e-04 0.14266538 #> [89,] 0.2413731 1.131947e-04 0.04407824 #> [90,] 0.2006023 2.253390e-04 0.07483112 #> [91,] 0.2100767 1.483703e-03 0.18335616 #> [92,] 0.2311071 9.660102e-04 0.13448613 #> [93,] 0.3003195 4.827088e-04 0.07315753 #> [94,] 0.2677981 2.228851e-03 0.17629216 subset(Gini1, district == \"Wien\") #>    district      Gini     Gini_MSE    Gini_CV #> 89     Wien 0.2413731 0.0001131947 0.04407824 # }"},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizes an 'SAEforest' object — summary.SAEforest","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"Shows additional information data, SAE model components. Information extracted SAEforest object. returned object suitable printing print.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"","code":"# S3 method for SAEforest summary(object, ...)"},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"object object class SAEforest representing point MSE estimates. Objects differ depending estimation method. ... Optional additional inputs ignored method.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"object class summary.SAEforest including information sample population data, model fit random forest specific metrics.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"","code":"# Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                          smp_data = eusilcA_smp, pop_data = eusilcA_pop,                          num.trees=50, mtry=3)  # SAEforest generics: summary(model1) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop, num.trees = 50,  #>     mtry = 3) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                         50 #> Number of independent variables:         14 #> Mtry:                                     3 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                      0.5977 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39342.9  39354.1 -19669.5  39338.9     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -4.4557 -0.4893 -0.0572  0.4470 11.3610  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept) 14429652 3799     #>  Residual             32568503 5707     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.3070259  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 18 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                                                        #>  0 -19593.66 -19603.83 -19662.29 -19640.94 -19627.34 -19630.9 -19659.51 #>                                                                        #>  -19651.43 -19671.83 -19656.64 -19637.15 -19622.16 -19585.67 -19653.35 #>                                          #>  -19671.68 -19633.28 -19668.55 -19669.47"},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Tuning and cross-validation of MERF parameters — tune_parameters","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"Function tune_parameters allows tune parameters implemented MERF method. Essentially, function can understood modified wrapper train package caret, treating MERFs custom method.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"","code":"tune_parameters(   Y,   X,   data,   dName,   trControl,   tuneGrid,   seed = 11235,   gg_theme = theme_minimal(),   plot_res = TRUE,   return_plot = FALSE,   na.rm = TRUE,   ... )"},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"Y Continuous input value target variable. X Matrix data.frame predictive covariates. data data.frame survey sample data including specified elements Y X. dName Character specifying name domain identifier, random intercepts modeled. trControl Control parameters passed train. important parameters method (\"repeatedcv\" x-fold cross-validation), number (number folds) repeats (number repetitions). details see trainControl example . tuneGrid data.frame possible tuning values. columns must names tuning parameters. tuning function grid must comprise entries following parameters: num.trees, mtry, min.node.size, splitrule. seed Enabling reproducibility cross-validation tuning. Defaults 11235. gg_theme Specify predefined theme ggplot2. Defaults theme_minimal. plot_res Optional logical. TRUE, plot results cross-validation tuning shown. Defaults TRUE. return_plot set TRUE, list comparative plot produced ggplot2 returned individual customization processing. na.rm Logical. Whether missing values removed. Defaults TRUE. ... Additional parameters directly passed random forest ranger /training function train. details possible parameters examples see ranger train.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"Prints requested optimal tuning parameters (requested) additional comparative plot produced ggplot2.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"Tuning can performed following four parameters: num.trees (number trees forest), mtry (number variables split candidates node), min.node.size (minimal individual node size) splitrule (general splitting rule). details see ranger.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\") library(caret) #> Loading required package: ggplot2 #> Loading required package: lattice  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Specific characteristics of Cross-validation fitControl <- trainControl(method = \"repeatedcv\", number = 5,                            repeats = 1)  # Define a tuning-grid merfGrid <- expand.grid(num.trees = 50, mtry = c(3, 7, 9),                         min.node.size = 10, splitrule = \"variance\")  tune_parameters(Y = income, X = X_covar, data = eusilcA_smp,                 dName = \"district\", trControl = fitControl,                 tuneGrid = merfGrid) #> 1945 samples #>   15 predictor #>  #> No pre-processing #> Resampling: Cross-Validated (5 fold, repeated 1 times)  #> Summary of sample sizes: 1557, 1557, 1556, 1556, 1554  #> Resampling results across tuning parameters: #>  #>   mtry  RMSE      Rsquared   MAE      #>   3     5757.157  0.7120835  3830.652 #>   7     5518.994  0.7281565  3588.959 #>   9     5606.048  0.7184037  3655.541 #>  #> Tuning parameter 'num.trees' was held constant at a value of 50 #>  #> Tuning parameter 'min.node.size' was held constant at a value of 10 #>  #> Tuning parameter 'splitrule' was held constant at a value of variance #> RMSE was used to select the optimal model using the smallest value. #> The final values used for the model were num.trees = 50, mtry = #>  7, min.node.size = 10 and splitrule = variance.  # }"},{"path":[]}]
