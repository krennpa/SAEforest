[{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://krennpa.github.io/SAEforest/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://krennpa.github.io/SAEforest/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Patrick Krennmair. Author, maintainer.","code":""},{"path":"https://krennpa.github.io/SAEforest/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Krennmair P (2022). SAEforest: Mixed Effect Random Forests Small Area Estimation. https://github.com/krennpa/SAEforest, https://krennpa.github.io/SAEforest/.","code":"@Manual{,   title = {SAEforest: Mixed Effect Random Forests for Small Area Estimation},   author = {Patrick Krennmair},   year = {2022},   note = {https://github.com/krennpa/SAEforest, https://krennpa.github.io/SAEforest/}, }"},{"path":"https://krennpa.github.io/SAEforest/index.html","id":"saeforest","dir":"","previous_headings":"","what":"Mixed Effect Random Forests for Small Area Estimation","title":"Mixed Effect Random Forests for Small Area Estimation","text":"package promotes use Mixed Effects Random Forests (MERFs) applications Small Area Estimation (SAE). package effectively combines functions estimation regionally disaggregated linear nonlinear economic inequality indicators using survey sample data. Estimated models increase precision direct estimates survey data, combining unit-level aggregated population level covariate information census register data. Apart point estimates, MSE estimates requested indicators can easily obtained. package provides procedures facilitate analysis model performance MERFs visualizes predictive relations covariates variable importance. Additionally, users can summarize map indicators corresponding measures uncertainty.","code":""},{"path":"https://krennpa.github.io/SAEforest/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Mixed Effect Random Forests for Small Area Estimation","text":"can install development version SAEforest Github :","code":"# install.packages(\"devtools\") devtools::install_github(\"krennpa/SAEforest\")"},{"path":"https://krennpa.github.io/SAEforest/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Mixed Effect Random Forests for Small Area Estimation","text":"basic example demonstrates functionality package: included features inspect model graphically. instance look following output generic function plot, shows -called variable importance plot: inspect model graphically, also map indicators. Take look example Austrian pseudo-data district-level mean income produced function map_indicators: hope like presentation package. interested model-based SAE definitely also check package emdi.","code":"library(SAEforest)  data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[,-c(1,16,17,18)]  #Example 1: #Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                          smp_data = eusilcA_smp, pop_data = eusilcA_pop)  #SAEforest generics: summary(model1) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                        500 #> Number of independent variables:         14 #> Mtry:                                     3 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                     0.62976 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39193.1  39204.2 -19594.5  39189.1     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -2.9730 -0.5194 -0.0759  0.4448 11.8159  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept) 11157235 3340     #>  Residual             30335770 5508     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.2688944  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 4 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                           #>  0 -19545.67 -19573.45 -19593.59 -19594.53 #> Press [enter] to continue"},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":null,"dir":"Reference","previous_headings":"","what":"Main function for unit-level MERF — MERFranger","title":"Main function for unit-level MERF — MERFranger","text":"function enables use Mixed Effects Random Forests (MERFs) effectively combining random forest ranger model capturing random effects lme4. MERF algorithm algorithmic procedure reminiscent EM-algorithm (see Details). function base-function wrapping function (SAEforest_model directly used ordinary user. Recommended exceptions applications exceeding scope existing wrapper functions research. function MERFranger allows model complex patterns structural relations (see Examples). function returns object class MERFranger, can used produce unit-level predictions. contrast wrapping functions, function directly provide SAE estimates domain-specific indicators.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main function for unit-level MERF — MERFranger","text":"","code":"MERFranger(   Y,   X,   random,   data,   importance = \"none\",   initialRandomEffects = 0,   ErrorTolerance = 1e-04,   MaxIterations = 25,   na.rm = TRUE,   ... )"},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main function for unit-level MERF — MERFranger","text":"Y Continuous input value target variable. X Matrix predictive covariates. random Specification random effects terms following syntax lmer. Random effect terms specified vertical bars (|) separating expressions design matrices grouping factors. details see lmer example . data data.frame sample data including specified elements Y X. importance Variable importance mode processed random forest ranger. Must 'none', 'impurity', 'impurity_corrected', 'permutation'. details see ranger. initialRandomEffects Numeric value vector initial estimate random effects. Defaults 0. ErrorTolerance Numeric value monitor MERF algorithm's convergence. Defaults 1e-04. MaxIterations Numeric value specifying maximal amount iterations MERF algorithm. Defaults 25. na.rm Logical. Whether missing values removed. Defaults TRUE. ... Additional parameters directly passed random forest ranger. important parameters instance mtry (number variables possibly split node), num.trees (number trees). details possible parameters see ranger example .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main function for unit-level MERF — MERFranger","text":"object class MERFranger includes following elements: Forest random forest class ranger modelling fixed effects model. EffectModel model random effects class merMod capturing structural components MERFs modeling random components. RandomEffects List element containing values random intercepts EffectModel. RanEffSD Numeric value standard deviation random intercepts. ErrorSD Numeric value standard deviation unit-level errors. VarianceCovariance VarCorr matrix EffectModel. LogLik Vector numerical entries showing loglikelihood MERF algorithm. IterationsUsed Numeric number iterations used convergence MERF algorithm. OOBresiduals Vector OOB-residuals. Random Character specifying random intercept random effects model. ErrorTolerance Numerical value monitor MERF algorithm's convergence. initialRandomEffects Numeric value vector initial specification random effects. MaxIterations Numeric value specifying maximal amount iterations MERF algorithm.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Main function for unit-level MERF — MERFranger","text":"exists generic function predict objects obtained MERFranger. MERF algorithm iteratively optimizes two separate steps: ) random forest function, assuming random effects term correct b) estimates random effects part, assuming OOB-predictions forest correct. Overall convergence algorithm monitored log-likelihood joint model components. details see Krennmair & Schmid (2022) Hajjem et al. (2014). Note MERFranger object composition elements random forest class ranger random effects model class merMod. Thus, generic functions applicable corresponding objects. details generic functions see ranger lmer well examples .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Main function for unit-level MERF — MERFranger","text":"Hajjem, ., Bellavance, F., & Larocque, D. (2014). Mixed-Effects Random Forest Clustered Data. Journal Statistical Computation Simulation, 84 (6), 1313–1328. Krennmair, P., & Schmid, T. (2022). Flexible Domain Prediction Using Mixed Effects Random Forests. Journal Royal Statistical Society: Series C (Applied Statistics) (forthcoming).","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/MERFranger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main function for unit-level MERF — MERFranger","text":"","code":"# \\donttest{ # Load Data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Example 1: # Calculating general model used in wrapper functions  model1 <- MERFranger(Y = income, X = X_covar, random = \"(1|district)\",                      data = eusilcA_smp, num.trees=50)  # get individual predictions:  ind_pred <- predict(model1, eusilcA_pop) # }"},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest.html","id":null,"dir":"Reference","previous_headings":"","what":"'SAEforest' - Estimating disaggregated indicators using Mixed Effects Random Forests — SAEforest","title":"'SAEforest' - Estimating disaggregated indicators using Mixed Effects Random Forests — SAEforest","text":"package SAEforest promotes use Mixed Effects Random Forests (MERFs) applications Small Area Estimation (SAE). package effectively combines functions estimation regionally disaggregated linear nonlinear economic inequality indicators using survey sample data. Estimated models increase precision direct estimates survey data, combining unit-level aggregated population level covariate information census register data. Apart point estimates, MSE estimates requested indicators can easily obtained. package provides procedures facilitate analysis model performance MERFs visualizes predictive relations covariates variable importance. Additionally, users can summarize map indicators corresponding measures uncertainty. Methodological details functions package found Krennmair & Schmid (2022), Krennmair et al. (2022a) Krennmair et al. (2022b).","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"'SAEforest' - Estimating disaggregated indicators using Mixed Effects Random Forests — SAEforest","text":"package includes main function MERFranger wrapped SAEforest_model improved SAE workflow. function produces object inheriting requested results regionally disaggregated point uncertainty estimates. Additionally, statistical information model fit variable importance accessible generic functions summary (summary.SAEforest) class-specific plot function (plot.SAEforest). full documentation objects class SAEforest see SAEforestObject. overview currently provided functions within package can seen help(package=\"SAEforest\").","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"'SAEforest' - Estimating disaggregated indicators using Mixed Effects Random Forests — SAEforest","text":"Krennmair, P., & Schmid, T. (2022). Flexible Domain Prediction Using Mixed Effects Random Forests. Journal Royal Statistical Society: Series C (Applied Statistics) (forthcoming). Krennmair, P., & Würz, N. & Schmid, T. (2022a). Analysing Opportunity Cost Care Work using Mixed Effects Random Forests Aggregated Census Data. Krennmair, P., & Schmid, T & Tzavidis, Nikos. (2022b). Estimation Poverty Indicators Using Mixed Effects Random Forests. Working Paper.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitted 'SAEforest' object — SAEforestObject","title":"Fitted 'SAEforest' object — SAEforestObject","text":"object class SAEforest always includes point estimates regionally disaggregated economic inequality indicators MERFmodel element including information model fit fixed effects well random effects. Optionally SAEforestObject includes corresponding MSE estimates. case mean estimates aggregated covariate information, SAEforestObject additionally includes element, capturing number variables used weighting process aggregated covariate information. object class SAEforestObject, following generic functions applicable: print, plot, summary summarize_indicators. Additionally selected generic functions lme4 (fixef, getData, ranef, residuals, sigma, VarCorr) directly applicable object class SAEforest.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitted 'SAEforest' object — SAEforestObject","text":"Four components always included SAEforest object. MSE_estimates AdjustedSD NULL except MSE results requested. element NrCovar exists SAEforest objects produced SAEforest_model option aggData = TRUE. MERFmodel included MERFmodel object comprises information model fit, details performed MERF algorithm well details variance components. See exact description components. Indicators data frame first column area-level identifier additional columns indicators interest. Note objects SAEforest_model report \"Mean\". MSE_estimates MSE results requested. data frame first column area-level identifier additional columns MSE estimates indicators interest. Note objects SAEforest_model report MSE values \"Mean\". NrCovar means aggregated covariate information estimated, .e. SAEforest_model option aggData = TRUE. list containing variable names covariates used calculation needed calibration weights point estimates. See Krennmair et al. (2022a) methodological details explanations. Details object MERFmodel: Forest random forest class ranger modelling fixed effects model. EffectModel model random effects class merMod capturing structural components MERFs modeling random components. RandomEffects List element containing values random intercepts EffectModel. RanEffSD Numeric value standard deviation random intercepts. ErrorSD Numeric value standard deviation unit-level errors. VarianceCovariance VarCorr matrix EffectModel. LogLik Vector numerical entries showing loglikelihood MERF algorithm. IterationsUsed Numeric number iterations used convergence MERF algorithm. OOBresiduals Vector OOB-residuals. Random Character specifying random intercept random effects model. ErrorTolerance Numerical value monitor MERF algorithm's convergence. initialRandomEffects Numeric value vector initial specification random effects. MaxIterations Numeric value specifying maximal amount iterations MERF algorithm. call summarized function call producing object. data_specs Data characteristics domain-specific sample sizes number --sample areas. data Processed survey sample data.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fitted 'SAEforest' object — SAEforestObject","text":"Note MERFmodel object composition elements random forest class ranger random effects model class merMod. Thus, generic functions applicable corresponding objects. details generic functions see ranger lmer well examples .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fitted 'SAEforest' object — SAEforestObject","text":"Krennmair, P., & Schmid, T. (2022). Flexible Domain Prediction Using Mixed Effects Random Forests. Journal Royal Statistical Society: Series C (Applied Statistics) (forthcoming). Krennmair, P., & Würz, N. & Schmid, T. (2022a). Analysing Opportunity Cost Care Work using Mixed Effects Random Forests Aggregated Census Data. Krennmair, P., & Schmid, T & Tzavidis, Nikos. (2022b). Estimation Poverty Indicators Using Mixed Effects Random Forests. Working Paper.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforestObject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitted 'SAEforest' object — SAEforestObject","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[,-c(1,16,17,18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                          smp_data = eusilcA_smp, pop_data = eusilcA_pop,                          num.trees=50, mtry = 3)  #SAEforest generics:  summary(model1) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop, num.trees = 50,  #>     mtry = 3) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                         50 #> Number of independent variables:         14 #> Mtry:                                     3 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                     0.60668 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39291.7  39302.8 -19643.8  39287.7     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -3.1863 -0.5181 -0.0549  0.4540 11.6137  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept) 12423550 3525     #>  Residual             31852947 5644     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.2805902  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 10 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                                                        #>  0 -19571.75 -19623.4 -19666.19 -19675.72 -19648.74 -19676.63 -19627.21 #>                                #>  -19661.84 -19645.39 -19643.83 summarize_indicators(model1) #> Warning: For objects of class SAEforest_mean or SAEforest_meanAGG, only results for the Indicator \"Mean\" are reported #> Indicator/s: Mean #>                         district     Mean #> 1                      Amstetten 14120.32 #> 2                          Baden 22471.02 #> 3                        Bludenz 12340.38 #> 4                 Braunau am Inn 11784.74 #> 5                        Bregenz 32598.41 #> 6            Bruck an der Leitha 23285.24 #> 7             Bruck-Mürzzuschlag 23575.76 #> 8               Deutschlandsberg 20203.42 #> 9                       Dornbirn 19686.20 #> 10                      Eferding 15839.31 #> 11            Eisenstadt (Stadt) 35508.52 #> 12           Eisenstadt-Umgebung 24814.70 #> 13                     Feldkirch 16484.14 #> 14                   Feldkirchen 14217.46 #> 15                     Freistadt 16899.99 #> 16                       Gmunden 19565.54 #> 17                         Gmünd 13993.34 #> 18                  Graz (Stadt) 17784.14 #> 19                 Graz-Umgebung 34109.52 #> 20                  Grieskirchen 16473.59 #> 21                   Gänserndorf 20249.25 #> 22                       Güssing 16652.80 #> 23                       Hallein 16052.00 #> 24          Hartberg-Fürstenfeld 13286.66 #> 25                      Hermagor 13254.83 #> 26                    Hollabrunn 16496.75 #> 27                          Horn 15458.67 #> 28                          Imst 14144.16 #> 29              Innsbruck (Land) 26637.20 #> 30             Innsbruck (Stadt) 17657.63 #> 31                   Jennersdorf 13422.62 #> 32        Kirchdorf an der Krems 16711.19 #> 33                     Kitzbühel 12457.93 #> 34             Klagenfurt (Land) 22166.03 #> 35            Klagenfurt (Stadt) 33322.80 #> 36                    Korneuburg 27712.43 #> 37                  Krems (Land) 15350.58 #> 38    Krems an der Donau (Stadt) 17074.62 #> 39                      Kufstein 20584.40 #> 40                       Landeck 13248.45 #> 41                      Leibnitz 15547.93 #> 42                        Leoben 20204.55 #> 43                         Lienz 12107.43 #> 44                        Liezen 12439.38 #> 45                    Lilienfeld 15376.47 #> 46                  Linz (Stadt) 22416.73 #> 47                     Linz-Land 26921.28 #> 48                   Mattersburg 20361.16 #> 49                          Melk 12424.79 #> 50                    Mistelbach 19373.28 #> 51                         Murau 13256.74 #> 52                        Murtal 19218.42 #> 53                       Mödling 40978.85 #> 54                   Neunkirchen 16498.99 #> 55               Neusiedl am See 18406.41 #> 56                Oberpullendorf 17241.04 #> 57                      Oberwart 14026.94 #> 58                          Perg 17675.17 #> 59                        Reutte 18200.18 #> 60              Ried im Innkreis 14063.17 #> 61                      Rohrbach 14890.43 #> 62                  Rust (Stadt) 13923.59 #> 63              Salzburg (Stadt) 20142.46 #> 64             Salzburg-Umgebung 30474.18 #> 65        Sankt Johann im Pongau 14766.61 #> 66           Sankt Pölten (Land) 16636.36 #> 67          Sankt Pölten (Stadt) 16126.38 #> 68        Sankt Veit an der Glan 15085.64 #> 69                      Scheibbs 14346.52 #> 70                        Schwaz 15505.48 #> 71                     Schärding 10812.98 #> 72           Spittal an der Drau 13348.50 #> 73                 Steyr (Stadt) 18462.37 #> 74                    Steyr-Land 24990.16 #> 75              Südoststeiermark 13757.93 #> 76                       Tamsweg 15979.83 #> 77                         Tulln 20232.57 #> 78               Urfahr-Umgebung 42795.45 #> 79               Villach (Stadt) 22419.03 #> 80                  Villach Land 19614.24 #> 81                     Voitsberg 17350.68 #> 82                   Vöcklabruck 18032.99 #> 83                   Völkermarkt 15835.84 #> 84        Waidhofen an der Thaya 13126.70 #> 85 Waidhofen an der Ybbs (Stadt) 17410.52 #> 86                          Weiz 14944.91 #> 87                  Wels (Stadt) 13990.08 #> 88                     Wels-Land 20121.32 #> 89                          Wien 20027.43 #> 90        Wiener Neustadt (Land) 19516.08 #> 91       Wiener Neustadt (Stadt) 17169.48 #> 92                     Wolfsberg 17374.67 #> 93                   Zell am See 10529.12 #> 94                        Zwettl 13706.70 residuals(model1) #>           213           194           258           460           798  #>  -8463.249171   4441.921679   -581.755392   -135.459631   3554.442906  #>           447           567           704           680           277  #>   1432.329572   2249.426410   1225.516577   5576.912757  -6299.508574  #>            65           507           672            41           435  #>  -3541.190880  -1698.633222   6337.773975  -1254.449432  -2223.981868  #>           532           248            75           673           401  #>  -1024.250127   9597.683569  -2731.156970  -1838.395955   -710.133176  #>           765           156           436            12           612  #>   9245.855235    429.238538  -3661.800345  -2163.422705   -814.861191  #>           514           529           142           390           107  #>   -107.408726  -2464.731745  -2463.034369   2252.802497  -6016.219534  #>           478          2806          2787          5385          3760  #>   -376.278620   3711.215115   1698.011587  -4447.014543   4908.530700  #>          2552          3271          6185          6320          6080  #>   8334.572911   2290.600130  -3113.193260    795.446149  -3820.205439  #>          5667          2638          4275          6175          6112  #>   -846.578091    230.238887  -1175.286741  -2125.973518   4155.973468  #>          5838          5641          3705          3660          3609  #>   6914.194183   -540.690540    454.229171  -8319.391498   5008.144841  #>          2712          6686          5166          4054          4840  #>   1659.826581   2035.806990  -3207.954109 -12066.261062    470.992769  #>          4133          6653          6871          5143          4922  #>  -1204.266102   6160.280541     -3.365312  -1791.822625  -3497.551173  #>          5927          7005          6332          4727          5439  #>  -4430.514530   2362.497659  -3363.194768   -838.345114  -1804.037787  #>          3887          6199          6667          3704          3450  #>   3119.515312  -1819.113991   4512.601075   1391.648227  -3971.569930  #>          6292          2636          5399          2838          4376  #>  11986.332106  -1221.834158   5231.341449  -4615.232304   5887.785120  #>          7138          2834          3916          5585          4065  #>  -3533.175849   2019.294123    426.486665 -10168.772894   4774.952454  #>          6249          6821          6958          6029          5513  #>  -1071.823151  -7333.929290   4945.219723  -3674.271511  -2270.723676  #>          5165          3738          4548          6291          3589  #>   -953.827537   2970.549334   8110.437694  -1896.082036  -7353.159828  #>          3262          5338          3680          3983          6991  #>  -5205.685846   -517.911383   2472.433674  -1795.460668  -1509.499405  #>          4670          4466          6163          6026          3544  #>   -574.361711   4582.129051  -2992.733520   3196.072808   1237.608661  #>          2541          5640          4858          2939          4596  #>   2018.665486  -4728.681272   1877.994014   5050.010755   1008.784243  #>          3129          2523          5060          6526          6244  #>   1151.338397     26.221602  -5219.282944  -1996.740794   2229.907717  #>          5489          6008          6890          4207          6582  #>   4555.792618  -4462.703933  -2817.213139   3776.466805     79.995495  #>          6993          4421          3548          7136          2817  #>  -2289.964936   -944.877983   -468.205075    384.918684    746.772596  #>          3325          6911          3577          4635          3958  #>   3841.269171   -504.414202   1694.520821  -2257.353198  -2289.183202  #>          6484          3012          4848          6601          2860  #>  -1676.137640  -1493.544777  10896.970045  -3424.875973   2789.553768  #>          2556          5897          5781          3899          6099  #>   2479.132335    723.556300   -635.116282   7590.947207   -951.843133  #>          5524          4317          4638          5654          5285  #>  -1122.847017   -924.944097   2393.350163   4163.526775   -258.379092  #>          4961          3657          5045          6192          5889  #>   -356.990797   1359.179602  -4761.522314  -5541.072411  -5757.816031  #>          4199          2883          6294          4443          3747  #>  -3973.090400   1935.594075   1516.611678  -4318.749898   4565.543768  #>          3755          7139          3358          3394          5210  #>   -396.892560   -383.014729   2506.187117  -1591.008356   6230.204939  #>          2701          3550          5323          4470          5815  #>  -5192.049946   3405.062263   3394.948243    112.826344    161.742937  #>          6855          3856          4803          6646          5425  #>   1016.338368  -1185.711265   -341.502939  -2215.495208    212.809380  #>          3914          4660          4710          6461          3623  #>  -2674.556578  -1204.473010    723.794485  -4278.991563   6032.923247  #>          2739          5650          3212          6872          6630  #>  -5262.889887   2264.188352   1592.807597   6304.787138   7499.060920  #>          5146          2917          5952          7046          3500  #>   3799.654333  -1628.348996   -632.813570  -3813.425708  -3280.178726  #>          3592          4618          3649          4653          4117  #>  -3984.128704   -596.041793   -177.929563   7671.326593   9293.844111  #>          6910          3695          4312          3533          4547  #>  -3948.645365  -3313.361861    953.267330   1052.261902  -1299.311468  #>          4732          2872          4291          6235          6380  #>  -2889.901010  -3305.254132   5796.224522    396.299718  -3076.535803  #>          2697          4333          3813          6647          6076  #>   2855.124092  12139.649718  -6263.589732   -148.042033  -5418.210835  #>          2764          7051          4043          4846          3121  #>  -3780.930006   6932.312329   -957.831376  -1778.742881  -1565.462823  #>          6528          4380          5982          3719          5784  #>    476.817929  -3536.737262   6032.968965   3666.906524    690.848595  #>          5993          6924          4761          3656          4818  #>   -774.046720   -237.941948  -3558.425466  -2851.107660   6179.124457  #>          6541          2779          5230          6481          3411  #>   1601.020340  -3109.321018   2369.272304  -7113.028492    216.337607  #>          6436          3612          4360          5892          6136  #>   2274.744459   6682.065023  -1953.646820     76.776344   7539.980144  #>          6451          4267          3768          5920          4374  #>  -3281.767828   -762.842213    990.549280  -8435.006668    662.527506  #>          7018          5044          7103          3294          5777  #>   1144.758350   3710.300551    919.499257  -3231.442196  -5341.099220  #>          3909          5469          5223          6202          4095  #>   3323.682668  -3993.666261   2529.577513    986.545826  -3308.522068  #>          5089          7119          4784          3388          4002  #>    115.961212   -149.945235   1053.014892    168.163877    661.504884  #>          2721          6960          4869          6338          3674  #>  -6166.411244   4141.239844   3590.209249   1080.159847  -5014.241708  #>          4326          4342          4178          6226          6238  #>   3182.977359  -1649.089249   2571.127056   6558.510086  -4765.522724  #>          4677          6264          6651          3893          6279  #>  10311.517677  -6693.866931  -5845.807706   -390.502882  11110.761264  #>          5260          5945          4613          3630          5062  #>  20704.695840  23887.621060   8317.452898  10817.045797   4676.392989  #>          2750          2762          3508          3191          3072  #>   1868.209525  10238.941636    162.078379  11532.770651   4230.620286  #>          4527          3514          7026          4507          5437  #>  -5505.274886  -5813.021915  -2723.619074  -8474.688686  10463.662803  #>          5269          7040          5753          3784          2648  #>  -6049.318108  -8380.937918  -4614.284670 -10223.468357   5231.383249  #>          4911          2771          4574          5691          6059  #>  -1971.421866 -11083.920167   1527.196596  -8371.849739  -2093.978490  #>          4908          3019          3844          4056          2715  #>  -5054.186715   -994.091159 -11238.950197  -4368.903348   7548.377049  #>          6913          6354          2912          2927          7083  #>    124.707756  -5321.679116   4380.574129   -527.969857  -2883.898212  #>          5418          4420          5443          6027          2664  #>  -3974.962958   3182.918613    923.050459  -4340.390194  -6181.992260  #>          5734          4997          2926          3173          2782  #>  -1630.097911     48.165766  -3933.051181   1002.986899  -4992.934898  #>          4709          5441          3298          4050          4879  #>  -1179.976964  10582.910417   -163.857124  -3385.512795   8132.347238  #>          7076          4017          6742          2802          4149  #>  -3952.715240   4670.554304   5247.992750   -710.277014   4289.705791  #>          5980          6893          3217          4588          6538  #>  -2759.673135  -1402.132490  -5937.457557    320.304318   2923.328853  #>          5666          3310          2905          4324          3037  #>   5271.194346  -5005.464205   2743.694553  -3688.578218   2671.329930  #>          3843          3185          4666          2947          6721  #>   1529.873972   2859.533932   1355.282463   1028.005602   -824.374272  #>          6246          2983          4565          5422          5745  #>  -5721.183467   4656.431380   -538.548150  -4536.096906   5498.957393  #>          6227          4347          6161          6127          3021  #>  -1486.083273   1673.613799   4042.779163  -1960.800389  -2683.302308  #>          5180          5375          6650          3228          3569  #>   5699.958789    316.323774  -4204.312692   4113.708413  -8249.745453  #>          7077          4270          4822          5235          3275  #>  -1332.998878     72.451074  -3735.180124  -3178.114165  -1010.420238  #>          4959          2627          5272          5322          4601  #>  -3829.472725   1308.063670   8059.982217    711.654630   6473.908692  #>          5258          4069          5148          3882          3307  #>   -557.423083  -1222.994996  -1584.324071   3011.570801    998.748048  #>          5358          2681          5508          5463          6662  #>    648.927289    817.025109   3894.374007   1562.029062  -9260.613699  #>          2851          5984          6720          5983          5869  #>  -2206.810397  -1658.439948  -1733.453052   2188.998832  -2338.701821  #>          3105          5026          4814          3734          3267  #>   3047.916754  -6235.949918   3740.011958   6944.136843   6092.855922  #>          3601          5981          5577          3931          4503  #>   1740.137733  -5029.237894   4663.763265    750.457683   3862.518134  #>          5543          3323          6205          7032          4145  #>  -1767.531162     23.612186  -3380.189431  -1390.686120   -545.008420  #>          4256          2970          4744          4740          3928  #>  -6351.621225   -973.685646   -170.626265   1397.423694   5664.266250  #>          5403          3107          3798          6965          3591  #>  -1351.498054  -4126.033064  -3609.831604   2607.301952  -5574.541919  #>          5332          2957          4662          4563          6442  #>   2836.944397  -5075.589133  -1246.461427   1888.597911  -2848.978443  #>          5574          6896          7133          3197          5130  #>   4414.730685  -4674.792957  -4012.577099  -1116.823435   1757.599832  #>          4924          5702          6937          6399          6018  #>   4533.303955    542.693772   7752.216996  -1696.355681  -5626.903905  #>          6520          5701          6485          4356          5084  #>   6474.087321  -1298.078026  -1490.057324  -6143.616318   6346.589343  #>          4413          6881          6446         19888         19002  #>   4537.516048  -2596.228643   2128.032921  32253.891932  23817.961161  #>         18315         20371         20862         21386         21124  #>   7690.791746   6597.077304   8298.869971  10582.102855   6022.298711  #>         21694         21420         22630         20981         18630  #>  13139.816384  -3761.563960   -408.442339    -24.096064   4126.169286  #>         18313         18238         21052         22103         19650  #>  15185.621380   2363.896655   4785.826091   5466.950390   -340.743972  #>         20548         23178         23814         23535         23711  #>  12374.523070  10869.605370   5558.521137   8589.304280   3374.525505  #>         21778         19831         23072         20153         20500  #>   1358.171691    -32.727611  13960.033960   8713.727546    351.225809  #>         20483         23502         23268         22897         23972  #>   4378.030489    197.028798  -2276.587228     50.319731   5392.737834  #>         18689         22742         21776         19453         19908  #>   1984.155751  -2230.199447   2478.661969  -1664.980277  -2515.517495  #>         18589         23641         22342         20947         21075  #>  -2526.250409   4938.039143   2136.894892   4184.262902   7133.943523  #>         23365         21917         20956         22397         23123  #>   -249.121896   1305.185062   -273.944740   5263.917222   3813.060689  #>         20533         19614         18300         18856         21830  #>   7953.733368   4210.625148   3896.195976  -1944.229387    608.196253  #>         19222         22581         19761         19842         23427  #>   5376.621275   1278.202121   1319.480999   1217.071122   9832.433250  #>         23480         19824         21803         19318         23274  #>  -6508.828715   -437.086861   8168.644418     62.316625   2208.211101  #>         21617         20287         21937         22381         19784  #>  -2578.268374  -8740.841689  -5963.159022  -1247.899184   1528.279663  #>         21084         20734         18518         19329         22350  #>  -2957.853077  -2460.375923   -556.467814   2228.011289   2274.962056  #>         23104         18411         23216         19359         23117  #>   4270.826750   5477.240282  -6632.871606  16342.058024  -4175.471149  #>         19382         19665         23051         20991         21044  #>  -4003.025905   2635.072948   -470.151782   -655.468049  -9810.290196  #>         22752         18563         18772         21808         22355  #>   4428.324033   4432.811114  -2306.224828    620.882664    702.610102  #>         21231         23666         20912         18510         18671  #>  -4187.905752    440.907384   4040.188779   -917.338116   -114.911023  #>         23637         19136         19765         22042         18873  #>  -6621.892058  -5307.937099  12996.180101  -1382.620554    568.585381  #>         19928         22478         23450         20441         22540  #>  -4272.657809   -603.740545   -595.557316  -5061.827372   -884.115435  #>         20618         19316         20353         19845         21205  #>   2032.805720   1027.896259 -10699.434876  -6432.286297    -18.033685  #>         19859         20591         22968         22184         20426  #>   5153.489004   5312.391164  -1869.712691   -756.018340   7928.893959  #>         23654         19871         23057         20891         22932  #>   7078.103549  -5341.361611   1550.703840   1889.463809  -4129.646652  #>         20649         23328         21157         20457         19169  #>    223.243493  -2341.964507  -3223.646153  -6838.929240  -1617.449391  #>         23576         21825         22360         18652         21962  #>  -3168.981008  -1028.567559  -1706.079096  -1354.717269   -929.232284  #>         21684         19402         20539         18653         21049  #>    547.221490   -983.880381   6323.892681  -4016.115839  -2454.037546  #>         19105         21339         19901         23056         23545  #>   -245.873285  -2366.858791   -767.751765    -86.025098   1813.385679  #>         21304         22121         23931         19403         20857  #>   -518.907634   -432.131949  -3077.033655    523.166193  -6014.292210  #>         19726         20770         22683         20207         19143  #>   -106.480030   6538.189837   2636.327188  -3990.667704  -2807.130898  #>         18528         18927         21095         18296         18626  #>   1858.988402  -1547.631587    497.950078  -3621.396902   -245.543097  #>         22140         22709         22236         22470         22066  #>  -4375.960270  -5895.470564    295.681072  -3139.161646  -2791.344283  #>         23160         19035         22812         20993         22912  #>  -2040.378964  -1589.213001  -9307.541254  -1994.594473   -623.415592  #>         23971         22911         18201         22878         18688  #>  -1756.247599  -4226.214342   -919.216587  -3274.536536  -3857.005706  #>         21121         19706         20386         23896         18687  #>   -964.005044  -6709.316047  -2889.762248  -5105.974917  -1106.511163  #>         23761         18408         19530         19680         20678  #>   -558.630857 -10586.685189  -2187.068524 -12228.736477  -8176.705123  #>         18505         22555         23045         23454         23852  #>  -6737.417453  -5580.992180  -5432.672699    301.363896  -3007.723712  #>         21837         20480         23448         21920         22754  #>  -8871.891612  -1051.770720  -7522.411354 -10172.929989  -4812.385180  #>         20120         22972         19722         22451         19531  #>  -2828.309552  -9401.524251   -451.591876  -5804.267967  -1970.973312  #>         23991         21023         22857         22590         22513  #>     -7.260861  -9947.207183  -3396.741103 -13800.321037   -976.252594  #>         20275         19585         21612          2127           843  #>  -3238.218243  -9292.025810  -5050.465384  -1365.196327  16083.490321  #>          1710          1281          1102          1696          1200  #>  -8757.544428  -7534.278595   4186.422752  15504.490615    571.536837  #>          2002          1446          2137          1301          2411  #>    919.179998  -2048.531928   3775.645947  -2392.967874  -5189.078595  #>          1104          2072          2235          2175          2510  #>  -4630.395698  -3914.474441  -4620.825766   3526.442352   2631.937380  #>          1114          1617          1430          1159          1575  #>   1750.502028  -2498.063485  65545.954592  29378.353039   9779.636184  #>          2022          1240          1768          1254          1510  #>  -3631.424056   4609.390990  -2716.884911   -898.886150   4289.637043  #>          2246          2036          2104          1115          2321  #>   -941.848513   5812.239014    428.725460  -4608.375987    872.287088  #>          1890          2239          1728          1265          1428  #>  -5206.922951   -559.867960  -6089.735276  -5251.125184  -1739.283893  #>          2161          1940          1438          2068          1330  #>    792.925362  -8670.945449 -10090.216078  -8065.312174  -6762.011111  #>          1522          2517          2343          1271          1238  #>  -7937.625884   2313.276653  -1572.434814  -6918.066789  -7722.648649  #>          1400          2232          2214          1563          1079  #>  -1048.614762 -10058.152391  -7038.993310  -3110.184809   2701.316995  #>          2327           806          1992          1553          2305  #>  -4025.111551    764.854743  -1738.901465   4808.975052   3891.729172  #>           967          2216          1022          1971          2431  #>   5649.455903     32.723050   2740.676624   7294.267083   -969.894105  #>          1369          1307          1506          1455          1581  #>  -5527.327918  -1591.505551    732.462677  -6089.697002  -1083.670450  #>          1598          1589          1270          2318          1226  #>   1574.293389   5728.806483   1266.014908  -1854.530467   -418.030544  #>          1972           903          2391           859          1469  #>   6924.209428    162.963598   1226.545599  -5534.552480   4157.614883  #>          2003           824          1819          1916          1898  #>  -3635.533624   -737.903685   -309.691867  -5050.676515   2996.879275  #>          1148          2167          1242          1206          1936  #>    294.966591   1049.439031   2386.567938   1182.409167  -3292.897121  #>          2262          1336          1162          2501          2507  #>  -2145.999968  -2319.034820  -1909.693271  -5545.113490  -1137.961807  #>          2434          2344          2390          1947          1709  #>   4584.873867  -6344.375162  -3711.844134   7590.860383    993.526367  #>          1706          1143          1141          1754          1138  #>  -6127.486575  -1271.073716  14448.729233  -4631.810758   3537.938232  #>          1646          1843          1291          1250          2356  #>   1718.528317    117.537305  -4416.189638  -7084.066679   1376.667282  #>          2301          2460          1144          2477          1878  #>   1876.688367  -4179.429703   3612.119235   5322.266994   4338.563165  #>          2043          2306          1930          2331          2264  #>  -7310.137185   2647.488337  -2390.062286   -404.525958   5968.510267  #>          2187          1033          1567          1376          1039  #>  -2151.725349   3760.803781  -2904.698134   5565.891861   5241.636545  #>           987          1187          1834          2408          2285  #>  -2412.096634   2797.793422  -6420.433019  -2894.822080  -4455.310265  #>          2351          1317          1729           878          1657  #>   8863.158379   1410.776744  -4668.305208   1279.316161   1512.215760  #>           939          1158          1150           812          1525  #>  -4616.282110  -7470.651246   -699.103239   4528.584264   2421.370676  #>          2174           891          2006          1103          1659  #>   4883.071953   -297.994636    674.929445    377.390336   9349.594585  #>          1486          1602          1462          2265           930  #>  -3891.442848  -4998.858882  -1933.307560    372.047123   3976.829557  #>          1391          1994          2362          1557          1063  #>   1339.640869   3110.275921   7528.044601  -6447.311358  -4436.226414  #>          1632          1619          1278          1808          1726  #>  -1619.341608   -153.620371  -1403.340281  -1763.281730   -452.132876  #>          2150          1331          2144          1977          1080  #>   1143.130378  -3480.417704  -6206.040258   6999.110602  -1309.451371  #>         10177          9814          9972          9967          8819  #>    147.670273  -7428.571011  -7239.356803  -1873.710812   -896.813275  #>         11461         11711          8986         11599         10250  #>   2593.153167   1308.185236   6648.694850  -2486.683223   1405.655648  #>          9306         11061         11146          9265         11762  #>   1325.511547   5238.872855   1410.392959   1724.069286    752.364125  #>         10020          9362          9930         11243         12167  #>   9043.520242  -6526.270223  -2870.814006  -1430.185435    441.770664  #>         10982         11544         11657          9132          9628  #>   -662.437747   3134.744659   2328.650444  -6121.685423  11290.220105  #>         11869         10387         10373          8955         10857  #>   1389.930658     54.686456  -2545.593352  -1349.540304  12501.611829  #>         11320         10178         11928          9237         10444  #>  -2447.181326 -17419.460509  -3095.995692  -3462.606718    915.720842  #>          9685         11596         10697          9809          9525  #>    525.134492   3701.980044  -2619.073294 -10982.616177   5557.784205  #>         12012         11355         10412          9701          9957  #>   6204.927312   6729.419571   -247.246709   6259.596020  -2479.276373  #>          9945         10244         10891         10396         10480  #>   2263.691811  48372.093476  13456.629469  26616.906610  16607.620495  #>         10194          8839         11910          9023          9560  #>  22235.350492   8047.544202   2125.445110   2452.996691   2319.721507  #>          9385          9616         11849         11117         11523  #>   -758.446488  -2152.115162  -1686.531164 -14301.490149   5361.419651  #>          8821          9914         10144          9652         10714  #>  -5139.097278   3297.009658  -9383.688870  -3128.328647  -9594.810763  #>          9444         11089         10741         10034          8923  #>  -6141.264376   1504.438375   -101.208676  -7816.641200  -8714.630888  #>         10180         10656         11803          9354          9098  #>   4222.335260  -6934.604350    138.352816   -263.271638  -4101.910075  #>          9155         10551          9821          8933         12046  #> -14783.303810 -15279.386375  -3641.822485   1801.145141  -9200.972515  #>          9179         11064          9263         10816         11854  #>   5767.206026  -8580.714871  -1358.901026  -3544.317937  -5904.685775  #>          9727          9742          9927         10504         12005  #>   3945.914163  -5069.788052   5389.817854   1020.044252  -3743.459698  #>         11242         10826         11138         11452         10246  #>  -1658.358546    109.707904  -3439.442395   2975.810813   4266.919379  #>          9588          8879         10100         10704         10983  #>   1007.532973  -7039.428324  -1364.546741  -4343.804027   2786.920319  #>          9365         11344          9310          9710          9050  #>    347.336758   3059.044171   3423.872050   2401.530663  -2502.458451  #>         10342          9593         10159         11693         10798  #>   1543.308370   -228.797933   9346.655442   -752.100405  -1810.385413  #>          9912          9236          8999          9347         11489  #>  -2257.524791  -7607.523475   1408.529926   7841.059853  -5759.999007  #>          8939         10768         11568         11983         11141  #>   1306.774052   6828.271218    373.821586  -4699.370979   2796.388778  #>         10426         10574         11270          8945         11057  #>  -2425.197082     30.384443    707.226670  -1316.537523  -1746.296766  #>         10460         11993          9948          8962         11241  #>  -3455.331330  -7406.873902  -4850.439565   5645.135897   1651.839412  #>         10275         10678         10613         10732          9953  #>  -3311.420040   3828.709744  -2834.051635  -3138.055016     32.210843  #>          9296          9129          8917         10050         11373  #>   2509.140766  -4801.965733   3639.919532   -254.816836   2519.827436  #>         10571         11601          8984          9400         11075  #>   1468.536264    441.467931    998.440623   -335.949428   1194.476251  #>          9268         10132         10490         10895          9554  #>  -1731.294524   6614.813240   -726.734176  -4108.440342   1548.318118  #>         10397          9623          9718          9174          9925  #>    977.670846  -1065.532278   1018.131597   2596.300014  -2758.171567  #>          9269         11187         11746          9323         10783  #>  -1782.723153   -945.376497  -3078.001476   1765.656936   4275.081130  #>         10663          9102          9085         11404         12101  #>  -1648.292481  -5238.242839   2958.476710  -1776.657453   2905.128195  #>         10367         10575         10659          9979         10258  #>  -2233.695453   1695.591746  -4852.717008  -1857.107769  -3472.908247  #>         11215         11221          9032         11960         11212  #>    808.220153    175.746794   5628.452939   2839.681914   -829.162185  #>          9576         11499         11000         11391          9559  #>   3161.028690  -1725.551294  -6156.283942  -3201.155950   3550.236750  #>          9187          9455         10938          9811         11982  #>   3508.137866   2101.924230   1554.567848  -1923.769700  -3037.164792  #>         11705         11235         10458         10985         11625  #>   -840.566578   2438.549340  -1402.833192   5527.717823  -2733.806802  #>         11441          9071         12182          8820          9311  #>     40.465106   -304.169480  -4542.983835   2919.694189   1783.936689  #>         11511         11925         10949          8870          8989  #>  -3870.126627   3972.132874   2828.778766   -749.317893  -2428.645985  #>          8907         11926         10805         11228         11552  #>   1682.991484   2002.783548   -343.964237  -2061.569058  -3589.941628  #>         11988         11924         10845         10221         10164  #>   -510.215612    726.002471   1183.158523   2386.629768  -3698.451247  #>          8990         10438         12177          8898          9956  #>  -1870.297580   1444.148766  -3189.609612  -1267.694853  -3249.426557  #>         11119          9259         11385         10472         11115  #>   1929.399464   4463.202705  -2321.364409   2153.660025   1383.700507  #>          9391         10318          9806          9496          9603  #>   4702.756497  -4157.722328    477.501242  -1107.395462   1172.950124  #>         11976          9290         10781         11247         11660  #>   5367.723418    273.358785  -3820.425530   4737.497466   1316.649336  #>         11686         11245         12197          9314          9822  #>  -1696.593143  -2285.273586    754.997358   1023.903897    319.191098  #>         10818         11673         11600          9539         11312  #>   2275.710131   3873.532915  -3499.458073   3119.160902   -752.314271  #>         10152          9543          9725          9441          8997  #>  -1324.614272  -3190.247297   1517.688307   1532.538754  -3666.718723  #>          9470          9599          9332         10716         12038  #>   3272.535890  -2053.451326  -4336.608443  -1311.749369   -281.134051  #>         11121         10384         11033          9653         10266  #>  -3364.022399  -2282.148441    142.771288  -3066.950399   4369.202437  #>         12054         10173         11459         11745          9621  #>  -1406.845224   8164.942163    328.469192   2619.282419    -61.425776  #>         11400         11724         10990         11464         11533  #>  -2051.406429   6078.720256   1479.889679   4857.890425    -82.153732  #>         11184         10245          8862         10352         12055  #>  -5530.529241   3819.584446     41.047420    906.499479   3895.020802  #>         11267          9196          9239         12052         10263  #> -12149.451769  -8935.320204   3733.630066   -945.339565    861.552025  #>          9080         11977          9650         10875          9799  #>  -1103.971945  -4540.179079   1730.623636  -3322.745245   1585.308879  #>          9421          9230         10578          9136          9257  #>   1213.959336   -490.068548  -4530.276843   2292.739558   -260.482763  #>          9991         11820          9776          9304         11760  #>   7524.722992  -2939.004061  -2819.459592   2565.953546  -2910.442147  #>         10959         11806         10035          9955         11313  #>  -3075.219942   4005.088339  -1941.864759   5277.090789  -6688.587690  #>         11343          9973         11702         10327         10635  #>  -4989.119997   5608.998087   1746.680522   2252.919030   1892.632814  #>         11832         11594         10370         10603          9475  #>  -2135.461406   -663.186869  -5171.471348  -2250.138394  -3584.284727  #>         10828         11011          9531         10851          9204  #>   -607.275934   3408.668749  -2935.786801   4044.509945   1003.343574  #>         10225         11195         11517         11013          9022  #>   -178.616157   4736.010597    271.828911   -612.472752  -2726.291067  #>          8875         11036          9712         12111         10793  #>  -1324.340683  -1316.844525   -523.975252   4483.241383   4367.128835  #>         11737          9573         10935          9639         11194  #>  -1468.424898  -3663.099373    274.553884  -4406.381034  -2635.192413  #>         10165          9031         11092          9882          9894  #>  -1408.013016   2939.945041  -4836.274940    -33.059109   6464.070008  #>         11018         10282         11741         11363         11575  #>  -3816.790783   6089.379511  -3034.560345   1166.131229   -524.761370  #>         10273          9772         15687         17545         14717  #>   1026.310972   3040.717835  -5011.432873   2154.493913   1794.311828  #>         15060         17725         16189         15752         17687  #>   3186.235004  -5511.912427   3031.742013   5059.762609   5613.306665  #>         14326         15530         15393         16553         18141  #>  -4635.073149   4552.262701   2189.633845 -17983.140237  -7660.013150  #>         17346         16330         17591         16567         16093  #>   1179.727510   2463.125820  -2924.088433  -3131.558876  -1341.517481  #>         14153         14737         15396         15526         17243  #>   3996.754427   1189.539416    473.790658   4659.793292   4333.029912  #>         15089         15551         16212         15767         16529  #>  -1661.052000  -7052.686795   -580.445514  -2239.449562   2459.740760  #>         16406         15430         16153         14782         17551  #>   2896.384176   -205.472314   1684.296159    245.449889   3326.411484  #>         15569         16666         14279         14838         16030  #>    151.012283  -2340.160588    165.977065   2650.598204   5072.655763  #>         17605         17513         16887         14126         17382  #>   -638.076518  -4052.605151  -5670.113480   -836.793813   4029.522153  #>         15111         15021         17809         16245         16899  #>  -2509.579902  -5637.216708  -3124.392264   1794.491197   5029.583997  #>         17481         17230         15348         18084         16215  #>    370.805046  -8835.537998     13.355904  -1408.576691    507.031854  #>         15876         17557         15770         17985         18037  #>   -392.306403  -2782.371950   8830.437956    669.136619  -6254.732834  #>         17894         17070         16275         17300         16101  #>   -200.658047   -321.279242  -1453.619064   2404.836239   1427.762194  #>         16752         15801         16410         15573         16796  #>   1041.599458  -2501.816907   6202.153800  -2156.386449  -5757.459620  #>         16983         15261         17991         17603         15892  #>   3690.907728   2902.532981  -1035.535429    284.903907   7597.178595  #>         17778         17363         16356         17960         14550  #>   1394.051847  -9950.638710   4496.745681   2499.251029  -4511.028745  #>         17458         17071         14251         14296         17433  #>  -3609.953403   3496.357738  -2268.038780  -2989.058595   2603.419514  #>         14463         18023         14212         17879         15595  #>   7515.300273   4365.017116  -6025.449443   5982.532722  -6400.378306  #>         17743         16656         17207         17881         15705  #>   2782.446521   -557.943114  -1088.091645   -257.890608  -2484.525513  #>         17826         15813         14746         14539         17386  #>   3867.589309  -1511.128535   3591.339197    628.635581   4737.455636  #>         18117         16398         15697         16512         16094  #>  -2123.944223  -5286.170573  -5021.020589  -1936.976598    435.953633  #>         16799         16766         15134         17415         14670  #>  -6626.298411   7073.850504   9582.033587   1193.332184  -2319.730382  #>         16949         17804         15367         14571         14118  #>  -4149.659502   1636.528135  -2384.480343  -8040.486925   1702.885796  #>         17723         17857         16450         16412         16176  #> -15369.049017  10976.640048   6543.430334  -7636.200175   5228.941019  #>         15839         16283         16542         14294         14761  #>   4200.982977   4541.641570    -85.933076  -2344.798690   5306.674341  #>         15545         16904         16448         17111         15746  #>  -2551.396012   4927.420952  -1715.677302   3096.323692   8467.810086  #>         16896         15187         17412         17594         17038  #>   3773.256467  -2017.377623   4749.463094  -1412.077499   -169.200411  #>         16313         18107         15541         15211         16982  #>  -4835.656402   -614.575220    629.587473   -294.644611  -1492.265189  #>         16280         15167         16551         16111         17767  #>    288.863773  -5072.133976  -2313.763666  -4769.086467   5368.927797  #>         16321         14104         14412         14527         17232  #>  -8828.601036  -2551.866897   7143.965404   3407.915270   -893.763120  #>         16698         15643         17929         16217         15076  #>   7977.641857  -2893.073132  -2485.952599   2457.258093   2935.395137  #>         15219         17720         16106         17099         18073  #>   8466.951382   2785.249686   -668.137572   5735.647739  -4015.753198  #>         16365         15164         17287         15181         15868  #>   8843.830859   3356.005107   8751.457603  -6105.980038  -1693.341796  #>         15046         16779         16797         17485         15124  #>   -390.927646   7452.450860   1343.957408   4698.109697    699.758072  #>         14509         16657         17254         17131         15672  #>  -2539.915190   5249.987036  -4140.960568   -878.497725  -1896.453550  #>         14894         15065         15910         16371         14702  #>   -109.454366  -1024.412226    630.002681    232.795899    935.778439  #>         15623         17352         14547         15288         18120  #>  -1166.438716   2599.954080 -12412.929523    589.386295 -12169.944417  #>         15378         17127         14768         15954         15271  #>  -6847.076136     26.922257   3526.305015  -4246.079958  -1665.014871  #>         14866         17209         16080         17941         15395  #>   4165.362084   5215.943516   3241.614380   -201.838914   1988.576584  #>         14956         15009         17827         15809         15090  #>   4379.976498  -4838.023420  -5398.888390  -2267.251836  -3060.313822  #>         15237         14295         17241         16304         16487  #>  -3249.139923  -6945.778384   4836.385055  -2236.920614  -2470.364216  #>         17837         14622         17704         17039         16205  #>  -4924.238080   2258.411562   4831.946218   -965.753903   2161.061128  #>         16002         17281         17657         17156         17543  #>  -4892.759355   -112.109700  -2085.446988   5680.487210  -3222.238989  #>         17538         17672         14333         16876         17197  #>   4874.192910    953.845282   2704.604513   1732.433720   2288.322798  #>         16329         14842         15727         16524         16635  #>  -2348.187651  -1910.836344    233.910627    519.451870  -4662.880036  #>         14573         14522         15983         15515         16198  #>  -1653.534724   -116.772290   7996.468532  -8463.934729  -1848.383490  #>         16174         14798         14677         16823         17866  #>  -4978.430505   -856.155773   4094.513474    682.904549  -1184.713362  #>         16034         15640         16102         17370         16183  #>  -1387.811675   2348.433615  -2033.350821   4414.222186    532.133870  #>         15665         14417         16764         14767         15890  #>    -62.553770  -3544.964570   2942.045340  -2348.712113   4242.563422  #>         14282         14394         17549         17921         14735  #>   2662.765434  -2583.513388    -98.720347  -3849.308856  -3324.230800  #>         17912         15554         16496         17624         16862  #>   1591.353463  -5679.398133   6762.096239   4227.144835  -1096.464682  #>         15282         15928         15511         14432         17527  #>  -2763.468374   3831.928926   -283.297602   1129.845940  -4026.742645  #>         17951         14559         16702         15691         14887  #>  -3318.290210   5196.817260  -3927.143246   3193.391595  -1005.362072  #>         17566         17599         16746         17121         16372  #>   4839.238815   2263.587112  -1908.786562   1483.905747   -665.120748  #>         16105         15810         16622         15079         16977  #>  -3117.835248  -6353.904977    968.234145  -5795.255438  -5721.034803  #>         15432         16962         16641         16375         15421  #>   1562.062394  -2635.787542   3457.664147   -600.616288   -101.328579  #>         15100         16873         17178         17247         18041  #>  -2232.057152 -10374.308463   1548.191221   2653.871655   3101.342989  #>         15581         17629         14731         17356         17546  #>  -2274.087851  11314.840233  -2892.410809   2312.304316   -561.299741  #>         17421         17635         15295         15674         15109  #>   5033.099181   1846.310940  -3944.903639   3614.460612    861.788293  #>         17764         14773         15478         14284         16314  #>  60517.796168   3519.473881   4144.801824  22647.261507   3159.433456  #>         16604         14178         16814         15807         14270  #>   4476.586056  -3926.767424  -7801.054804  -4226.588796   9379.450836  #>         15016         17216         18108         14499         14951  #>  -5617.142556  -1646.946734  -4948.517207  -4454.847529  -3436.459597  #>         16889         14166         15034         14651         16582  #>   -556.908906  -2932.802352  -9471.005335    553.399086  -4771.200796  #>         17777         14812         14910         16022         17153  #>  -6589.250998  -7293.708727  -1286.294898  -7805.909412    670.700589  #>         14633         17378         15206         17668         16173  #>   3396.370513   3692.289404   -262.773336  -1890.357673  -6441.564171  #>         15616         14513         17942         14516         17783  #>   3936.884744   2978.872950  -7475.365388   -662.878865  -2011.957440  #>         15766         17656         16436         16229         16326  #>   2085.503734  -2193.277243   5795.474117  -1012.373204   4758.899217  #>         17604         17418         17797         15897         16433  #>  -4883.320113   1635.329343   2641.902531   1326.072781   4142.087730  #>         16562         15180         17745         15977         17148  #>  -3365.290233   -117.144358  -6404.280713  -1494.780419  -2272.394558  #>         17899         15014         14836         14387         17313  #>   2657.004351  -5358.249041   1200.622668   1865.112072  -6428.812698  #>         15260         14248         16339         16359         15495  #>   5704.257430   -405.741548   2967.963271  -1164.005463    336.359626  #>         14156         14526         16624         15960         14456  #>    -17.518751   2311.099065   6283.634877   -165.939427   -865.866841  #>         15047         16112         16568         15538         15648  #>  -4199.814216   4335.164738    621.589913   9654.425454  -5335.789985  #>         17371         17196         14930         14708         17358  #>  -1236.740668   3478.016921   1183.614349  -3416.371648  -2646.330570  #>         17729         17943         15592         17284         17612  #>  -2563.499132  -1977.967824    746.336008 -11455.775841  -3003.018651  #>         15591         16926         16488         15520         15695  #>  -3896.345612  15806.375025  -2633.303654   -636.698197   2230.324305  #>         16906         16133         16680         14854         14198  #>  -2861.972619   1921.243097   2970.146115   -213.792375   1073.507093  #>         14436         16050         15188         14784         17262  #>  -2670.120607  -4121.198657    789.040252   3792.593453   3408.699447  #>         15578         17208         14233         18043          8684  #>    200.062444    145.631115  -7183.098517   -965.193024   4376.123921  #>          8490          8215          8173          8806          8698  #>  -8970.493299  -1561.142650   1333.211329 -11613.767405  -1304.415457  #>          7207          7801          7951          7369          7959  #>   3655.647131  12278.247228  -7538.824778   4460.267894   2738.835673  #>          7974          7712          8489          8470          8257  #>    978.956462   1268.027211   -868.000396    403.053417   1539.304250  #>          8415          8185          7440          7928          8401  #>   1113.091092   1060.473067  -4567.795497  58401.290040  36705.127495  #>          8793          7522          7823          7458          8792  #>  15464.830714  19171.427949  10347.168286 -11345.711545  -7290.610320  #>          8182          7506          8172          8305          8241  #>  -3543.789876   8382.014583   2562.359632  -2987.771979  -6345.925485  #>          7762          8383          7659          7860          7937  #>   2440.509824  -9750.603159  -6505.787072  -1411.739496   5129.914524  #>          7400          7358          7555          8131          7723  #>  -6373.150109   8332.622621  -7277.852915  -2471.435847  -9084.982058  #>          7175          7693          8283          7282          8585  #>    305.070741   -804.011007  13261.527820  -4983.275753   -369.041092  #>          7887          7368          8304          7151          8550  #>  -6510.585720   3837.024988  -4565.473327  -4332.432561  -8688.539835  #>          8743          8442          7415          8484          7608  #>  -7484.240967  -4362.523649  -1481.586744  -6673.791055  -3981.667697  #>          8524          7563          8503          7541          7347  #>  -6847.154264  -5463.686280  -2509.315332  -2498.752871  -6763.643846  #>          8019          8646          7310          7921          7198  #>   5575.753914   -316.069537  -6091.828403 -10644.254587   5028.121289  #>          7678          8054          7891          7201          8673  #>   6787.546376   5266.601803   3487.859556  -2564.110517  -7035.997644  #>          8030          7319          7834          8269          7656  #>   -892.536573  -1649.216320  -3640.171852  -1629.203896   2275.828224  #>          7324          8132          8548          8149          8695  #>   3501.386300   2315.740382   1883.080179  -4292.327924  -8300.561245  #>          7852          7225          7241          8794          7390  #>   3079.920370  -1075.567032  -1119.121844   1942.471691   2965.285207  #>          8779          8418          7278          7374          8116  #>  -1894.338393  -2871.348587   3617.367197   3681.840198  -1307.505350  #>          8668          7254          7618          7213          7917  #>    108.062333   -762.008654  15948.489166  -1250.003929    -95.833489  #>          7750          7216          7696          8652          7565  #>  -2790.782572  -1401.985359  -1519.779952   2193.694569  -5058.775805  #>          8554          8678          7460          8200          7174  #>  -1699.715278  -1559.344313   -476.463964   3797.181093  -2287.807871  #>          7370          8008          8660          8628          7579  #>   2468.942114  -1941.060858  -6210.084102    997.819357   -879.076822  #>          7551          7397          8535          8113          7614  #>    976.470885  -1601.717277    -83.924166    225.174773  -2857.797606  #>          8525          8584          7539          7545          8421  #>  -5311.036195   1193.359870   6024.645618   1281.989427   2467.003008  #>          7807          7277          7236          7802          8244  #>   -664.714758   3869.413106  -3398.330064   1540.861335   4114.889118  #>          7683          8193          8701          7583          7797  #>  -1428.334907   1425.201033  -3267.195072     27.068613   1075.419166  #>          7217          8370          7493          7900          7716  #>  -2372.213290  -2063.130777   -357.524992  -2413.475883     96.348391  #>          7269          8500          8683          7352          7455  #>  -2534.426977    936.463863  -3053.305238   2131.831014   4115.310572  #>          8015          8349          7816          8092          7463  #>   2111.725850  -2750.693961  -7426.238667    322.178049   4708.477471  #>          8192          8296          8681          7387          7655  #>  -3807.111745   1871.250169   -605.380062  -9897.059340   4326.124350  #>          7484          8483          8112          8583          7306  #>   3567.897142   -217.164088   1783.403605   1254.495532  -3342.418451  #>          8186          7361          8188          8776          8765  #>     -2.561163   1806.064037   2870.960595     57.751166  -3163.293989  #>          8265          7606         12499         12519         13355  #>   1009.159765  -4112.183090  -3609.820482    708.820258  -3682.170625  #>         13460         12220         13587         12670         14011  #>   -948.220409   -502.015108   7261.675915  -1372.106676   3491.227593  #>         12498         13400         13730         12435         12271  #>   3791.994795   1242.817276  -4118.484276  -1455.709738    800.360374  #>         12204         13659         13451         13097         13072  #>   -941.755632  -1456.255299  -3135.712573  13475.709539  10701.294338  #>         13364         12485         14070         12355         13525  #>  12320.882730  -1674.553207   5233.389035  -3503.935317  -2708.627223  #>         13592         12819         12929         13781         13706  #>   8965.096030   4780.082280  -5811.249514   1444.451941  -6054.779425  #>         13073         12884         14064         13412         13229  #>   1030.500212  -1466.958212   1325.383077   -115.228602  14115.614289  #>         12641         13345         12521         13971         13873  #>   2657.865671  -4198.067191   7424.184510  -3344.545268   -574.291079  #>         14006         13504         13623         12280         13863  #>  -2226.970316   -415.916256    -98.067327   -938.907921  -2707.587196  #>         13784         12847         13134         12292         13107  #>  -4932.052635  -3248.434387  -2298.636504    350.504161   3011.939421  #>         13663         12541         12544         13972         12323  #>   3908.231914   -570.513821   4533.878167  -3523.394601  -3545.071180  #>         12506         13802         13657         12676         13026  #>  -3034.122988  -3938.759978   -116.611316  -5841.494457  -3258.627118  #>         12552         14025         12917         13805         12467  #>  -3727.770860  -3643.682542  -8539.495791    589.605904  -1959.689487  #>         13727         13960         12440         12668         13669  #>   -145.117308   6050.054162    -29.679671   1147.844715    -73.385451  #>         12744         13932         13304         12860         13410  #>   7498.438592  -5154.470440  -4401.643989   4994.513478   8920.160027  #>         13740         13829         12566         12226         12903  #>   1011.719740  -7379.475237  -3142.786980   9006.455426  -5423.204656  #>         13415         12721         12526         12284         13593  #>   6044.010785   -480.036090  -4304.629453  -3209.936181  -6788.173704  #>         13237         13335         13930         13330         12354  #>   -479.478836   -429.992269  -3620.910239   1242.412066    695.004772  #>         13479         13203         13422         13480         12408  #>    569.514823   3569.081870  -1664.216449  -2572.545499   2115.008838  #>         12912         13036         13148         12951         13366  #>  -2431.706183   -774.616622  -1534.368623  -2458.767632   7224.716735  #>         13205         14027         13601         12558         12948  #>  -2549.394748   5400.604852  -1927.815040  -1043.214676    869.930334  #>         13315         13869         13754         14014         13676  #>   2962.346348 -12283.948613   3130.284609   2911.030247  -1843.376232  #>         13081         13114         12629         13098         13370  #>  -1526.046430    209.964471  11208.067888   9563.999533  -3527.055145  #>         12701         13874         13913         12883         13538  #>  -5038.247080   -827.147980  -2418.278803  -2467.474998    864.022457  #>         12852         13372         12208         13537         13747  #>   -845.592782   3567.954712  -2128.852726   1341.373758   4822.882963  #>         13417         13096         13895         13003         13691  #>   2055.003479  -5091.911766   4601.921313    115.458886   3890.365815  #>         12839         13289         13683         13697         12780  #>  -1546.644245   2291.925774    -49.583537  -1901.550867   -808.138966  #>         13405         12334         13236         12245         12438  #>  -4041.881983  -3453.970859  -1094.568314  -4108.174907  -7209.962293  #>         14081         13300         13210         12719         12745  #>   6572.339837    616.833610  -2236.276116   -857.978366   -789.255352  #>         13214         12770         13862         12812         12663  #>   -530.966240    809.113795  -4923.837889  -2827.896181   1432.117380  #>         12980         12889         12484         13590         13047  #>   2983.126484   2918.711353  -3689.506843   -563.676148   2113.413320  #>         13102         12809         13216         12657         13524  #>   -116.321135   2563.989065  12229.107927  -1092.819548  -3404.627527  #>         12873         13981         12601         13542         13644  #>   7155.858838  -8368.165829    223.693722    -56.839985   1300.204724  #>         13263         12611         12970         13363         13746  #>     91.086544   -183.382095  -2742.216609     12.777860  -5467.428918  #>         12619         12845         12844         13273         12764  #>   1238.611720  -3639.547561   -209.840297    316.219188  -2875.147972  #>         24339         24478         24485         24843         24682  #>  -1295.570635  -3263.143682  -5660.674102   3869.731935  -2190.753657  #>         24367         24217         24078         24276         24416  #>  -3226.898547  -1843.257495   3593.831076   2908.238028  -3432.248245  #>         24628         24517         24844         24327         24981  #>  -2008.280459  -2099.742951   1499.864462    722.200508    992.302285  #>         24631         24716         24761         24354         24240  #>   3534.238288   2511.552921   7515.738289   3535.519592   8352.249962  #>         24647         24757         24231         24899         24398  #>   8895.449812   3615.441505   8135.601832   -480.942959  20447.921078  #>         24248         24274         24528         24812         24257  #>   1547.022189   9916.474151   8660.601274  13618.315090    446.487563  #>         24636         24880         24114         24876         24765  #>  -2203.834124   3297.310592   -807.323220  -5884.022059  -4221.712382  #>         24611         24376         24629         24476         24709  #>  -8152.633301  -7884.386876  -3182.328786   1627.599855  -6153.704246  #>         24389         24973         24999         24491         24132  #>   1969.960710  -3919.446161  -5469.432430  -9572.181845  -9255.062936  #>         24686         24352         24034         24625         24130  #>  -2778.208962   -238.262278  -1141.804630   -508.679127  -2620.325364  #>         24211         24787         24545         24410         24154  #>  -6294.654049  -4175.383122   3035.575238   1520.385164   3966.845425  #>         24298         24856         24346         24074         24355  #>  -4468.941474   1683.806592   -612.546318   5880.881790   8613.086510  #>         24914         24887         24770         24309         24035  #>   1919.175393    728.391490  -1616.730560  -5919.705818    526.987343  #>         24305         24987         24282         24639         24449  #>   3797.149221  -5172.151876  -2780.983254  -2466.948622   2902.553298  #>         24548         24432         24041         24764         24758  #>  -1919.973617  -3560.468195  -1541.595326  -1460.129494   -727.406742  #>         24726         24382         24780         24379         24081  #>     75.314773   2125.221738   7039.356241  -4324.136363   -493.175451  #>         24549         24359         24729         24604         24392  #>   8576.779118   1029.758087   2886.590216  -3459.942339   2600.014937  #>         24453         24662         24277         24236         24455  #>    578.245893  -1874.605418    501.979052   -170.946093   2552.195869  #>         24505         24529         24118         24017         24417  #> -10524.639072   1822.267489   -679.088971   1857.166624  -1359.751758  #>         24730         24396         24247         24296         24384  #>   -653.419982    640.066060  -3684.733845  -1245.459415  -4717.826252  sigma(model1) #> [1] 5643.841 # }"},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"function enables use Mixed Effects Random Forests (MERFs) applications Small Area Estimation (SAE). Unit-level survey data target auxiliary covariates required produce reliable estimates various disaggregated economic inequality indicators. Option meanOnly saves computational time users interested estimation domain-specific means using unit-level aggregated auxiliary data. Predefined indicators include mean, median, quantiles (10%, 25%, 75% 90%), head count ratio, poverty gap, Gini-coefficient quintile share ratio. MERF algorithm algorithmic procedure reminiscent EM-algorithm (see Details). Overall, function serves coherent framework estimation point estimates requested uncertainty estimates indicators. Methodological details found Krennmair & Schmid (2022) Krennmair et al. (2022b). following examples showcase potential applications.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"","code":"SAEforest_model(   Y,   X,   dName,   smp_data,   pop_data,   MSE = \"none\",   meanOnly = TRUE,   aggData = FALSE,   smearing = TRUE,   popnsize = NULL,   importance = \"impurity\",   OOsample_obs = 25,   ADDsamp_obs = 0,   w_min = 3,   B = 100,   B_adj = 100,   B_MC = 100,   threshold = NULL,   custom_indicator = NULL,   initialRandomEffects = 0,   ErrorTolerance = 1e-04,   MaxIterations = 25,   na.rm = TRUE,   ... )"},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"Y Continuous input value target variable. X Matrix data.frame predictive covariates. dName Character specifying name domain identifier, random intercepts modeled. smp_data data.frame survey sample data including specified elements Y X. pop_data data.frame unit-level population covariate data X. Please note column names predictive covariates must match column names smp_data. holds especially name domain identifier. MSE Character input specifying type uncertainty estimates. Available options : () \"none\" point estimates requested, (ii) \"nonparametric\" following MSE bootstrap procedure proposed Krennmair & Schmid (2022) Krennmair et al. (2022a) aggData = TRUE. (iii) \"wild\" nonlinear indicators proposed Krennmair et al. (2022b). Defaults \"none\". meanOnly Logical. Calculating domain-level means . Defaults TRUE. aggData Logical input indicating whether aggregated covariate information unit-level covariate information used domain-level means. Defaults FALSE, assuming unit-level covariate data. smearing Logical input indicating whether smearing based approach Monte Carlo (MC) version point estimates obtained estimate (nonlinear) indicators. MC used computational constraints prohibit smearing approach. theoretical details see Krennmair et al (2022b). Defaults TRUE. popnsize data.frame, comprising information population size domains. needed aggData = TRUE MSE requested. Please note name domain identifier must match column name smp_data. importance Variable importance mode processed random forest ranger. Must 'none', 'impurity', 'impurity_corrected' 'permutation'. concept variable importance needed production generic plots plot. estimation domain-level means aggregated covariate  data, variable importance needed rank information process finding suitable calibration weights (Krennmair et al., 2022b). information regarding measures importance see ranger. OOsample_obs Number --sample observations taken closest area potentially unsampled areas. needed aggData = TRUE defaults 25. ADDsamp_obs Number --sample observations taken closest area first iteration calculation calibration weights fails. needed aggData = TRUE defaults 0. w_min Minimal number covariates informative weights calculated. needed aggData = TRUE. Defaults 3. B Number bootstrap replications MSE estimation procedures. Defaults 100. B_adj Number bootstrap replications adjustment residual variance proposed Mendez Lohr (2001). Defaults 100. B_MC Number bootstrap populations MC version point estimates (nonlinear) indicators. Defaults 100. threshold Set custom threshold indicators, head count ratio. threshold can known numeric value function Y. threshold NULL, 60 % median Y taken threshold. Defaults NULL. custom_indicator list additional functions containing indicators calculated. functions must depend target variable Y optionally threshold. Defaults NULL. initialRandomEffects Numeric value vector initial estimates random effects. Defaults 0. ErrorTolerance Numeric value monitor MERF algorithm's convergence. Defaults 1e-04. MaxIterations Numeric value specifying maximal amount iterations MERF algorithm. Defaults 25. na.rm Logical. Whether missing values removed. Defaults TRUE. ... Additional parameters directly passed random forest ranger. important parameters instance mtry (number variables possibly split node), num.trees (number trees). details possible parameters see ranger example .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"object class SAEforest includes point estimates disaggregated indicators well information MERF-model. Optionally corresponding MSE estimates returned. Several generic functions methods returned object class SAEforest. full list explanation components possibilities objects class SAEforest, see SAEforestObject.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"MERFs combine advantages regression forests (implicit model-selection robustness properties) ability model hierarchical dependencies. MERF algorithm iteratively optimizes two separate steps: ) random forest function, assuming random effects term correct b) estimates random effects part, assuming OOB-predictions forest correct. Overall convergence algorithm monitored log-likelihood joint model components. details see Krennmair Schmid (2022). Users interested estimation domain-level means set meanOnly = TRUE. MERF requires covariate micro-data. function, however also allows use aggregated covariate information, setting aggData = TRUE. Aggregated covariate information adaptively incorporated calibration-weights based empirical likelihood estimation area-level means. See methodological details Krennmair et al. (2022a) estimation (nonlinear) poverty indicators /quantiles, need information area-specific cumulative distribution function (CDF) Y. Krennmair et al. (2022b) propose smearing approach originated Duan (1983). Alternatively, Monte-Carlo methods used simulate domain-specific CDF Y. estimation MSE, bootstrap population built based bias-corrected residual variance discussed Krennmair Schmid (2022). bootstrap bias correction follows Mendez Lohr (2011). Note MERFmodel object composition elements random forest class ranger random effects model class merMod. Thus, generic functions applicable corresponding objects. details generic functions see ranger lmer well examples .","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"Duan, N. (1983). Smearing Estimate: Nonparametric Retransformation Method. Journal American Statistical Association, 78(383), 605–610. Krennmair, P., & Schmid, T. (2022). Flexible Domain Prediction Using Mixed Effects Random Forests. Journal Royal Statistical Society: Series C (Applied Statistics) (forthcoming). Krennmair, P., & Würz, N. & Schmid, T. (2022a). Analysing Opportunity Cost Care Work using Mixed Effects Random Forests Aggregated Census Data. Krennmair, P., & Schmid, T & Tzavidis, Nikos. (2022b). Estimation Poverty Indicators Using Mixed Effects Random Forests. Working Paper. Mendez, G., & Lohr, S. (2011). Estimating residual variance random forest regression. Computational Statistics & Data Analysis, 55 (11), 2937–2950.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/SAEforest_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main function for the estimation of domain-level (nonlinear) indicators with MERFs — SAEforest_model","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[,-c(1, 16, 17, 18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_pop)  # SAEforest generics: summary(model1) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                        500 #> Number of independent variables:         14 #> Mtry:                                     3 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                      0.6194 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39230.0  39241.2 -19613.0  39226.0     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -2.8372 -0.5168 -0.0582  0.4498 11.8252  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept) 13199086 3633     #>  Residual             30763720 5547     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.300233  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 12 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                                                         #>  0 -19536.93 -19579.36 -19607.21 -19593.28 -19598.86 -19595.91 -19597.98 #>                                                   #>  -19609.78 -19604.05 -19607.3 -19611.31 -19613.01  # Example 2: # Calculating point + MSE estimates for aggregated covariate data and passing # arguments to the random forest. # Note that B is unrealistically low to improve example speed  # remove factor for gender X_covar <- X_covar[,-1] model2 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_popAgg,                           MSE = \"nonparametric\", popnsize = popNsize,B = 5, mtry = 5,                           num.trees = 100, aggData = TRUE) #> Calculation of weights failed for area: Eisenstadt (Stadt) #> Calculation of weights failed for area: Melk #> Calculation of weights failed for area: Rust (Stadt) #> Calculation of weights failed for area: Schärding #> Calculation of weights failed for area: Villach (Stadt) #> Calculation of weights failed for area: Wels (Stadt) #> Calculation of weights failed for area: Wiener Neustadt (Stadt) #> Error SD Bootstrap started: #> Bootstrap with 5 rounds started  # SAEforest generics: summary(model2) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_popAgg, MSE = \"nonparametric\",  #>     aggData = TRUE, popnsize = popNsize, B = 5, mtry = 5, num.trees = 100) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #>  #>                Min. 1st Qu. Median     Mean 3rd Qu. Max. #> Sample_domains   14      17   22.5 27.78571      29  200 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                        100 #> Number of independent variables:         13 #> Mtry:                                     5 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                     0.65625 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39121.1  39132.3 -19558.6  39117.1     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -4.4572 -0.4982 -0.0515  0.4409 12.3388  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept)  8800183 2967     #>  Residual             29427423 5425     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.2302049  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 6 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                                              #>  0 -19551.04 -19519.8 -19536.83 -19580.59 -19559.76 -19558.57 summarize_indicators(model2, MSE = TRUE, CV = TRUE) #> Warning: For objects of class SAEforest_mean or SAEforest_meanAGG, only results for the Indicator \"Mean\" are reported #> Indicator/s: Mean #>                         district     Mean   Mean_MSE    Mean_CV #> 1                      Amstetten 13989.57   490055.3 0.05004010 #> 2                          Baden 21714.35   345089.8 0.02705323 #> 3                        Bludenz 11669.22   815831.4 0.07740307 #> 4                 Braunau am Inn 12563.20   985622.0 0.07902323 #> 5                        Bregenz 33651.10  7244896.4 0.07998654 #> 6            Bruck an der Leitha 22859.49  1906173.3 0.06039689 #> 7             Bruck-Mürzzuschlag 25045.99  1613092.2 0.05070975 #> 8               Deutschlandsberg 24013.27  3359620.3 0.07632973 #> 9                       Dornbirn 19141.12   634348.6 0.04160989 #> 10                      Eferding 13490.37 17571954.7 0.31073220 #> 11            Eisenstadt (Stadt) 29259.14  3059389.5 0.05977999 #> 12           Eisenstadt-Umgebung 22696.82 23818877.3 0.21502830 #> 13                     Feldkirch 17533.40   641255.9 0.04567196 #> 14                   Feldkirchen 14243.13 20855073.6 0.32062721 #> 15                     Freistadt 16832.39  3212714.0 0.10648543 #> 16                       Gmunden 19327.28   387363.5 0.03220243 #> 17                         Gmünd 13227.65  1843655.3 0.10264957 #> 18                  Graz (Stadt) 18026.50   181120.5 0.02360872 #> 19                 Graz-Umgebung 35485.08  1114387.0 0.02974899 #> 20                  Grieskirchen 15591.86  3923750.7 0.12704361 #> 21                   Gänserndorf 20233.98   608783.2 0.03856115 #> 22                       Güssing 18219.57  5243723.2 0.12568451 #> 23                       Hallein 17368.03  2001680.8 0.08146046 #> 24          Hartberg-Fürstenfeld 12220.72  3500759.2 0.15310327 #> 25                      Hermagor 11997.48 21845324.7 0.38957338 #> 26                    Hollabrunn 16488.67  2274413.2 0.09146377 #> 27                          Horn 13513.73 14371446.9 0.28052714 #> 28                          Imst 14313.41  1991189.2 0.09858553 #> 29              Innsbruck (Land) 27281.69  1743230.6 0.04839562 #> 30             Innsbruck (Stadt) 17486.42   316995.2 0.03219775 #> 31                   Jennersdorf 12083.06 11445280.1 0.27998587 #> 32        Kirchdorf an der Krems 16147.12  1336172.3 0.07158735 #> 33                     Kitzbühel 14118.24  3035343.9 0.12340237 #> 34             Klagenfurt (Land) 21545.04   950802.3 0.04525826 #> 35            Klagenfurt (Stadt) 32577.89  1783885.9 0.04099780 #> 36                    Korneuburg 25513.09  1423326.6 0.04676159 #> 37                  Krems (Land) 15159.43  5645674.6 0.15673832 #> 38    Krems an der Donau (Stadt) 18211.24 40189859.2 0.34811176 #> 39                      Kufstein 19734.18  1613470.7 0.06436673 #> 40                       Landeck 12895.91  3655459.9 0.14825830 #> 41                      Leibnitz 15480.82  1134961.0 0.06881712 #> 42                        Leoben 19266.02   725834.5 0.04422081 #> 43                         Lienz 11567.56   295720.0 0.04701092 #> 44                        Liezen 12398.64   745221.5 0.06962554 #> 45                    Lilienfeld 13099.39  4689741.1 0.16531917 #> 46                  Linz (Stadt) 22191.83   196776.6 0.01998912 #> 47                     Linz-Land 26666.71   537609.7 0.02749565 #> 48                   Mattersburg 20182.71  2358265.4 0.07608811 #> 49                          Melk 12797.63   661969.2 0.06357543 #> 50                    Mistelbach 20122.22  1045310.8 0.05080972 #> 51                         Murau 11720.78  4509311.8 0.18117507 #> 52                        Murtal 18837.40  2897895.9 0.09036919 #> 53                       Mödling 41041.33   456468.7 0.01646206 #> 54                   Neunkirchen 15513.57   549033.1 0.04776254 #> 55               Neusiedl am See 18722.78   896411.4 0.05056889 #> 56                Oberpullendorf 17135.40  3042297.4 0.10179035 #> 57                      Oberwart 12319.94   578662.8 0.06174532 #> 58                          Perg 19238.99  1654743.7 0.06686258 #> 59                        Reutte 18715.13   838873.9 0.04893904 #> 60              Ried im Innkreis 13819.70  1305070.3 0.08266439 #> 61                      Rohrbach 13214.51   626015.3 0.05987442 #> 62                  Rust (Stadt) 16169.04 11531594.4 0.21001990 #> 63              Salzburg (Stadt) 20176.73   471321.1 0.03402575 #> 64             Salzburg-Umgebung 28978.03  1095142.3 0.03611324 #> 65        Sankt Johann im Pongau 13359.09  2497132.2 0.11828889 #> 66           Sankt Pölten (Land) 16972.50   434094.9 0.03881919 #> 67          Sankt Pölten (Stadt) 16909.34  3428732.3 0.10950654 #> 68        Sankt Veit an der Glan 14823.96  1242276.7 0.07518738 #> 69                      Scheibbs 13203.73  8212559.3 0.21704137 #> 70                        Schwaz 15616.10   508276.5 0.04565386 #> 71                     Schärding 10895.66  1194732.1 0.10031864 #> 72           Spittal an der Drau 13108.23   464221.9 0.05197790 #> 73                 Steyr (Stadt) 19732.15 15833995.3 0.20166050 #> 74                    Steyr-Land 25039.72  1741425.5 0.05270150 #> 75              Südoststeiermark 13628.87  4540429.6 0.15634670 #> 76                       Tamsweg 16460.57  5508178.7 0.14258020 #> 77                         Tulln 20917.47   297062.4 0.02605642 #> 78               Urfahr-Umgebung 39281.85  3955057.5 0.05062727 #> 79               Villach (Stadt) 22374.63  2624585.1 0.07240600 #> 80                  Villach Land 18924.25 12582657.9 0.18744227 #> 81                     Voitsberg 17198.13  1706012.4 0.07594685 #> 82                   Vöcklabruck 18317.51   454417.4 0.03680112 #> 83                   Völkermarkt 15446.45  1416494.9 0.07705112 #> 84        Waidhofen an der Thaya 11637.00  9479928.1 0.26458278 #> 85 Waidhofen an der Ybbs (Stadt) 16844.72  3253745.7 0.10708482 #> 86                          Weiz 15425.46   683416.7 0.05359257 #> 87                  Wels (Stadt) 13940.97   765052.7 0.06274118 #> 88                     Wels-Land 23668.03 13504654.4 0.15526716 #> 89                          Wien 20696.43   363623.3 0.02913603 #> 90        Wiener Neustadt (Land) 20629.08   350088.8 0.02868199 #> 91       Wiener Neustadt (Stadt) 14423.11  2633282.2 0.11250966 #> 92                     Wolfsberg 17223.68  1608225.0 0.07362875 #> 93                   Zell am See 10076.79  1095964.4 0.10389058 #> 94                        Zwettl 11334.82 18496078.5 0.37942435  # Example 3: # Calculating point + MSE estimates and passing arguments to the forest. # Two additional custom indicators and the threshold is defined as a custom function of Y. # Note that B is unrealistically low to improve example speed.  model3 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\", smp_data = eusilcA_smp,                           pop_data = eusilcA_pop, meanOnly = FALSE, MSE = \"nonparametric\",                           B = 5, mtry = 5, num.trees = 100, threshold = function(Y){0.5 *                           median(Y)}, custom_indicator = list(my_max = function(Y,                           threshold){max(Y)}, mean40 = function(Y, threshold){                           mean(Y[Y<=quantile(Y,0.4)])}), smearing = FALSE) #> Error SD Bootstrap started: #> MSE Bootstrap with 5 rounds started:  # SAEforest generics: summary(model3) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop, MSE = \"nonparametric\",  #>     meanOnly = FALSE, smearing = FALSE, B = 5, threshold = function(Y) { #>         0.5 * median(Y) #>     }, custom_indicator = list(my_max = function(Y, threshold) { #>         max(Y) #>     }, mean40 = function(Y, threshold) { #>         mean(Y[Y <= quantile(Y, 0.4)]) #>     }), mtry = 5, num.trees = 100) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                        100 #> Number of independent variables:         13 #> Mtry:                                     5 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                     0.66844 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39083.5  39094.6 -19539.7  39079.5     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -4.0682 -0.5170 -0.0513  0.4268 12.1747  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept)  7689148 2773     #>  Residual             28970242 5382     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.2097457  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 4 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                           #>  0 -19519.14 -19541.96 -19537.78 -19539.73 summarize_indicators(model3, MSE = FALSE, CV = TRUE, indicator = c(\"Gini\", \"my_max\", \"mean40\")) #> Indicator/s: Gini #>  Indicator/s: my_max #>  Indicator/s: mean40 #>                         district      Gini    Gini_CV    my_max my_max_CV #> 1                      Amstetten 0.2496166 0.06139391  53367.94 0.5124650 #> 2                          Baden 0.1821222 0.07004379  69365.94 0.3929977 #> 3                        Bludenz 0.2836343 0.10597374  45119.26 0.2913200 #> 4                 Braunau am Inn 0.2769782 0.07798593  53789.77 0.5638769 #> 5                        Bregenz 0.1623321 0.07778439  82887.97 0.1120534 #> 6            Bruck an der Leitha 0.1786187 0.07669723  69086.14 0.1365179 #> 7             Bruck-Mürzzuschlag 0.1668700 0.09485270  71669.91 0.2235948 #> 8               Deutschlandsberg 0.1897958 0.08023022  57235.93 0.1824685 #> 9                       Dornbirn 0.2181016 0.06908320  56893.75 0.3678049 #> 10                      Eferding 0.2345167 0.18489711  42421.92 0.6557794 #> 11            Eisenstadt (Stadt) 0.1910494 0.17611874  68312.35 0.1181623 #> 12           Eisenstadt-Umgebung 0.2009430 0.12954595  58555.45 0.1984942 #> 13                     Feldkirch 0.2317475 0.10229294  59428.59 0.3881409 #> 14                   Feldkirchen 0.2446526 0.18556621  40754.56 0.2536565 #> 15                     Freistadt 0.2154424 0.12854458  53101.29 0.4965489 #> 16                       Gmunden 0.1999884 0.09455086  61906.52 0.2955842 #> 17                         Gmünd 0.2561330 0.29310131  39789.79 0.5867452 #> 18                  Graz (Stadt) 0.2176966 0.06736820  76946.33 0.1984235 #> 19                 Graz-Umgebung 0.1861077 0.16841540  95132.01 0.2606042 #> 20                  Grieskirchen 0.2167425 0.10161904  52493.09 0.2587489 #> 21                   Gänserndorf 0.1995323 0.10132979  61202.70 0.4011403 #> 22                       Güssing 0.2331344 0.08623459  42441.73 0.3973735 #> 23                       Hallein 0.2258108 0.12961906  51111.93 0.3519029 #> 24          Hartberg-Fürstenfeld 0.2645503 0.07211716  55098.67 0.3520621 #> 25                      Hermagor 0.2523298 0.16283129  33864.60 0.7615479 #> 26                    Hollabrunn 0.2223246 0.11138456  48751.66 0.4628220 #> 27                          Horn 0.2338976 0.19230341  43554.09 0.3160812 #> 28                          Imst 0.2377699 0.08142345  46086.11 0.2619329 #> 29              Innsbruck (Land) 0.2040890 0.08602366  77048.75 0.1486210 #> 30             Innsbruck (Stadt) 0.2065810 0.10692276  60773.36 0.4932663 #> 31                   Jennersdorf 0.2494483 0.17889506  34599.53 0.1609961 #> 32        Kirchdorf an der Krems 0.2325506 0.09950261  50549.39 0.5055384 #> 33                     Kitzbühel 0.2505483 0.11280844  45226.13 0.4784815 #> 34             Klagenfurt (Land) 0.1825540 0.08386088  57705.76 0.3781472 #> 35            Klagenfurt (Stadt) 0.1639245 0.06938104  81294.83 0.3479100 #> 36                    Korneuburg 0.1603203 0.08917155  63771.42 0.3168946 #> 37                  Krems (Land) 0.2391255 0.08436111  50278.43 0.2209006 #> 38    Krems an der Donau (Stadt) 0.2199381 0.11800657  40318.15 0.3457054 #> 39                      Kufstein 0.1847680 0.07407301  58083.20 0.2491800 #> 40                       Landeck 0.2615573 0.07132085  38413.82 0.7690219 #> 41                      Leibnitz 0.2315831 0.11104392  53370.41 0.4808914 #> 42                        Leoben 0.1927015 0.12717968  58604.30 0.2134696 #> 43                         Lienz 0.2608947 0.12025133  45782.32 0.4455413 #> 44                        Liezen 0.2734132 0.13385868  53213.01 0.4873165 #> 45                    Lilienfeld 0.2443897 0.19718093  42680.27 0.7047444 #> 46                  Linz (Stadt) 0.1866490 0.07613662  76815.99 0.1997204 #> 47                     Linz-Land 0.1685493 0.04476869  77998.89 0.2628937 #> 48                   Mattersburg 0.2068680 0.18340054  52645.18 0.2048766 #> 49                          Melk 0.2735880 0.08773104  48230.46 0.2642358 #> 50                    Mistelbach 0.2036992 0.12599481  60321.48 0.1358387 #> 51                         Murau 0.2529370 0.14983048  35311.93 0.3188117 #> 52                        Murtal 0.2150873 0.07773061  53926.56 0.4617912 #> 53                       Mödling 0.1496726 0.19444333  87746.94 0.1476431 #> 54                   Neunkirchen 0.2167925 0.13399309  56766.39 0.3887731 #> 55               Neusiedl am See 0.2056638 0.09013821  54394.24 0.2373192 #> 56                Oberpullendorf 0.2331675 0.21982944  46670.48 0.5692763 #> 57                      Oberwart 0.2583104 0.14040406  47608.62 0.5629113 #> 58                          Perg 0.2127375 0.09274623  53158.31 0.1649124 #> 59                        Reutte 0.1984683 0.10557539  43351.78 0.2284484 #> 60              Ried im Innkreis 0.2474063 0.12518031  50045.91 0.3044791 #> 61                      Rohrbach 0.2188741 0.12589123  48102.63 0.2523869 #> 62                  Rust (Stadt) 0.2697352 0.18642302  23357.17 0.1908323 #> 63              Salzburg (Stadt) 0.1932685 0.07948163  68674.85 0.1591554 #> 64             Salzburg-Umgebung 0.1679929 0.09598427  89310.34 0.1694144 #> 65        Sankt Johann im Pongau 0.2453427 0.09941047  53633.28 0.2670028 #> 66           Sankt Pölten (Land) 0.2298954 0.08762768  62305.47 0.2294852 #> 67          Sankt Pölten (Stadt) 0.2221361 0.16899913  49775.06 0.5028214 #> 68        Sankt Veit an der Glan 0.2455244 0.10072608  51492.05 0.3967974 #> 69                      Scheibbs 0.2480215 0.19712089  42353.38 0.3760305 #> 70                        Schwaz 0.2298244 0.15086416  52413.72 0.2150530 #> 71                     Schärding 0.3029931 0.08659790  43510.19 0.3755736 #> 72           Spittal an der Drau 0.2589875 0.07263732  58545.46 0.2843762 #> 73                 Steyr (Stadt) 0.2144196 0.28573383  47224.17 0.5252292 #> 74                    Steyr-Land 0.1730117 0.09023882  57873.40 0.4890363 #> 75              Südoststeiermark 0.2509470 0.06872722  55264.52 0.4612891 #> 76                       Tamsweg 0.2162900 0.10130196  40879.56 0.1156401 #> 77                         Tulln 0.2054317 0.08278396  61652.68 0.1982365 #> 78               Urfahr-Umgebung 0.1443740 0.15581748  89357.50 0.1001912 #> 79               Villach (Stadt) 0.1941162 0.11158736  60944.94 0.1558012 #> 80                  Villach Land 0.2069803 0.07776880  56018.43 0.2372981 #> 81                     Voitsberg 0.2100369 0.12259307  48686.29 0.5232139 #> 82                   Vöcklabruck 0.2111293 0.05842563  63596.83 0.2556668 #> 83                   Völkermarkt 0.2349521 0.10301081  47016.00 0.2725515 #> 84        Waidhofen an der Thaya 0.2660027 0.15929675  35849.69 0.1811430 #> 85 Waidhofen an der Ybbs (Stadt) 0.2109265 0.26315102  35962.63 0.1605012 #> 86                          Weiz 0.2452848 0.08436544  51603.52 0.3177342 #> 87                  Wels (Stadt) 0.2408120 0.09499697  47470.60 0.2739218 #> 88                     Wels-Land 0.2001741 0.08472676  59415.56 0.2160322 #> 89                          Wien 0.2447866 0.05381822 109676.70 0.2103532 #> 90        Wiener Neustadt (Land) 0.2057335 0.09337493  57415.41 0.2618388 #> 91       Wiener Neustadt (Stadt) 0.2105591 0.09349449  45909.63 0.2722959 #> 92                     Wolfsberg 0.2332638 0.09679308  50785.10 0.2186416 #> 93                   Zell am See 0.2933377 0.02306185  45910.49 0.3219887 #> 94                        Zwettl 0.2677241 0.11152893  45474.82 0.5364367 #>       mean40  mean40_CV #> 1   8104.170 0.02902325 #> 2  15735.431 0.02839009 #> 3   6234.411 0.22953106 #> 4   6253.489 0.25399596 #> 5  23840.219 0.03849579 #> 6  16660.491 0.03372998 #> 7  17345.005 0.09502401 #> 8  14506.407 0.11582412 #> 9  12450.326 0.09412046 #> 10  9565.550 0.35804410 #> 11 27297.832 0.30017683 #> 12 17758.733 0.20886305 #> 13 10075.268 0.13719385 #> 14  8402.480 0.27306219 #> 15 10754.675 0.10974376 #> 16 13368.639 0.04987205 #> 17  7485.412 0.85402883 #> 18 11365.140 0.05354266 #> 19 24264.907 0.05996671 #> 20 10584.374 0.08537967 #> 21 13424.339 0.10829529 #> 22 10275.955 0.14684277 #> 23 10024.918 0.10733773 #> 24  7309.488 0.15066485 #> 25  7087.851 0.31167004 #> 26 10231.910 0.09760702 #> 27  9405.537 0.44537825 #> 28  8610.950 0.15825954 #> 29 17869.057 0.05511827 #> 30 11623.388 0.07832363 #> 31  7667.007 0.23136868 #> 32 10030.946 0.12467688 #> 33  7138.563 0.10963907 #> 34 15789.840 0.09034039 #> 35 24134.944 0.05707198 #> 36 20230.548 0.06131129 #> 37  9220.980 0.12094249 #> 38 10874.673 0.11124036 #> 39 14157.177 0.05572605 #> 40  6690.407 0.22772454 #> 41  9564.511 0.08729996 #> 42 13783.134 0.10627174 #> 43  7211.216 0.14491196 #> 44  6485.282 0.23510147 #> 45  8939.741 0.48175894 #> 46 15460.731 0.06819121 #> 47 19818.833 0.03775992 #> 48 14359.113 0.36398719 #> 49  6209.175 0.11881243 #> 50 13183.924 0.07627689 #> 51  7260.136 0.21362813 #> 52 12128.811 0.12253665 #> 53 30477.641 0.04364185 #> 54 10333.526 0.14205719 #> 55 12630.609 0.06372049 #> 56 10385.815 0.41585492 #> 57  7387.320 0.22284874 #> 58 11466.888 0.14186941 #> 59 12948.996 0.13908392 #> 60  8129.388 0.25564883 #> 61  9546.130 0.12819871 #> 62  6752.316 0.21863140 #> 63 13423.428 0.05639137 #> 64 22100.403 0.04523701 #> 65  8542.659 0.13930779 #> 66 10368.832 0.06807740 #> 67 10210.859 0.17509699 #> 68  8725.549 0.13554502 #> 69  7794.362 0.21527478 #> 70  9618.193 0.09631738 #> 71  4738.325 0.29389391 #> 72  7703.324 0.09920418 #> 73 12093.106 0.43165920 #> 74 17657.622 0.09946456 #> 75  7923.985 0.21775466 #> 76 10633.185 0.12228878 #> 77 13220.184 0.07271324 #> 78 32063.473 0.05584124 #> 79 15122.046 0.09816730 #> 80 12793.717 0.04483305 #> 81 11390.310 0.15038505 #> 82 11800.726 0.06066700 #> 83  9235.364 0.13208011 #> 84  6855.515 0.33219771 #> 85 11547.659 0.45972960 #> 86  8482.244 0.08870874 #> 87  8464.953 0.09782143 #> 88 13509.826 0.08020484 #> 89 12093.349 0.02981109 #> 90 12484.619 0.08173127 #> 91 11126.650 0.11644553 #> 92 10536.540 0.09727307 #> 93  4909.782 0.13866430 #> 94  7230.085 0.23743497 # }"},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_pop.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated EU-SILC data - population data — eusilcA_pop","title":"Simulated EU-SILC data - population data — eusilcA_pop","text":"data set includes synthetic EU-SILC data taken package emdi. Originally, data builds eusilcP package simFrame reduced 17 variables containing regional variables states districts.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated EU-SILC data - population data — eusilcA_pop","text":"","code":"eusilcA_pop"},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_pop.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated EU-SILC data - population data — eusilcA_pop","text":"data frame 25000 observations 17 variables: eqIncome numeric; simplified version equivalized household income. eqsize numeric; equivalized household size according modified OECD scale. gender factor; person's gender (levels: male female). cash numeric; employee cash near cash income (net). self_empl numeric; cash benefits losses self-employment (net). unempl_ben numeric; unemployment benefits (net). age_ben numeric; old-age benefits (net). surv_ben numeric; survivor's benefits (net). sick_ben numeric; sickness benefits (net). dis_ben numeric; disability benefits (net). rent numeric; income rental property land (net). fam_allow numeric; family/children related allowances (net). house_allow numeric; housing allowances (net). cap_inv numeric; interest, dividends, profit capital investments  unincorporated business (net). tax_adj numeric; repayments/receipts tax adjustment (net). state factor; state (nine levels). district factor; districts (94 levels).","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_popAgg.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated EU-SILC data - aggregated population data — eusilcA_popAgg","title":"Simulated EU-SILC data - aggregated population data — eusilcA_popAgg","text":"data set includes synthetic EU-SILC data taken package emdi. Originally, data builds eusilcP package simFrame reduced 15 variables including district identifiers well aggregated household level covariates. Therefore, except variables ratio_n district, variables mean values per district.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_popAgg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated EU-SILC data - aggregated population data — eusilcA_popAgg","text":"","code":"eusilcA_popAgg"},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_popAgg.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated EU-SILC data - aggregated population data — eusilcA_popAgg","text":"data frame 94 observations 15 variables: eqsize numeric; equivalized household size according modified OECD scale. cash numeric; employee cash near cash income (net). self_empl numeric; cash benefits losses self-employment (net). unempl_ben numeric; unemployment benefits (net). age_ben numeric; old-age benefits (net). surv_ben numeric; survivor's benefits (net). sick_ben numeric; sickness benefits (net). dis_ben numeric; disability benefits (net). rent numeric; income rental property land (net). fam_allow numeric; family/children related allowances (net). house_allow numeric; housing allowances (net). cap_inv numeric; interest, dividends, profit capital investments  unincorporated business (net). tax_adj numeric; repayments/receipts tax adjustment (net). ratio_n numeric; ratios population size per area total population size. district factor; Austrian districts (94 levels).","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_smp.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated EU-SILC data - survey sample data — eusilcA_smp","title":"Simulated EU-SILC data - survey sample data — eusilcA_smp","text":"data set includes synthetic EU-SILC data taken package emdi. Originally, data builds eusilcP package simFrame reduced 18 variables containing regional variables states districts.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_smp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated EU-SILC data - survey sample data — eusilcA_smp","text":"","code":"eusilcA_smp"},{"path":"https://krennpa.github.io/SAEforest/reference/eusilcA_smp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated EU-SILC data - survey sample data — eusilcA_smp","text":"data frame 1945 observations 18 variables: eqIncome numeric; simplified version equivalized household income. eqsize numeric; equivalized household size according modified OECD scale. gender factor; person's gender (levels: male female). cash numeric; employee cash near cash income (net). self_empl numeric; cash benefits losses self-employment (net). unempl_ben numeric; unemployment benefits (net). age_ben numeric; old-age benefits (net). surv_ben numeric; survivor's benefits (net). sick_ben numeric; sickness benefits (net). dis_ben numeric; disability benefits (net). rent numeric; income rental property land (net). fam_allow numeric; family/children related allowances (net). house_allow numeric; housing allowances (net). cap_inv numeric; interest, dividends, profit capital investments  unincorporated business (net). tax_adj numeric; repayments/receipts tax adjustment (net). state factor; state (nine levels). district factor; districts (94 levels). weight numeric; constant weight.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualizes disaggregated estimates on a map — map_indicators","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"Function map_indicators visualizes estimates SAEforestObject specified map. function can seen modified wrapper map_plot package emdi.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"","code":"map_indicators(   object,   indicator = \"all\",   MSE = FALSE,   CV = FALSE,   map_obj = NULL,   map_dom_id = NULL,   map_tab = NULL,   color = c(\"white\", \"darkgreen\"),   scale_points = NULL,   guide = \"colourbar\",   return_data = FALSE,   return_plot = FALSE,   gg_theme = theme_minimal() )"},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"object object class SAEforest, containing estimates visualized. indicator Optional character vector specifying indicators mapped: () calculated indicators (\"\"); (ii) default indicators name: \"Mean\", \"Quant10\", \"Quant25\", \"Median\", \"Quant75\", \"Quant90\", \"Gini\", \"Hcr\", \"Pgap\", \"Qsr\" function name/s \"custom_indicator/s\"; (iii) vector names indicators. object estimated option meanOnly = TRUE, indicator arguments ignored \"Mean\" visualized. MSE Logical. TRUE, MSE also visualized. Defaults FALSE. CV Logical. TRUE, CV also visualized. Defaults FALSE. map_obj SpatialPolygonsDataFrame object defined sp package data visualized. map_dom_id Character string containing name variable map_obj indicates domains. map_tab data.frame object two columns matches domain variable population data set (first column) domain variable map_obj (second column). used domain-level identifiers different objects. color vector length 2 defining lowest highest color map. scale_points structure defining lowest, mid highest value colorscale. numeric vector length two given, scale used every plot. Alternatively, list defining colors plot separately may given. guide Character passed scale_colour_gradient ggplot2. Possible values \"none\", \"colourbar\", \"legend\". return_data set TRUE, fortified data frame including map data well chosen indicators returned. Customized maps can easily obtained data frame via package ggplot2. Defaults FALSE. return_plot set TRUE, list individual plots produced ggplot2 returned individual customization processing. gg_theme Specify predefined theme ggplot2. Defaults theme_minimal.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"Creates required plots selected, fortified data.frame list plots.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/map_indicators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualizes disaggregated estimates on a map — map_indicators","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\") data(\"shape_Aut\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_pop,                           num.trees = 50)  # Create map plot for mean indicator - point and MSE estimates but no CV  map_indicators(object = model1, MSE = FALSE, CV = FALSE, map_obj = shape_Aut,                indicator = c(\"Mean\"), map_dom_id = \"PB\") #> Warning: For objects of class SAEforest_mean or SAEforest_meanAGG, only results for the Indicator \"Mean\" are reported   # Create a suitable mapping table to use numerical identifiers of the shape # file  # First find the right order dom_ord <- match(shape_Aut@data$PB, model1$Indicators$district)  # Create the mapping table based on the order obtained above map_tab <- data.frame(pop_data_id = model1$Indicators$district[dom_ord],                       shape_id = shape_Aut@data$BKZ)  # Create map plot for mean indicator - using the numerical domain # identifiers of the shape file. Additionally save the figure in as a list element.  map_obj <- map_indicators(object = model1, MSE = FALSE, CV = FALSE,                           map_obj = shape_Aut, indicator = c(\"Mean\"),                           map_dom_id = \"BKZ\", map_tab = map_tab, return_plot = TRUE) #> Warning: For objects of class SAEforest_mean or SAEforest_meanAGG, only results for the Indicator \"Mean\" are reported  # }"},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for a 'SAEforest' object — plot.SAEforest","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"Plots model-specific characteristics fixed effects random forest component MERF SAEforestObject. variable importance plot produced visualize importance individual covariates predictive performance model. variable importance plot, arguments passed internally function vip. requested, plot function additionally provides partial dependence plot (pdp) visualize impact given number influential covariates target variable. pdp plot produced using partial package pdp. plot-engine plots ggplot2.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"","code":"# S3 method for SAEforest plot(   x,   num_features = 6,   col = \"darkgreen\",   fill = \"darkgreen\",   alpha = 0.8,   include_type = TRUE,   horizontal = TRUE,   gg_theme = theme_minimal(),   lsize = 1.5,   lty = \"solid\",   grid_row = 2,   out_list = FALSE,   pdp_plot = TRUE,   ... )"},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"x object class SAEforest including random forest model class ranger. num_features Number features partial dependence plot required. col Parameter specifying color selected plots. argument must specified can processed aes. Defaults character name color \"darkgreen\". fill Parameter specifying fill selected plots. argument must specified can processed aes. Defaults character name color \"darkgreen\". alpha Parameter specifying transparency fill vip plots. argument must number [0,1]. include_type Logical. set TRUE, type importance specified fitting process model included vip plot. Defaults TRUE. horizontal Logical. set TRUE, importance scores appear x-axis. parameter set FALSE, importance scores plot y-axis. Defaults TRUE. gg_theme Specify predefined theme ggplot2. Defaults theme_minimal. lsize Parameter specifying line size pdp plots. argument must specified can processed aes. Defaults 1.5. lty Parameter specifying line size pdp plots. argument must specified can processed aes. Defaults \"solid\". grid_row Parameter specifying amount rows joint pdp plot. Defaults 2. out_list Logical. set TRUE, list individual plots produced ggplot2 returned individual customization processing. Defaults FALSE. pdp_plot Logical. set TRUE, partial dependence plots produced partial package pdp included. Defaults TRUE. ... Optional additional inputs ignored method.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"Plots variable importance /partial dependence covariates ranked corresponding importance. Additionally, list individual plots can returned facilitating individual customization exporting. See following examples details.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"production importance plots, sure specify parameter importance != 'none' producing estimates function SAEforest_model. pdp plots, note covariates type factor character used partial dependence plots. Dummy-variables can used, however, pdp plots always lines connecting two effect points 0 1. informative pdp plots can produced continuous predictors.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/plot.SAEforest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot function for a 'SAEforest' object — plot.SAEforest","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_pop,                           num.trees = 50) plot(model1) #> Press [enter] to continue #> Warning: The data contained 3 character or factor variables unsuitable for pdp plots(district, gender, state).   # }"},{"path":"https://krennpa.github.io/SAEforest/reference/popNsize.html","id":null,"dir":"Reference","previous_headings":"","what":"Demographic population-size data — popNsize","title":"Demographic population-size data — popNsize","text":"data contains simulated population data based aggregates eusilcA_pop, based eusilcP package simFrame.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/popNsize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demographic population-size data — popNsize","text":"","code":"popNsize"},{"path":"https://krennpa.github.io/SAEforest/reference/popNsize.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Demographic population-size data — popNsize","text":"data frame 94 Austrian districts corresponding synthetic population numbers: district character; districts (94 levels). N_i numeric; simulated population district.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/print.SAEforest.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints a 'SAEforest' object — print.SAEforest","title":"Prints a 'SAEforest' object — print.SAEforest","text":"Basic information SAEforestObject printed.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/print.SAEforest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints a 'SAEforest' object — print.SAEforest","text":"","code":"# S3 method for SAEforest print(x, ...)"},{"path":"https://krennpa.github.io/SAEforest/reference/print.SAEforest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints a 'SAEforest' object — print.SAEforest","text":"x Object class SAEforest, representing point MSE estimates obtained function SAEforest_model. ... Optional additional inputs ignored method.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/print.SAEforest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prints a 'SAEforest' object — print.SAEforest","text":"Prints basic information survey data characteristics.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/shape_Aut.html","id":null,"dir":"Reference","previous_headings":"","what":"Data on shape for Austrian districts — shape_Aut","title":"Data on shape for Austrian districts — shape_Aut","text":"data contains borders 94 Austrian districts simplifies loading shape file Austrian districts. originally used examples package emdi.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/shape_Aut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data on shape for Austrian districts — shape_Aut","text":"","code":"shape_Aut"},{"path":"https://krennpa.github.io/SAEforest/reference/shape_Aut.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data on shape for Austrian districts — shape_Aut","text":"shape file class SpatialPolygonsDataFrame 94 Austrian districts.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":null,"dir":"Reference","previous_headings":"","what":"Presents point, MSE and CV estimates — summarize_indicators","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"Function summarize_indicators reports point mean squared error (MSE) estimates well calculated coefficients variation (CV) fitted SAEforest object.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"","code":"summarize_indicators(object, indicator = \"all\", MSE = FALSE, CV = FALSE)"},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"object Object point /MSE estimates /calculated CV's requested. object must class SAEforest. indicator Optional character vector specifying indicators mapped: () calculated indicators (\"\"); (ii) default indicators name: \"Mean\", \"Quant10\", \"Quant25\", \"Median\", \"Quant75\", \"Quant90\", \"Gini\", \"Hcr\", \"Pgap\", \"Qsr\" function name/s \"custom_indicator/s\"; (iii) vector names indicators. object estimated SAEforest_model indicator arguments ignored \"Mean\" returned. MSE Logical. TRUE, MSE estimates selected indicators per domain added data frame point estimates. Defaults FALSE. CV Logical. TRUE, coefficients variation selected indicators per domain added data frame point estimates. Defaults FALSE.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"return summarize_indicators object class summarize_indicators.SAEforest including domain-specific point /MSE estimates /calculated CV's SAEforest object returned object contains data.frame ind character including names requested indicator(s).","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"Objects class summarize_indicators.SAEforest methods following generic functions: head tail (default documentation, see head),  .matrix (default documentation, see matrix), .data.frame (default documentation, see .data.frame), subset (default documentation, see subset).","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/summarize_indicators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Presents point, MSE and CV estimates — summarize_indicators","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Calculating point + MSE estimates and passing arguments to the forest. # Additionally, two additional indicators and functions as threshold are added. # Note that B and num.trees are low to speed up estimation time and must be changed for # practical applications.  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                           smp_data = eusilcA_smp, pop_data = eusilcA_pop,                           meanOnly = FALSE, MSE = \"nonparametric\", B = 5, mtry = 5,                           num.trees = 50, smearing = FALSE) #> Error SD Bootstrap started: #> MSE Bootstrap with 5 rounds started:  # Extract indicator and show generics: Gini1 <- summarize_indicators(model1, MSE = TRUE, CV = TRUE, indicator = \"Gini\")  head(Gini1) #>              district      Gini     Gini_MSE    Gini_CV #> 1           Amstetten 0.2506610 0.0004543057 0.08503297 #> 2               Baden 0.1815458 0.0001324130 0.06338390 #> 3             Bludenz 0.2841038 0.0007885591 0.09884166 #> 4      Braunau am Inn 0.2697336 0.0002901931 0.06315512 #> 5             Bregenz 0.1617372 0.0001258838 0.06937054 #> 6 Bruck an der Leitha 0.1778989 0.0002382211 0.08675945 tail(Gini1) #>                   district      Gini     Gini_MSE    Gini_CV #> 89                    Wien 0.2413731 0.0001131947 0.04407824 #> 90  Wiener Neustadt (Land) 0.2006023 0.0002253390 0.07483112 #> 91 Wiener Neustadt (Stadt) 0.2100767 0.0014837030 0.18335616 #> 92               Wolfsberg 0.2311071 0.0009660102 0.13448613 #> 93             Zell am See 0.3003195 0.0004827088 0.07315753 #> 94                  Zwettl 0.2677981 0.0022288514 0.17629216 as.data.frame(Gini1) #>                         district      Gini     Gini_MSE    Gini_CV #> 1                      Amstetten 0.2506610 4.543057e-04 0.08503297 #> 2                          Baden 0.1815458 1.324130e-04 0.06338390 #> 3                        Bludenz 0.2841038 7.885591e-04 0.09884166 #> 4                 Braunau am Inn 0.2697336 2.901931e-04 0.06315512 #> 5                        Bregenz 0.1617372 1.258838e-04 0.06937054 #> 6            Bruck an der Leitha 0.1778989 2.382211e-04 0.08675945 #> 7             Bruck-Mürzzuschlag 0.1682187 1.652236e-04 0.07641205 #> 8               Deutschlandsberg 0.1913224 2.293643e-04 0.07915843 #> 9                       Dornbirn 0.2082983 6.929718e-04 0.12637817 #> 10                      Eferding 0.2329806 6.966463e-04 0.11328867 #> 11            Eisenstadt (Stadt) 0.1875840 8.119365e-04 0.15190262 #> 12           Eisenstadt-Umgebung 0.2004414 5.140637e-04 0.11311524 #> 13                     Feldkirch 0.2262377 5.047038e-04 0.09930092 #> 14                   Feldkirchen 0.2537076 1.579048e-03 0.15662611 #> 15                     Freistadt 0.2099376 8.011244e-04 0.13482167 #> 16                       Gmunden 0.2035652 2.554946e-04 0.07852126 #> 17                         Gmünd 0.2557238 2.125490e-03 0.18028451 #> 18                  Graz (Stadt) 0.2155064 1.494586e-04 0.05672838 #> 19                 Graz-Umgebung 0.1829827 1.316544e-03 0.19829311 #> 20                  Grieskirchen 0.2090666 1.008586e-03 0.15190489 #> 21                   Gänserndorf 0.1994797 1.921915e-04 0.06949737 #> 22                       Güssing 0.2301604 7.912222e-04 0.12221336 #> 23                       Hallein 0.2254833 6.489844e-04 0.11298030 #> 24          Hartberg-Fürstenfeld 0.2631672 7.679258e-04 0.10529988 #> 25                      Hermagor 0.2485312 1.650781e-03 0.16347970 #> 26                    Hollabrunn 0.2197322 4.093010e-04 0.09207203 #> 27                          Horn 0.2289698 3.579521e-04 0.08262932 #> 28                          Imst 0.2449579 7.311943e-04 0.11038880 #> 29              Innsbruck (Land) 0.2019746 4.139933e-04 0.10073955 #> 30             Innsbruck (Stadt) 0.2069875 3.551326e-04 0.09104397 #> 31                   Jennersdorf 0.2459114 5.877856e-04 0.09858954 #> 32        Kirchdorf an der Krems 0.2302639 8.306758e-04 0.12516700 #> 33                     Kitzbühel 0.2523222 1.222655e-03 0.13857873 #> 34             Klagenfurt (Land) 0.1815504 5.944269e-04 0.13429261 #> 35            Klagenfurt (Stadt) 0.1627702 4.077377e-04 0.12405537 #> 36                    Korneuburg 0.1608567 9.234021e-05 0.05973879 #> 37                  Krems (Land) 0.2358282 5.561211e-04 0.09999745 #> 38    Krems an der Donau (Stadt) 0.2181051 7.553568e-04 0.12601150 #> 39                      Kufstein 0.1833995 1.678502e-04 0.07064198 #> 40                       Landeck 0.2602467 1.148258e-03 0.13020708 #> 41                      Leibnitz 0.2350626 3.335657e-04 0.07769751 #> 42                        Leoben 0.1860993 1.033475e-04 0.05462673 #> 43                         Lienz 0.2627103 6.914913e-04 0.10009588 #> 44                        Liezen 0.2587971 9.768290e-04 0.12076743 #> 45                    Lilienfeld 0.2417432 6.898991e-04 0.10865219 #> 46                  Linz (Stadt) 0.1847478 1.815338e-04 0.07292888 #> 47                     Linz-Land 0.1684694 3.443728e-05 0.03483321 #> 48                   Mattersburg 0.2073792 7.126628e-04 0.12872916 #> 49                          Melk 0.2656890 1.255416e-03 0.13335838 #> 50                    Mistelbach 0.2002418 2.197294e-04 0.07402685 #> 51                         Murau 0.2544567 2.923920e-03 0.21250489 #> 52                        Murtal 0.2232718 3.604960e-04 0.08503863 #> 53                       Mödling 0.1454743 7.551740e-04 0.18890225 #> 54                   Neunkirchen 0.2177180 2.832909e-04 0.07730757 #> 55               Neusiedl am See 0.2075293 5.246292e-04 0.11036894 #> 56                Oberpullendorf 0.2225282 5.380646e-04 0.10423948 #> 57                      Oberwart 0.2521503 4.386798e-04 0.08306428 #> 58                          Perg 0.2072744 2.015107e-04 0.06848623 #> 59                        Reutte 0.2070370 3.879181e-04 0.09513098 #> 60              Ried im Innkreis 0.2438417 2.854332e-04 0.06928579 #> 61                      Rohrbach 0.2279989 9.168689e-04 0.13280699 #> 62                  Rust (Stadt) 0.2508950 4.058043e-03 0.25390217 #> 63              Salzburg (Stadt) 0.1919434 1.643715e-04 0.06679440 #> 64             Salzburg-Umgebung 0.1639323 1.139990e-04 0.06513076 #> 65        Sankt Johann im Pongau 0.2402848 4.451068e-04 0.08780229 #> 66           Sankt Pölten (Land) 0.2332269 1.503084e-04 0.05256697 #> 67          Sankt Pölten (Stadt) 0.2199186 3.331637e-04 0.08299787 #> 68        Sankt Veit an der Glan 0.2438201 8.221905e-04 0.11760254 #> 69                      Scheibbs 0.2442704 5.390493e-03 0.30056843 #> 70                        Schwaz 0.2317185 4.676871e-04 0.09332906 #> 71                     Schärding 0.2907355 5.480095e-04 0.08051855 #> 72           Spittal an der Drau 0.2521698 6.586615e-04 0.10177429 #> 73                 Steyr (Stadt) 0.2102186 1.969636e-03 0.21111638 #> 74                    Steyr-Land 0.1731385 6.047411e-04 0.14203360 #> 75              Südoststeiermark 0.2439255 9.648467e-04 0.12734208 #> 76                       Tamsweg 0.2094321 1.302228e-04 0.05448792 #> 77                         Tulln 0.1996404 6.394416e-05 0.04005457 #> 78               Urfahr-Umgebung 0.1420431 7.835259e-04 0.19706365 #> 79               Villach (Stadt) 0.1877881 6.452013e-05 0.04277396 #> 80                  Villach Land 0.2042127 3.694955e-04 0.09412866 #> 81                     Voitsberg 0.2111620 1.451617e-03 0.18043062 #> 82                   Vöcklabruck 0.2094107 5.244822e-04 0.10936199 #> 83                   Völkermarkt 0.2369843 7.105056e-04 0.11247713 #> 84        Waidhofen an der Thaya 0.2672654 3.274056e-03 0.21409191 #> 85 Waidhofen an der Ybbs (Stadt) 0.2213196 3.763664e-03 0.27719509 #> 86                          Weiz 0.2436176 2.927377e-04 0.07023130 #> 87                  Wels (Stadt) 0.2369898 1.084322e-03 0.13894711 #> 88                     Wels-Land 0.1967274 7.877112e-04 0.14266538 #> 89                          Wien 0.2413731 1.131947e-04 0.04407824 #> 90        Wiener Neustadt (Land) 0.2006023 2.253390e-04 0.07483112 #> 91       Wiener Neustadt (Stadt) 0.2100767 1.483703e-03 0.18335616 #> 92                     Wolfsberg 0.2311071 9.660102e-04 0.13448613 #> 93                   Zell am See 0.3003195 4.827088e-04 0.07315753 #> 94                        Zwettl 0.2677981 2.228851e-03 0.17629216 as.matrix(Gini1) #>            Gini     Gini_MSE    Gini_CV #>  [1,] 0.2506610 4.543057e-04 0.08503297 #>  [2,] 0.1815458 1.324130e-04 0.06338390 #>  [3,] 0.2841038 7.885591e-04 0.09884166 #>  [4,] 0.2697336 2.901931e-04 0.06315512 #>  [5,] 0.1617372 1.258838e-04 0.06937054 #>  [6,] 0.1778989 2.382211e-04 0.08675945 #>  [7,] 0.1682187 1.652236e-04 0.07641205 #>  [8,] 0.1913224 2.293643e-04 0.07915843 #>  [9,] 0.2082983 6.929718e-04 0.12637817 #> [10,] 0.2329806 6.966463e-04 0.11328867 #> [11,] 0.1875840 8.119365e-04 0.15190262 #> [12,] 0.2004414 5.140637e-04 0.11311524 #> [13,] 0.2262377 5.047038e-04 0.09930092 #> [14,] 0.2537076 1.579048e-03 0.15662611 #> [15,] 0.2099376 8.011244e-04 0.13482167 #> [16,] 0.2035652 2.554946e-04 0.07852126 #> [17,] 0.2557238 2.125490e-03 0.18028451 #> [18,] 0.2155064 1.494586e-04 0.05672838 #> [19,] 0.1829827 1.316544e-03 0.19829311 #> [20,] 0.2090666 1.008586e-03 0.15190489 #> [21,] 0.1994797 1.921915e-04 0.06949737 #> [22,] 0.2301604 7.912222e-04 0.12221336 #> [23,] 0.2254833 6.489844e-04 0.11298030 #> [24,] 0.2631672 7.679258e-04 0.10529988 #> [25,] 0.2485312 1.650781e-03 0.16347970 #> [26,] 0.2197322 4.093010e-04 0.09207203 #> [27,] 0.2289698 3.579521e-04 0.08262932 #> [28,] 0.2449579 7.311943e-04 0.11038880 #> [29,] 0.2019746 4.139933e-04 0.10073955 #> [30,] 0.2069875 3.551326e-04 0.09104397 #> [31,] 0.2459114 5.877856e-04 0.09858954 #> [32,] 0.2302639 8.306758e-04 0.12516700 #> [33,] 0.2523222 1.222655e-03 0.13857873 #> [34,] 0.1815504 5.944269e-04 0.13429261 #> [35,] 0.1627702 4.077377e-04 0.12405537 #> [36,] 0.1608567 9.234021e-05 0.05973879 #> [37,] 0.2358282 5.561211e-04 0.09999745 #> [38,] 0.2181051 7.553568e-04 0.12601150 #> [39,] 0.1833995 1.678502e-04 0.07064198 #> [40,] 0.2602467 1.148258e-03 0.13020708 #> [41,] 0.2350626 3.335657e-04 0.07769751 #> [42,] 0.1860993 1.033475e-04 0.05462673 #> [43,] 0.2627103 6.914913e-04 0.10009588 #> [44,] 0.2587971 9.768290e-04 0.12076743 #> [45,] 0.2417432 6.898991e-04 0.10865219 #> [46,] 0.1847478 1.815338e-04 0.07292888 #> [47,] 0.1684694 3.443728e-05 0.03483321 #> [48,] 0.2073792 7.126628e-04 0.12872916 #> [49,] 0.2656890 1.255416e-03 0.13335838 #> [50,] 0.2002418 2.197294e-04 0.07402685 #> [51,] 0.2544567 2.923920e-03 0.21250489 #> [52,] 0.2232718 3.604960e-04 0.08503863 #> [53,] 0.1454743 7.551740e-04 0.18890225 #> [54,] 0.2177180 2.832909e-04 0.07730757 #> [55,] 0.2075293 5.246292e-04 0.11036894 #> [56,] 0.2225282 5.380646e-04 0.10423948 #> [57,] 0.2521503 4.386798e-04 0.08306428 #> [58,] 0.2072744 2.015107e-04 0.06848623 #> [59,] 0.2070370 3.879181e-04 0.09513098 #> [60,] 0.2438417 2.854332e-04 0.06928579 #> [61,] 0.2279989 9.168689e-04 0.13280699 #> [62,] 0.2508950 4.058043e-03 0.25390217 #> [63,] 0.1919434 1.643715e-04 0.06679440 #> [64,] 0.1639323 1.139990e-04 0.06513076 #> [65,] 0.2402848 4.451068e-04 0.08780229 #> [66,] 0.2332269 1.503084e-04 0.05256697 #> [67,] 0.2199186 3.331637e-04 0.08299787 #> [68,] 0.2438201 8.221905e-04 0.11760254 #> [69,] 0.2442704 5.390493e-03 0.30056843 #> [70,] 0.2317185 4.676871e-04 0.09332906 #> [71,] 0.2907355 5.480095e-04 0.08051855 #> [72,] 0.2521698 6.586615e-04 0.10177429 #> [73,] 0.2102186 1.969636e-03 0.21111638 #> [74,] 0.1731385 6.047411e-04 0.14203360 #> [75,] 0.2439255 9.648467e-04 0.12734208 #> [76,] 0.2094321 1.302228e-04 0.05448792 #> [77,] 0.1996404 6.394416e-05 0.04005457 #> [78,] 0.1420431 7.835259e-04 0.19706365 #> [79,] 0.1877881 6.452013e-05 0.04277396 #> [80,] 0.2042127 3.694955e-04 0.09412866 #> [81,] 0.2111620 1.451617e-03 0.18043062 #> [82,] 0.2094107 5.244822e-04 0.10936199 #> [83,] 0.2369843 7.105056e-04 0.11247713 #> [84,] 0.2672654 3.274056e-03 0.21409191 #> [85,] 0.2213196 3.763664e-03 0.27719509 #> [86,] 0.2436176 2.927377e-04 0.07023130 #> [87,] 0.2369898 1.084322e-03 0.13894711 #> [88,] 0.1967274 7.877112e-04 0.14266538 #> [89,] 0.2413731 1.131947e-04 0.04407824 #> [90,] 0.2006023 2.253390e-04 0.07483112 #> [91,] 0.2100767 1.483703e-03 0.18335616 #> [92,] 0.2311071 9.660102e-04 0.13448613 #> [93,] 0.3003195 4.827088e-04 0.07315753 #> [94,] 0.2677981 2.228851e-03 0.17629216 subset(Gini1, district == \"Wien\") #>    district      Gini     Gini_MSE    Gini_CV #> 89     Wien 0.2413731 0.0001131947 0.04407824 # }"},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizes an 'SAEforest' object — summary.SAEforest","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"Shows additional information data, SAE model components. Information extracted SAEforest object. returned object suitable printing print.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"","code":"# S3 method for SAEforest summary(object, ...)"},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"object object class SAEforest representing point MSE estimates. Objects differ depending estimation method. ... Optional additional inputs ignored method.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"object class summary.SAEforest including information sample population data, model fit random forest specific metrics.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/summary.SAEforest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarizes an 'SAEforest' object — summary.SAEforest","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\")  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Example 1: # Calculating point estimates and discussing basic generic functions  model1 <- SAEforest_model(Y = income, X = X_covar, dName = \"district\",                          smp_data = eusilcA_smp, pop_data = eusilcA_pop,                          num.trees=50, mtry=3)  # SAEforest generics: summary(model1) #> ________________________________________________________________ #> Mixed Effects Random Forest for Small Area Estimation #> ________________________________________________________________ #> Call: #> SAEforest_model(Y = income, X = X_covar, dName = \"district\",  #>     smp_data = eusilcA_smp, pop_data = eusilcA_pop, num.trees = 50,  #>     mtry = 3) #>  #> Domains #> ________________________________________________________________ #>  In-sample Out-of-sample Total #>         70            24    94 #>  #> Totals: #> Units in sample: 1945  #> Units in population: 25000  #>  #>                    Min. 1st Qu. Median      Mean 3rd Qu. Max. #> Sample_domains       14    17.0   22.5  27.78571   29.00  200 #> Population_domains    5   126.5  181.5 265.95745  265.75 5857 #>  #> Random forest component:  #> ________________________________________________________________ #>                                             #> Type:                            Regression #> Number of trees:                         50 #> Number of independent variables:         14 #> Mtry:                                     3 #> Minimal node size:                        5 #> Variable importance mode:          impurity #> Splitrule:                         variance #> Rsquared (OOB):                      0.5977 #>  #> Structural component of random effects: #> ________________________________________________________________ #> Linear mixed model fit by maximum likelihood  ['lmerMod'] #> Formula: Target ~ -1 + (1 | district) #>    Data: data #>  Offset: forest_preds #>  #>      AIC      BIC   logLik deviance df.resid  #>  39342.9  39354.1 -19669.5  39338.9     1943  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -4.4557 -0.4893 -0.0572  0.4470 11.3610  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  district (Intercept) 14429652 3799     #>  Residual             32568503 5707     #> Number of obs: 1945, groups:  district, 70 #>  #> ICC:  0.3070259  #>  #> Convergence of MERF algorithm:  #> ________________________________________________________________ #> Convergence achieved after 18 iterations. #> A maximum of 25 iterations used and tolerance set to: 1e-04  #>  #> Monitored Log-Likelihood:                                                                        #>  0 -19593.66 -19603.83 -19662.29 -19640.94 -19627.34 -19630.9 -19659.51 #>                                                                        #>  -19651.43 -19671.83 -19656.64 -19637.15 -19622.16 -19585.67 -19653.35 #>                                          #>  -19671.68 -19633.28 -19668.55 -19669.47 # }"},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Tuning and cross-validation of MERF parameters — tune_parameters","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"Function tune_parameters allows tune parameters implemented MERF method. Essentially, function can understood modified wrapper train package caret, treating MERFs custom method.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"","code":"tune_parameters(   Y,   X,   data,   dName,   trControl,   tuneGrid,   seed = 11235,   gg_theme = theme_minimal(),   plot_res = TRUE,   return_plot = FALSE,   na.rm = TRUE,   ... )"},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"Y Continuous input value target variable. X Matrix data.frame predictive covariates. data data.frame survey sample data including specified elements Y X. dName Character specifying name domain identifier, random intercepts modeled. trControl Control parameters passed train. important parameters method (\"repeatedcv\" x-fold cross-validation), number (number folds) repeats (number repetitions). details see trainControl example . tuneGrid data.frame possible tuning values. columns must names tuning parameters. tuning function grid must comprise entries following parameters: num.trees, mtry, min.node.size, splitrule. seed Enabling reproducibility cross-validation tuning. Defaults 11235. gg_theme Specify predefined theme ggplot2. Defaults theme_minimal. plot_res Optional logical. TRUE, plot results cross-validation tuning shown. Defaults TRUE. return_plot set TRUE, list comparative plot produced ggplot2 returned individual customization processing. na.rm Logical. Whether missing values removed. Defaults TRUE. ... Additional parameters directly passed random forest ranger /training function train. details possible parameters examples see ranger train.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"Prints requested optimal tuning parameters (requested) additional comparative plot produced ggplot2.","code":""},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"Tuning can performed following four parameters: num.trees (number trees forest), mtry (number variables split candidates node), min.node.size (minimal individual node size) splitrule (general splitting rule). details see ranger.","code":""},{"path":[]},{"path":"https://krennpa.github.io/SAEforest/reference/tune_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tuning and cross-validation of MERF parameters — tune_parameters","text":"","code":"# \\donttest{ # Loading data data(\"eusilcA_pop\") data(\"eusilcA_smp\") library(caret) #> Loading required package: ggplot2 #> Loading required package: lattice  income <- eusilcA_smp$eqIncome X_covar <- eusilcA_smp[, -c(1, 16, 17, 18)]  # Specific characteristics of Cross-validation fitControl <- trainControl(method = \"repeatedcv\", number = 5,                            repeats = 1)  # Define a tuning-grid merfGrid <- expand.grid(num.trees = 50, mtry = c(3, 7, 9),                         min.node.size = 10, splitrule = \"variance\")  tune_parameters(Y = income, X = X_covar, data = eusilcA_smp,                 dName = \"district\", trControl = fitControl,                 tuneGrid = merfGrid) #> 1945 samples #>   15 predictor #>  #> No pre-processing #> Resampling: Cross-Validated (5 fold, repeated 1 times)  #> Summary of sample sizes: 1557, 1557, 1556, 1556, 1554  #> Resampling results across tuning parameters: #>  #>   mtry  RMSE      Rsquared   MAE      #>   3     5757.157  0.7120835  3830.652 #>   7     5518.994  0.7281565  3588.959 #>   9     5606.048  0.7184037  3655.541 #>  #> Tuning parameter 'num.trees' was held constant at a value of 50 #>  #> Tuning parameter 'min.node.size' was held constant at a value of 10 #>  #> Tuning parameter 'splitrule' was held constant at a value of variance #> RMSE was used to select the optimal model using the smallest value. #> The final values used for the model were num.trees = 50, mtry = #>  7, min.node.size = 10 and splitrule = variance.  # }"},{"path":[]}]
